"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apikeyconfig as shared_apikeyconfig
from ..shared import authtype_enum as shared_authtype_enum
from ..shared import basicauthconfig as shared_basicauthconfig
from ..shared import oauthconfig as shared_oauthconfig
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Auth:
    
    auth_type: shared_authtype_enum.AuthTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authType') }})  
    api_key_config: Optional[shared_apikeyconfig.APIKeyConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKeyConfig'), 'exclude': lambda f: f is None }})
    r"""To be sent only if authType is API_KEY"""  
    basic_auth_config: Optional[shared_basicauthconfig.BasicAuthConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicAuthConfig'), 'exclude': lambda f: f is None }})
    r"""To be sent only if authType is BASIC"""  
    oauth_config: Optional[shared_oauthconfig.OAuthConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauthConfig'), 'exclude': lambda f: f is None }})
    r"""To be sent only if authType is OAUTH_CLIENT_CREDENTIALS"""  
    