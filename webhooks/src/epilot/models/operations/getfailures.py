"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errorresp as shared_errorresp
from ..shared import failuresresp as shared_failuresresp
from typing import Optional


@dataclasses.dataclass
class GetFailuresRequest:
    
    last_loaded_event_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lastLoadedEventId', 'style': 'form', 'explode': True }})
    r"""Optional Key. To be provided when loading paginated data. It is always returned initially by this API, is pagination is needed."""  
    last_loaded_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lastLoadedTimestamp', 'style': 'form', 'explode': True }})
    r"""Optional Key. To be provided when loading paginated data. It is always returned initially by this API, is pagination is needed."""  
    

@dataclasses.dataclass
class GetFailuresResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_resp: Optional[shared_errorresp.ErrorResp] = dataclasses.field(default=None)
    r"""Validation Errors"""  
    failures_resp: Optional[shared_failuresresp.FailuresResp] = dataclasses.field(default=None)
    r"""Success - if the API call returned successfully"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    