"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from epilot import utils
from typing import Any, Dict, List, Optional

class BillingPeriod(str, Enum):
    r"""The billing period associated with the contract."""
    WEEKLY = 'weekly'
    MONTHLY = 'monthly'
    EVERY_QUARTER = 'every_quarter'
    EVERY_6_MONTHS = 'every_6_months'
    YEARLY = 'yearly'

class Branch(str, Enum):
    r"""The branch associated with the contract."""
    POWER = 'power'
    GAS = 'gas'
    WATER = 'water'
    WASTE_WATER = 'waste_water'
    DISTRICT_HEATING = 'district_heating'

class NoticeTimeUnit(str, Enum):
    r"""The unit of time for the notice period."""
    WEEKS = 'weeks'
    MONTHS = 'months'
    YEARS = 'years'

class RenewalDurationUnit(str, Enum):
    r"""The unit of time for the renewal period."""
    WEEKS = 'weeks'
    MONTHS = 'months'
    YEARS = 'years'

class Status(str, Enum):
    r"""The status of the contract."""
    DRAFT = 'draft'
    IN_APPROVAL_PROCESS = 'in_approval_process'
    APPROVED = 'approved'
    ACTIVE = 'active'
    DEACTIVATED = 'deactivated'
    REVOKED = 'revoked'
    TERMINATED = 'terminated'
    EXPIRED = 'expired'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Contract:
    r"""The contract entity"""
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""Creation timestamp of the entity"""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_id') }})
    r"""Entity ID"""
    org: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_org') }})
    r"""Organization ID the entity belongs to"""
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_title') }})
    r"""Title of the entity"""
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""Last update timestamp of the entity"""
    tags: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_tags'), 'exclude': lambda f: f is None }})
    r"""Array of entity tags"""
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_number'), 'exclude': lambda f: f is None }})
    r"""The account number associated with the contract."""
    additional_addresses: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_addresses'), 'exclude': lambda f: f is None }})
    r"""Any additional addresses associated with the contract."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    balance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""Current balance of the contract in cents. (precision 2)"""
    balance_amount_decimal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance_amount_decimal'), 'exclude': lambda f: f is None }})
    r"""Current balance of the contract in decimal string representation."""
    balance_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance_currency'), 'exclude': lambda f: f is None }})
    r"""Currency code in ISO 4217 format"""
    billing_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_address'), 'exclude': lambda f: f is None }})
    r"""The billing address associated with the contract."""
    billing_duration_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_duration_amount'), 'exclude': lambda f: f is None }})
    r"""The duration of the billing period."""
    billing_period: Optional[BillingPeriod] = dataclasses.field(default=BillingPeriod.WEEKLY, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_period'), 'exclude': lambda f: f is None }})
    r"""The billing period associated with the contract."""
    billing_schedule_by_month_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_schedule_by_month_day'), 'exclude': lambda f: f is None }})
    r"""Defines the day of the month in which the installments are due."""
    billing_schedule_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_schedule_end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'exclude': lambda f: f is None }})
    r"""Defines the end date for the billing schedule"""
    billing_schedule_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_schedule_start_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'exclude': lambda f: f is None }})
    r"""Defines the start date for the billing schedule"""
    branch: Optional[Branch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch'), 'exclude': lambda f: f is None }})
    r"""The branch associated with the contract."""
    contract_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contract_name'), 'exclude': lambda f: f is None }})
    r"""The name of the contract."""
    contract_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contract_number'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the contract."""
    delivery_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivery_address'), 'exclude': lambda f: f is None }})
    r"""The delivery address associated with the contract."""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A brief description of the contract."""
    installment_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installment_amount'), 'exclude': lambda f: f is None }})
    r"""Set amount for installments in cents. (precision 2)"""
    installment_amount_decimal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installment_amount_decimal'), 'exclude': lambda f: f is None }})
    r"""Set amount for installments in decimal string representation."""
    notice_time_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notice_time_amount'), 'exclude': lambda f: f is None }})
    r"""The amount of notice required for termination of the contract."""
    notice_time_unit: Optional[NoticeTimeUnit] = dataclasses.field(default=NoticeTimeUnit.MONTHS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notice_time_unit'), 'exclude': lambda f: f is None }})
    r"""The unit of time for the notice period."""
    renewal_duration_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal_duration_amount'), 'exclude': lambda f: f is None }})
    r"""The duration of the renewal period."""
    renewal_duration_unit: Optional[RenewalDurationUnit] = dataclasses.field(default=RenewalDurationUnit.MONTHS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal_duration_unit'), 'exclude': lambda f: f is None }})
    r"""The unit of time for the renewal period."""
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'exclude': lambda f: f is None }})
    r"""The start date of the contract."""
    status: Optional[Status] = dataclasses.field(default=Status.DRAFT, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the contract."""
    termination_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_date'), 'exclude': lambda f: f is None }})
    r"""The date on which the contract was terminated."""
    termination_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_reason'), 'exclude': lambda f: f is None }})
    r"""The reason for the termination of the contract."""
    

