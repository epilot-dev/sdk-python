"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date, datetime
from enum import Enum
from epilot_customer_portal.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class SchemasDollarRelationTypedDict(TypedDict):
    entity_id: NotRequired[str]
    r"""Entity ID for the related contract."""
    

class SchemasDollarRelation(BaseModel):
    entity_id: Optional[str] = None
    r"""Entity ID for the related contract."""
    

class SchemasContractTypedDict(TypedDict):
    dollar_relation: NotRequired[List[SchemasDollarRelationTypedDict]]
    

class SchemasContract(BaseModel):
    dollar_relation: Annotated[Optional[List[SchemasDollarRelation]], pydantic.Field(alias="$relation")] = None
    

class SchemasType(str, Enum):
    r"""Type of the billing event."""
    REIMBURSEMENT = "reimbursement"

class ReimbursementEventSchemasTypedDict(TypedDict):
    r"""An entity that describes a reimbursement billing event."""
    
    created_at: datetime
    r"""Creation timestamp of the entity"""
    id: str
    r"""Entity ID"""
    org: str
    r"""Organization ID the entity belongs to"""
    title: str
    r"""Title of the entity"""
    updated_at: datetime
    r"""Last update timestamp of the entity"""
    contract: SchemasContractTypedDict
    type: SchemasType
    r"""Type of the billing event."""
    tags: NotRequired[List[str]]
    r"""Array of entity tags"""
    billing_amount: NotRequired[int]
    r"""Amount to be paid in cents i.e. precision 2"""
    billing_amount_decimal: NotRequired[str]
    r"""Amount to be paid in cents in decimal string representation"""
    billing_currency: NotRequired[str]
    r"""Currency code in ISO 4217 format"""
    due_date: NotRequired[date]
    r"""Date on which the installment is due."""
    external_id: NotRequired[str]
    r"""Unique identifier for event, used to reference the event to a 3rd party resource such as a SAP Installment."""
    paid_date: NotRequired[date]
    r"""Date on which the customer is reimbursed."""
    

class ReimbursementEventSchemas(BaseModel):
    r"""An entity that describes a reimbursement billing event."""
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    created_at: Annotated[datetime, pydantic.Field(alias="_created_at")]
    r"""Creation timestamp of the entity"""
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Entity ID"""
    org: Annotated[str, pydantic.Field(alias="_org")]
    r"""Organization ID the entity belongs to"""
    title: Annotated[str, pydantic.Field(alias="_title")]
    r"""Title of the entity"""
    updated_at: Annotated[datetime, pydantic.Field(alias="_updated_at")]
    r"""Last update timestamp of the entity"""
    contract: SchemasContract
    type: SchemasType
    r"""Type of the billing event."""
    tags: Annotated[Optional[List[str]], pydantic.Field(alias="_tags")] = None
    r"""Array of entity tags"""
    billing_amount: Optional[int] = None
    r"""Amount to be paid in cents i.e. precision 2"""
    billing_amount_decimal: Optional[str] = None
    r"""Amount to be paid in cents in decimal string representation"""
    billing_currency: Optional[str] = None
    r"""Currency code in ISO 4217 format"""
    due_date: Optional[date] = None
    r"""Date on which the installment is due."""
    external_id: Optional[str] = None
    r"""Unique identifier for event, used to reference the event to a 3rd party resource such as a SAP Installment."""
    paid_date: Optional[date] = None
    r"""Date on which the customer is reimbursed."""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    

class DollarRelationTypedDict(TypedDict):
    entity_id: NotRequired[str]
    r"""Entity ID for the related contract."""
    

class DollarRelation(BaseModel):
    entity_id: Optional[str] = None
    r"""Entity ID for the related contract."""
    

class SchemasInstallmentEventContractTypedDict(TypedDict):
    dollar_relation: NotRequired[List[DollarRelationTypedDict]]
    

class SchemasInstallmentEventContract(BaseModel):
    dollar_relation: Annotated[Optional[List[DollarRelation]], pydantic.Field(alias="$relation")] = None
    

class Type(str, Enum):
    r"""Type of the billing event."""
    INSTALLMENT = "installment"

class SchemasTypedDict(TypedDict):
    r"""An entity that describes an installment billing event."""
    
    created_at: datetime
    r"""Creation timestamp of the entity"""
    id: str
    r"""Entity ID"""
    org: str
    r"""Organization ID the entity belongs to"""
    title: str
    r"""Title of the entity"""
    updated_at: datetime
    r"""Last update timestamp of the entity"""
    contract: SchemasInstallmentEventContractTypedDict
    due_date: date
    r"""Date on which the installment is due."""
    type: Type
    r"""Type of the billing event."""
    tags: NotRequired[List[str]]
    r"""Array of entity tags"""
    billing_amount: NotRequired[int]
    r"""Amount to be paid in cents i.e. precision 2"""
    billing_amount_decimal: NotRequired[str]
    r"""Amount to be paid in cents in decimal string representation"""
    billing_currency: NotRequired[str]
    r"""Currency code in ISO 4217 format"""
    external_id: NotRequired[str]
    r"""Unique identifier for event, used to reference the event to a 3rd party resource such as a SAP Installment."""
    paid_date: NotRequired[date]
    r"""Date on which the installment is paid by the customer."""
    

class Schemas(BaseModel):
    r"""An entity that describes an installment billing event."""
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    created_at: Annotated[datetime, pydantic.Field(alias="_created_at")]
    r"""Creation timestamp of the entity"""
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Entity ID"""
    org: Annotated[str, pydantic.Field(alias="_org")]
    r"""Organization ID the entity belongs to"""
    title: Annotated[str, pydantic.Field(alias="_title")]
    r"""Title of the entity"""
    updated_at: Annotated[datetime, pydantic.Field(alias="_updated_at")]
    r"""Last update timestamp of the entity"""
    contract: SchemasInstallmentEventContract
    due_date: date
    r"""Date on which the installment is due."""
    type: Type
    r"""Type of the billing event."""
    tags: Annotated[Optional[List[str]], pydantic.Field(alias="_tags")] = None
    r"""Array of entity tags"""
    billing_amount: Optional[int] = None
    r"""Amount to be paid in cents i.e. precision 2"""
    billing_amount_decimal: Optional[str] = None
    r"""Amount to be paid in cents in decimal string representation"""
    billing_currency: Optional[str] = None
    r"""Currency code in ISO 4217 format"""
    external_id: Optional[str] = None
    r"""Unique identifier for event, used to reference the event to a 3rd party resource such as a SAP Installment."""
    paid_date: Optional[date] = None
    r"""Date on which the installment is paid by the customer."""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    

BillingEventTypedDict = Union[SchemasTypedDict, ReimbursementEventSchemasTypedDict]
r"""An entity that describes a billing event such as a future installment or a reimbursement back to the customer."""


BillingEvent = Union[Schemas, ReimbursementEventSchemas]
r"""An entity that describes a billing event such as a future installment or a reimbursement back to the customer."""

