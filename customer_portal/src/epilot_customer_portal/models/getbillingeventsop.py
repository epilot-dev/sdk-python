"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .billingevent import BillingEvent, BillingEventTypedDict
from datetime import datetime
from enum import Enum
from epilot_customer_portal.types import BaseModel
from epilot_customer_portal.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class EventType(str, Enum):
    r"""Type of billing event to filter by"""
    INSTALLMENT = "installment"
    REIMBURSEMENT = "reimbursement"

class GetBillingEventsRequestTypedDict(TypedDict):
    date_after: NotRequired[datetime]
    date_before: NotRequired[datetime]
    entity_id: NotRequired[List[str]]
    r"""Entity ID to filter billing events by"""
    event_type: NotRequired[EventType]
    r"""Type of billing event to filter by"""
    from_: NotRequired[float]
    size: NotRequired[float]
    

class GetBillingEventsRequest(BaseModel):
    date_after: Annotated[Optional[datetime], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    date_before: Annotated[Optional[datetime], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    entity_id: Annotated[Optional[List[str]], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""Entity ID to filter billing events by"""
    event_type: Annotated[Optional[EventType], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""Type of billing event to filter by"""
    from_: Annotated[Optional[float], pydantic.Field(alias="from"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = 0
    size: Annotated[Optional[float], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = 100
    

class GetBillingEventsResponseBodyTypedDict(TypedDict):
    r"""List billing events for all contracts/orders of specific customer"""
    
    hits: NotRequired[float]
    r"""Total number of billing events for pagination"""
    results: NotRequired[List[BillingEventTypedDict]]
    

class GetBillingEventsResponseBody(BaseModel):
    r"""List billing events for all contracts/orders of specific customer"""
    
    hits: Optional[float] = None
    r"""Total number of billing events for pagination"""
    results: Optional[List[BillingEvent]] = None
    
