"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .activitycallercontext import ActivityCallerContext, ActivityCallerContextTypedDict
from datetime import datetime
from epilot_customer_portal.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class EntityTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Entity ID"""
    schema_: NotRequired[str]
    

class Entity(BaseModel):
    id: Optional[str] = None
    r"""Entity ID"""
    schema_: Annotated[Optional[str], pydantic.Field(alias="schema")] = None
    

class PayloadTypedDict(TypedDict):
    caller: NotRequired[ActivityCallerContextTypedDict]
    entity: NotRequired[EntityTypedDict]
    

class Payload(BaseModel):
    caller: Optional[ActivityCallerContext] = None
    entity: Optional[Entity] = None
    

class ActivityItemTypedDict(TypedDict):
    message: str
    r"""Message for activity. Supports handlebars syntax."""
    title: str
    r"""Title for activity. Supports handlebars syntax."""
    type: str
    id: NotRequired[str]
    r"""See https://github.com/ulid/spec"""
    payload: NotRequired[PayloadTypedDict]
    timestamp: NotRequired[datetime]
    

class ActivityItem(BaseModel):
    message: str
    r"""Message for activity. Supports handlebars syntax."""
    title: str
    r"""Title for activity. Supports handlebars syntax."""
    type: str
    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None
    r"""See https://github.com/ulid/spec"""
    payload: Optional[Payload] = None
    timestamp: Optional[datetime] = None
    
