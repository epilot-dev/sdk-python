"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .origin import Origin
from epilot_customer_portal.types import BaseModel
from epilot_customer_portal.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class TriggerEntityAccessEventRequestTypedDict(TypedDict):
    origin: Origin
    r"""Portal origin"""
    schema_: str
    r"""Entity schema"""
    entity_id: NotRequired[str]
    r"""Entity ID"""
    

class TriggerEntityAccessEventRequest(BaseModel):
    origin: Annotated[Origin, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    r"""Portal origin"""
    schema_: Annotated[str, pydantic.Field(alias="schema"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Entity schema"""
    entity_id: Annotated[Optional[str], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""Entity ID"""
    

class TriggerEntityAccessEventResponseBodyTypedDict(TypedDict):
    r"""The event has been triggered successfully."""
    
    event_id: NotRequired[str]
    r"""Event ID"""
    

class TriggerEntityAccessEventResponseBody(BaseModel):
    r"""The event has been triggered successfully."""
    
    event_id: Annotated[Optional[str], pydantic.Field(alias="eventId")] = None
    r"""Event ID"""
    
