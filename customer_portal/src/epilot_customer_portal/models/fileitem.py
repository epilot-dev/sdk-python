"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .entityslug import EntitySlug
from datetime import datetime
from enum import Enum
from epilot_customer_portal.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class RelationsTypedDict(TypedDict):
    schema_: NotRequired[EntitySlug]
    r"""URL-friendly identifier for the entity schema"""
    title: NotRequired[str]
    r"""The title of the parent entity"""
    entity_id: NotRequired[str]
    r"""Entity ID"""
    

class Relations(BaseModel):
    schema_: Annotated[Optional[EntitySlug], pydantic.Field(alias="_schema")] = None
    r"""URL-friendly identifier for the entity schema"""
    title: Annotated[Optional[str], pydantic.Field(alias="_title")] = None
    r"""The title of the parent entity"""
    entity_id: Optional[str] = None
    r"""Entity ID"""
    

class FileItemSchema(str, Enum):
    FILE = "file"

class AccessControl(str, Enum):
    PRIVATE = "private"
    PUBLIC_READ = "public-read"

class FileItemType(str, Enum):
    r"""Human readable type for file"""
    DOCUMENT = "document"
    DOCUMENT_TEMPLATE = "document_template"
    TEXT = "text"
    IMAGE = "image"
    VIDEO = "video"
    AUDIO = "audio"
    SPREADSHEET = "spreadsheet"
    PRESENTATION = "presentation"
    FONT = "font"
    ARCHIVE = "archive"
    APPLICATION = "application"
    UNKNOWN = "unknown"

class FileItemTypedDict(TypedDict):
    r"""The file entity"""
    
    created_at: datetime
    r"""Creation timestamp of the entity"""
    id: str
    r"""Entity ID"""
    org: str
    r"""Organization ID the entity belongs to"""
    schema_: FileItemSchema
    title: str
    r"""Title of the entity"""
    updated_at: datetime
    r"""Last update timestamp of the entity"""
    relations: NotRequired[List[RelationsTypedDict]]
    tags: NotRequired[List[str]]
    r"""Array of entity tags"""
    access_control: NotRequired[AccessControl]
    file_date: NotRequired[datetime]
    r"""The date used for sorting the file"""
    filename: NotRequired[str]
    is_new: NotRequired[bool]
    r"""Indicate whether the user has not seen/downloaded the file before"""
    mime_type: NotRequired[str]
    r"""MIME type of the file"""
    public_url: NotRequired[str]
    r"""Direct URL for file (public only if file access control is public-read)"""
    type: NotRequired[FileItemType]
    r"""Human readable type for file"""
    

class FileItem(BaseModel):
    r"""The file entity"""
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    created_at: Annotated[datetime, pydantic.Field(alias="_created_at")]
    r"""Creation timestamp of the entity"""
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Entity ID"""
    org: Annotated[str, pydantic.Field(alias="_org")]
    r"""Organization ID the entity belongs to"""
    schema_: Annotated[FileItemSchema, pydantic.Field(alias="_schema")]
    title: Annotated[str, pydantic.Field(alias="_title")]
    r"""Title of the entity"""
    updated_at: Annotated[datetime, pydantic.Field(alias="_updated_at")]
    r"""Last update timestamp of the entity"""
    relations: Annotated[Optional[List[Relations]], pydantic.Field(alias="_relations")] = None
    tags: Annotated[Optional[List[str]], pydantic.Field(alias="_tags")] = None
    r"""Array of entity tags"""
    access_control: Optional[AccessControl] = AccessControl.PRIVATE
    file_date: Optional[datetime] = None
    r"""The date used for sorting the file"""
    filename: Optional[str] = None
    is_new: Optional[bool] = None
    r"""Indicate whether the user has not seen/downloaded the file before"""
    mime_type: Optional[str] = None
    r"""MIME type of the file"""
    public_url: Optional[str] = None
    r"""Direct URL for file (public only if file access control is public-read)"""
    type: Optional[FileItemType] = None
    r"""Human readable type for file"""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
