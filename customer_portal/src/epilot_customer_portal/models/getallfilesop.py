"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .fileitem import FileItem, FileItemTypedDict
from epilot_customer_portal.types import BaseModel
from epilot_customer_portal.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetAllFilesRequestTypedDict(TypedDict):
    from_: float
    size: float
    entity_ids: NotRequired[List[str]]
    r"""List of entity ids to filter the results"""
    

class GetAllFilesRequest(BaseModel):
    from_: Annotated[float, pydantic.Field(alias="from"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    size: Annotated[float, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    entity_ids: Annotated[Optional[List[str]], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""List of entity ids to filter the results"""
    

class GetAllFilesResponseBodyTypedDict(TypedDict):
    r"""The files have been fetched successfully."""
    
    hits: NotRequired[float]
    r"""Total number of files for pagination"""
    results: NotRequired[List[FileItemTypedDict]]
    

class GetAllFilesResponseBody(BaseModel):
    r"""The files have been fetched successfully."""
    
    hits: Optional[float] = None
    r"""Total number of files for pagination"""
    results: Optional[List[FileItem]] = None
    
