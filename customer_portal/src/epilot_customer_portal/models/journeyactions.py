"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .actionlabel import ActionLabel, ActionLabelTypedDict
from .rule import Rule, RuleTypedDict
from epilot_customer_portal.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


class JourneyActionsTypedDict(TypedDict):
    action_label: NotRequired[ActionLabelTypedDict]
    journey_id: NotRequired[Nullable[str]]
    rules: NotRequired[Nullable[List[RuleTypedDict]]]
    slug: NotRequired[Nullable[str]]
    

class JourneyActions(BaseModel):
    action_label: Optional[ActionLabel] = None
    journey_id: OptionalNullable[str] = UNSET
    rules: OptionalNullable[List[Rule]] = UNSET
    slug: OptionalNullable[str] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["action_label", "journey_id", "rules", "slug"]
        nullable_fields = ["journey_id", "rules", "slug"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
