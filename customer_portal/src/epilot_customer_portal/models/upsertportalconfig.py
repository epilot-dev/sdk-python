"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .adminuser import AdminUser, AdminUserTypedDict
from .allowedfileextensions import AllowedFileExtensions, AllowedFileExtensionsTypedDict
from .emailtemplates import EmailTemplates, EmailTemplatesTypedDict
from .entityslug import EntitySlug
from .grant import Grant, GrantTypedDict
from .registrationidentifier import RegistrationIdentifier, RegistrationIdentifierTypedDict
from enum import Enum
from epilot_customer_portal.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class UpsertPortalConfigAdvancedMfaTypedDict(TypedDict):
    enabled: NotRequired[bool]
    r"""Advanced MFA feature flag"""
    

class UpsertPortalConfigAdvancedMfa(BaseModel):
    enabled: Optional[bool] = None
    r"""Advanced MFA feature flag"""
    

class UpsertPortalConfigPasswordPolicyTypedDict(TypedDict):
    r"""Password policy for the portal"""
    
    minimum_length: NotRequired[int]
    r"""Minimum password length"""
    require_lowercase: NotRequired[bool]
    r"""Require lowercase characters"""
    require_numbers: NotRequired[bool]
    r"""Require numbers"""
    require_symbols: NotRequired[bool]
    r"""Require symbols"""
    require_uppercase: NotRequired[bool]
    r"""Require uppercase characters"""
    

class UpsertPortalConfigPasswordPolicy(BaseModel):
    r"""Password policy for the portal"""
    
    minimum_length: Optional[int] = None
    r"""Minimum password length"""
    require_lowercase: Optional[bool] = None
    r"""Require lowercase characters"""
    require_numbers: Optional[bool] = None
    r"""Require numbers"""
    require_symbols: Optional[bool] = None
    r"""Require symbols"""
    require_uppercase: Optional[bool] = None
    r"""Require uppercase characters"""
    

class UpsertPortalConfigCognitoDetailsTypedDict(TypedDict):
    r"""AWS Cognito Pool details for the portal"""
    
    cognito_user_pool_arn: NotRequired[str]
    r"""Cognito user pool ARN"""
    cognito_user_pool_client_id: NotRequired[str]
    r"""Cognito user pool client ID"""
    cognito_user_pool_id: NotRequired[str]
    r"""Cognito user pool ID"""
    password_policy: NotRequired[UpsertPortalConfigPasswordPolicyTypedDict]
    r"""Password policy for the portal"""
    

class UpsertPortalConfigCognitoDetails(BaseModel):
    r"""AWS Cognito Pool details for the portal"""
    
    cognito_user_pool_arn: Optional[str] = None
    r"""Cognito user pool ARN"""
    cognito_user_pool_client_id: Optional[str] = None
    r"""Cognito user pool client ID"""
    cognito_user_pool_id: Optional[str] = None
    r"""Cognito user pool ID"""
    password_policy: Optional[UpsertPortalConfigPasswordPolicy] = None
    r"""Password policy for the portal"""
    

class DefaultUserToNotifyTypedDict(TypedDict):
    r"""Default 360 user to notify upon an internal notification"""
    
    on_pending_user: NotRequired[List[AdminUserTypedDict]]
    r"""Default admin users for pending user notification to notify"""
    

class DefaultUserToNotify(BaseModel):
    r"""Default 360 user to notify upon an internal notification"""
    
    on_pending_user: Annotated[Optional[List[AdminUser]], pydantic.Field(alias="onPendingUser")] = None
    r"""Default admin users for pending user notification to notify"""
    

class UpsertPortalConfigActionLabelTypedDict(TypedDict):
    de: NotRequired[str]
    en: NotRequired[str]
    

class UpsertPortalConfigActionLabel(BaseModel):
    de: Optional[str] = None
    en: Optional[str] = None
    

class EntityActionsTypedDict(TypedDict):
    action_label: NotRequired[UpsertPortalConfigActionLabelTypedDict]
    journey_id: NotRequired[str]
    r"""Entity ID"""
    slug: NotRequired[EntitySlug]
    r"""URL-friendly identifier for the entity schema"""
    

class EntityActions(BaseModel):
    action_label: Annotated[Optional[UpsertPortalConfigActionLabel], pydantic.Field(alias="action_Label")] = None
    journey_id: Optional[str] = None
    r"""Entity ID"""
    slug: Optional[EntitySlug] = None
    r"""URL-friendly identifier for the entity schema"""
    

class UpsertPortalConfigCadencePeriodType(str, Enum):
    DAYS = "days"
    WEEKS = "weeks"
    MONTHS = "months"

class UpsertPortalConfigRuleType(str, Enum):
    CADENCE = "cadence"
    RELATIVE_TO_CURRENT_VALUE = "relative_to_current_value"
    DAYS_BEFORE_DATE = "days_before_date"
    OVERDUE_PAYMENTS = "overdue_payments"

class UpsertPortalConfigEntityEditRulesTypedDict(TypedDict):
    allowed_decrement: NotRequired[str]
    allowed_increment: NotRequired[str]
    attribute: NotRequired[str]
    cadence_period: NotRequired[float]
    cadence_period_type: NotRequired[UpsertPortalConfigCadencePeriodType]
    changes_allowed: NotRequired[int]
    grace_period: NotRequired[int]
    number_of_days_before_restriction: NotRequired[int]
    rule_type: NotRequired[UpsertPortalConfigRuleType]
    slug: NotRequired[EntitySlug]
    r"""URL-friendly identifier for the entity schema"""
    

class UpsertPortalConfigEntityEditRules(BaseModel):
    allowed_decrement: Optional[str] = None
    allowed_increment: Optional[str] = None
    attribute: Optional[str] = None
    cadence_period: Optional[float] = None
    cadence_period_type: Optional[UpsertPortalConfigCadencePeriodType] = None
    changes_allowed: Optional[int] = None
    grace_period: Optional[int] = None
    number_of_days_before_restriction: Optional[int] = None
    rule_type: Optional[UpsertPortalConfigRuleType] = None
    slug: Optional[EntitySlug] = None
    r"""URL-friendly identifier for the entity schema"""
    

class UpsertPortalConfigTypeTypedDict(TypedDict):
    attributes: NotRequired[List[str]]
    r"""Attributes used to identify an entity"""
    is_enabled: NotRequired[bool]
    r"""Enable/Disable the entity identifier"""
    

class UpsertPortalConfigType(BaseModel):
    attributes: Optional[List[str]] = None
    r"""Attributes used to identify an entity"""
    is_enabled: Annotated[Optional[bool], pydantic.Field(alias="isEnabled")] = None
    r"""Enable/Disable the entity identifier"""
    

class UpsertPortalConfigEntityIdentifiersTypedDict(TypedDict):
    r"""Identifiers used to identify an entity by a portal user"""
    
    type: NotRequired[UpsertPortalConfigTypeTypedDict]
    

class UpsertPortalConfigEntityIdentifiers(BaseModel):
    r"""Identifiers used to identify an entity by a portal user"""
    
    type: Optional[UpsertPortalConfigType] = None
    

class UpsertPortalConfigFeatureSettingsTypedDict(TypedDict):
    r"""Feature settings for the portal"""
    
    billing: NotRequired[bool]
    r"""Billing feature flag"""
    change_due_date: NotRequired[bool]
    r"""Change due date feature flag"""
    start_page: NotRequired[bool]
    r"""Start page feature flag"""
    

class UpsertPortalConfigFeatureSettings(BaseModel):
    r"""Feature settings for the portal"""
    
    billing: Optional[bool] = None
    r"""Billing feature flag"""
    change_due_date: Optional[bool] = None
    r"""Change due date feature flag"""
    start_page: Optional[bool] = None
    r"""Start page feature flag"""
    

class UpsertPortalConfigImagesTypedDict(TypedDict):
    r"""Teaser & Banner Image web links"""
    
    order_left_teaser: NotRequired[Nullable[str]]
    r"""URL of the order left teaser image"""
    order_right_teaser: NotRequired[Nullable[str]]
    r"""URL of the order right teaser image"""
    welcome_banner: NotRequired[Nullable[str]]
    r"""URL of the welcome banner image"""
    

class UpsertPortalConfigImages(BaseModel):
    r"""Teaser & Banner Image web links"""
    
    order_left_teaser: Annotated[OptionalNullable[str], pydantic.Field(alias="orderLeftTeaser")] = UNSET
    r"""URL of the order left teaser image"""
    order_right_teaser: Annotated[OptionalNullable[str], pydantic.Field(alias="orderRightTeaser")] = UNSET
    r"""URL of the order right teaser image"""
    welcome_banner: Annotated[OptionalNullable[str], pydantic.Field(alias="welcomeBanner")] = UNSET
    r"""URL of the welcome banner image"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["orderLeftTeaser", "orderRightTeaser", "welcomeBanner"]
        nullable_fields = ["orderLeftTeaser", "orderRightTeaser", "welcomeBanner"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class UpsertPortalConfigSelfRegistrationSetting(str, Enum):
    ALLOW_WITH_CONTACT_CREATION = "ALLOW_WITH_CONTACT_CREATION"
    ALLOW_WITHOUT_CONTACT_CREATION = "ALLOW_WITHOUT_CONTACT_CREATION"
    DENY = "DENY"

class UpsertPortalConfigTypedDict(TypedDict):
    config: str
    r"""Stringified object with configuration details"""
    design_id: str
    r"""Entity ID"""
    feature_settings: UpsertPortalConfigFeatureSettingsTypedDict
    r"""Feature settings for the portal"""
    advanced_mfa: NotRequired[UpsertPortalConfigAdvancedMfaTypedDict]
    allowed_file_extensions: NotRequired[AllowedFileExtensionsTypedDict]
    r"""Allowed file extensions for upload"""
    approval_state_attributes: NotRequired[Dict[str, List[str]]]
    cognito_details: NotRequired[UpsertPortalConfigCognitoDetailsTypedDict]
    r"""AWS Cognito Pool details for the portal"""
    contact_identifiers: NotRequired[List[str]]
    r"""Deprecated. Use registration_identifiers instead."""
    default_user_to_notify: NotRequired[DefaultUserToNotifyTypedDict]
    r"""Default 360 user to notify upon an internal notification"""
    domain: NotRequired[str]
    r"""The URL on which the portal is accessible"""
    email_templates: NotRequired[EmailTemplatesTypedDict]
    r"""Email templates used for authentication and internal processes"""
    enabled: NotRequired[bool]
    r"""Enable/Disable the portal access"""
    entity_actions: NotRequired[List[EntityActionsTypedDict]]
    r"""Journey actions allowed on an entity by a portal user"""
    entity_edit_rules: NotRequired[List[UpsertPortalConfigEntityEditRulesTypedDict]]
    r"""Rules for editing an entity by a portal user"""
    entity_identifiers: NotRequired[UpsertPortalConfigEntityIdentifiersTypedDict]
    r"""Identifiers used to identify an entity by a portal user"""
    grants: NotRequired[List[GrantTypedDict]]
    r"""Permissions granted to a portal user while accessing entities"""
    images: NotRequired[UpsertPortalConfigImagesTypedDict]
    r"""Teaser & Banner Image web links"""
    is_epilot_domain: NotRequired[bool]
    r"""Mark true if the domain is an Epilot domain"""
    name: NotRequired[str]
    r"""A short name to identify your portal"""
    registration_identifiers: NotRequired[List[RegistrationIdentifierTypedDict]]
    r"""Identifiers to identify a contact of a portal user during the registration."""
    self_registration_setting: NotRequired[UpsertPortalConfigSelfRegistrationSetting]
    

class UpsertPortalConfig(BaseModel):
    config: str
    r"""Stringified object with configuration details"""
    design_id: str
    r"""Entity ID"""
    feature_settings: UpsertPortalConfigFeatureSettings
    r"""Feature settings for the portal"""
    advanced_mfa: Optional[UpsertPortalConfigAdvancedMfa] = None
    allowed_file_extensions: Optional[AllowedFileExtensions] = None
    r"""Allowed file extensions for upload"""
    approval_state_attributes: Optional[Dict[str, List[str]]] = None
    cognito_details: Optional[UpsertPortalConfigCognitoDetails] = None
    r"""AWS Cognito Pool details for the portal"""
    contact_identifiers: Annotated[Optional[List[str]], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")] = None
    r"""Deprecated. Use registration_identifiers instead."""
    default_user_to_notify: Optional[DefaultUserToNotify] = None
    r"""Default 360 user to notify upon an internal notification"""
    domain: Optional[str] = None
    r"""The URL on which the portal is accessible"""
    email_templates: Optional[EmailTemplates] = None
    r"""Email templates used for authentication and internal processes"""
    enabled: Optional[bool] = None
    r"""Enable/Disable the portal access"""
    entity_actions: Optional[List[EntityActions]] = None
    r"""Journey actions allowed on an entity by a portal user"""
    entity_edit_rules: Optional[List[UpsertPortalConfigEntityEditRules]] = None
    r"""Rules for editing an entity by a portal user"""
    entity_identifiers: Optional[UpsertPortalConfigEntityIdentifiers] = None
    r"""Identifiers used to identify an entity by a portal user"""
    grants: Optional[List[Grant]] = None
    r"""Permissions granted to a portal user while accessing entities"""
    images: Optional[UpsertPortalConfigImages] = None
    r"""Teaser & Banner Image web links"""
    is_epilot_domain: Optional[bool] = None
    r"""Mark true if the domain is an Epilot domain"""
    name: Optional[str] = None
    r"""A short name to identify your portal"""
    registration_identifiers: Optional[List[RegistrationIdentifier]] = None
    r"""Identifiers to identify a contact of a portal user during the registration."""
    self_registration_setting: Optional[UpsertPortalConfigSelfRegistrationSetting] = None
    
