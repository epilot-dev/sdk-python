"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .allowedfileextensions import AllowedFileExtensions, AllowedFileExtensionsTypedDict
from .emailtemplates import EmailTemplates, EmailTemplatesTypedDict
from .entityslug import EntitySlug
from .grant import Grant, GrantTypedDict
from .origin import Origin
from .registrationidentifier import RegistrationIdentifier, RegistrationIdentifierTypedDict
from enum import Enum
from epilot_customer_portal.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class AdvancedMfaTypedDict(TypedDict):
    enabled: NotRequired[bool]
    r"""Advanced MFA feature flag"""
    

class AdvancedMfa(BaseModel):
    enabled: Optional[bool] = None
    r"""Advanced MFA feature flag"""
    

class PasswordPolicyTypedDict(TypedDict):
    r"""Password policy for the portal"""
    
    minimum_length: NotRequired[int]
    r"""Minimum password length"""
    require_lowercase: NotRequired[bool]
    r"""Require lowercase characters"""
    require_numbers: NotRequired[bool]
    r"""Require numbers"""
    require_symbols: NotRequired[bool]
    r"""Require symbols"""
    require_uppercase: NotRequired[bool]
    r"""Require uppercase characters"""
    

class PasswordPolicy(BaseModel):
    r"""Password policy for the portal"""
    
    minimum_length: Optional[int] = None
    r"""Minimum password length"""
    require_lowercase: Optional[bool] = None
    r"""Require lowercase characters"""
    require_numbers: Optional[bool] = None
    r"""Require numbers"""
    require_symbols: Optional[bool] = None
    r"""Require symbols"""
    require_uppercase: Optional[bool] = None
    r"""Require uppercase characters"""
    

class CognitoDetailsTypedDict(TypedDict):
    r"""AWS Cognito Pool details for the portal"""
    
    cognito_user_pool_arn: NotRequired[str]
    r"""Cognito user pool ARN"""
    cognito_user_pool_client_id: NotRequired[str]
    r"""Cognito user pool client ID"""
    cognito_user_pool_id: NotRequired[str]
    r"""Cognito user pool ID"""
    password_policy: NotRequired[PasswordPolicyTypedDict]
    r"""Password policy for the portal"""
    

class CognitoDetails(BaseModel):
    r"""AWS Cognito Pool details for the portal"""
    
    cognito_user_pool_arn: Optional[str] = None
    r"""Cognito user pool ARN"""
    cognito_user_pool_client_id: Optional[str] = None
    r"""Cognito user pool client ID"""
    cognito_user_pool_id: Optional[str] = None
    r"""Cognito user pool ID"""
    password_policy: Optional[PasswordPolicy] = None
    r"""Password policy for the portal"""
    

class CadencePeriodType(str, Enum):
    DAYS = "days"
    WEEKS = "weeks"
    MONTHS = "months"

class RuleType(str, Enum):
    CADENCE = "cadence"
    RELATIVE_TO_CURRENT_VALUE = "relative_to_current_value"
    DAYS_BEFORE_DATE = "days_before_date"
    OVERDUE_PAYMENTS = "overdue_payments"

class EntityEditRulesTypedDict(TypedDict):
    allowed_decrement: NotRequired[str]
    allowed_increment: NotRequired[str]
    attribute: NotRequired[str]
    cadence_period: NotRequired[float]
    cadence_period_type: NotRequired[CadencePeriodType]
    changes_allowed: NotRequired[int]
    grace_period: NotRequired[int]
    number_of_days_before_restriction: NotRequired[int]
    rule_type: NotRequired[RuleType]
    slug: NotRequired[EntitySlug]
    r"""URL-friendly identifier for the entity schema"""
    

class EntityEditRules(BaseModel):
    allowed_decrement: Optional[str] = None
    allowed_increment: Optional[str] = None
    attribute: Optional[str] = None
    cadence_period: Optional[float] = None
    cadence_period_type: Optional[CadencePeriodType] = None
    changes_allowed: Optional[int] = None
    grace_period: Optional[int] = None
    number_of_days_before_restriction: Optional[int] = None
    rule_type: Optional[RuleType] = None
    slug: Optional[EntitySlug] = None
    r"""URL-friendly identifier for the entity schema"""
    

class PortalConfigTypeTypedDict(TypedDict):
    attributes: NotRequired[List[str]]
    r"""Attributes used to identify an entity"""
    is_enabled: NotRequired[bool]
    r"""Enable/Disable the entity identifier"""
    

class PortalConfigType(BaseModel):
    attributes: Optional[List[str]] = None
    r"""Attributes used to identify an entity"""
    is_enabled: Annotated[Optional[bool], pydantic.Field(alias="isEnabled")] = None
    r"""Enable/Disable the entity identifier"""
    

class EntityIdentifiersTypedDict(TypedDict):
    r"""Identifiers used to identify an entity by a portal user"""
    
    type: NotRequired[PortalConfigTypeTypedDict]
    

class EntityIdentifiers(BaseModel):
    r"""Identifiers used to identify an entity by a portal user"""
    
    type: Optional[PortalConfigType] = None
    

class FeatureSettingsTypedDict(TypedDict):
    r"""Feature settings for the portal"""
    
    billing: NotRequired[bool]
    r"""Billing feature flag"""
    change_due_date: NotRequired[bool]
    r"""Change due date feature flag"""
    start_page: NotRequired[bool]
    r"""Start page feature flag"""
    

class FeatureSettings(BaseModel):
    r"""Feature settings for the portal"""
    
    billing: Optional[bool] = None
    r"""Billing feature flag"""
    change_due_date: Optional[bool] = None
    r"""Change due date feature flag"""
    start_page: Optional[bool] = None
    r"""Start page feature flag"""
    

class ImagesTypedDict(TypedDict):
    r"""Teaser & Banner Image web links"""
    
    order_left_teaser: NotRequired[Nullable[str]]
    r"""URL of the order left teaser image"""
    order_right_teaser: NotRequired[Nullable[str]]
    r"""URL of the order right teaser image"""
    welcome_banner: NotRequired[Nullable[str]]
    r"""URL of the welcome banner image"""
    

class Images(BaseModel):
    r"""Teaser & Banner Image web links"""
    
    order_left_teaser: Annotated[OptionalNullable[str], pydantic.Field(alias="orderLeftTeaser")] = UNSET
    r"""URL of the order left teaser image"""
    order_right_teaser: Annotated[OptionalNullable[str], pydantic.Field(alias="orderRightTeaser")] = UNSET
    r"""URL of the order right teaser image"""
    welcome_banner: Annotated[OptionalNullable[str], pydantic.Field(alias="welcomeBanner")] = UNSET
    r"""URL of the welcome banner image"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["orderLeftTeaser", "orderRightTeaser", "welcomeBanner"]
        nullable_fields = ["orderLeftTeaser", "orderRightTeaser", "welcomeBanner"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class CanaryTypedDict(TypedDict):
    r"""Canary feature flag"""
    
    enabled: NotRequired[bool]
    r"""Enable/Disable the canary feature"""
    

class Canary(BaseModel):
    r"""Canary feature flag"""
    
    enabled: Optional[bool] = None
    r"""Enable/Disable the canary feature"""
    

class NotrackingTypedDict(TypedDict):
    r"""Disable Advanced Usage Metrics"""
    
    enabled: NotRequired[bool]
    r"""Disable browser-side scripts that track advanced usage metrics"""
    

class Notracking(BaseModel):
    r"""Disable Advanced Usage Metrics"""
    
    enabled: Optional[bool] = None
    r"""Disable browser-side scripts that track advanced usage metrics"""
    

class OrgSettingsTypedDict(TypedDict):
    r"""Organization settings"""
    
    canary: NotRequired[CanaryTypedDict]
    r"""Canary feature flag"""
    notracking: NotRequired[NotrackingTypedDict]
    r"""Disable Advanced Usage Metrics"""
    

class OrgSettings(BaseModel):
    r"""Organization settings"""
    
    canary: Optional[Canary] = None
    r"""Canary feature flag"""
    notracking: Optional[Notracking] = None
    r"""Disable Advanced Usage Metrics"""
    

class SelfRegistrationSetting(str, Enum):
    ALLOW_WITH_CONTACT_CREATION = "ALLOW_WITH_CONTACT_CREATION"
    ALLOW_WITHOUT_CONTACT_CREATION = "ALLOW_WITHOUT_CONTACT_CREATION"
    DENY = "DENY"

class PortalConfigTypedDict(TypedDict):
    design_id: str
    r"""Entity ID"""
    advanced_mfa: NotRequired[AdvancedMfaTypedDict]
    allowed_file_extensions: NotRequired[AllowedFileExtensionsTypedDict]
    r"""Allowed file extensions for upload"""
    approval_state_attributes: NotRequired[Dict[str, List[str]]]
    cognito_details: NotRequired[CognitoDetailsTypedDict]
    r"""AWS Cognito Pool details for the portal"""
    config: NotRequired[str]
    r"""Stringified object with configuration details"""
    contact_identifiers: NotRequired[List[str]]
    r"""Deprecated. Use registration_identifiers instead."""
    domain: NotRequired[str]
    r"""The URL on which the portal is accessible"""
    email_templates: NotRequired[EmailTemplatesTypedDict]
    r"""Email templates used for authentication and internal processes"""
    enabled: NotRequired[bool]
    r"""Enable/Disable the portal access"""
    entity_edit_rules: NotRequired[List[EntityEditRulesTypedDict]]
    r"""Rules for editing an entity by a portal user"""
    entity_identifiers: NotRequired[EntityIdentifiersTypedDict]
    r"""Identifiers used to identify an entity by a portal user"""
    feature_flags: NotRequired[Dict[str, bool]]
    r"""Feature flags for the portal"""
    feature_settings: NotRequired[FeatureSettingsTypedDict]
    r"""Feature settings for the portal"""
    grants: NotRequired[List[GrantTypedDict]]
    r"""Permissions granted to a portal user while accessing entities"""
    id: NotRequired[str]
    r"""ID of the organization"""
    images: NotRequired[ImagesTypedDict]
    r"""Teaser & Banner Image web links"""
    is_epilot_domain: NotRequired[bool]
    r"""Mark true if the domain is an Epilot domain"""
    name: NotRequired[str]
    r"""A short name to identify your portal"""
    org_name: NotRequired[str]
    r"""Name of the organization"""
    org_settings: NotRequired[OrgSettingsTypedDict]
    r"""Organization settings"""
    organization_id: NotRequired[str]
    r"""ID of the organization"""
    origin: NotRequired[Origin]
    r"""Origin of the portal"""
    registration_identifiers: NotRequired[List[RegistrationIdentifierTypedDict]]
    r"""Identifiers to identify a contact of a portal user during the registration."""
    self_registration_setting: NotRequired[SelfRegistrationSetting]
    

class PortalConfig(BaseModel):
    design_id: str
    r"""Entity ID"""
    advanced_mfa: Optional[AdvancedMfa] = None
    allowed_file_extensions: Optional[AllowedFileExtensions] = None
    r"""Allowed file extensions for upload"""
    approval_state_attributes: Optional[Dict[str, List[str]]] = None
    cognito_details: Optional[CognitoDetails] = None
    r"""AWS Cognito Pool details for the portal"""
    config: Optional[str] = None
    r"""Stringified object with configuration details"""
    contact_identifiers: Annotated[Optional[List[str]], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")] = None
    r"""Deprecated. Use registration_identifiers instead."""
    domain: Optional[str] = None
    r"""The URL on which the portal is accessible"""
    email_templates: Optional[EmailTemplates] = None
    r"""Email templates used for authentication and internal processes"""
    enabled: Optional[bool] = None
    r"""Enable/Disable the portal access"""
    entity_edit_rules: Optional[List[EntityEditRules]] = None
    r"""Rules for editing an entity by a portal user"""
    entity_identifiers: Optional[EntityIdentifiers] = None
    r"""Identifiers used to identify an entity by a portal user"""
    feature_flags: Optional[Dict[str, bool]] = None
    r"""Feature flags for the portal"""
    feature_settings: Optional[FeatureSettings] = None
    r"""Feature settings for the portal"""
    grants: Optional[List[Grant]] = None
    r"""Permissions granted to a portal user while accessing entities"""
    id: Annotated[Optional[str], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")] = None
    r"""ID of the organization"""
    images: Optional[Images] = None
    r"""Teaser & Banner Image web links"""
    is_epilot_domain: Optional[bool] = None
    r"""Mark true if the domain is an Epilot domain"""
    name: Optional[str] = None
    r"""A short name to identify your portal"""
    org_name: Optional[str] = None
    r"""Name of the organization"""
    org_settings: Optional[OrgSettings] = None
    r"""Organization settings"""
    organization_id: Optional[str] = None
    r"""ID of the organization"""
    origin: Optional[Origin] = None
    r"""Origin of the portal"""
    registration_identifiers: Optional[List[RegistrationIdentifier]] = None
    r"""Identifiers to identify a contact of a portal user during the registration."""
    self_registration_setting: Optional[SelfRegistrationSetting] = None
    
