"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, NoOpLogger
from .utils.retries import RetryConfig
from epilot_customer_portal import models, utils
from epilot_customer_portal._hooks import SDKHooks
from epilot_customer_portal.activity import Activity
from epilot_customer_portal.balance_sdk import BalanceSDK
from epilot_customer_portal.ecp import Ecp
from epilot_customer_portal.ecp_admin import ECPAdmin
from epilot_customer_portal.public import Public
from epilot_customer_portal.types import OptionalNullable, UNSET
import httpx
from typing import Callable, Dict, Optional, Union

class Epilot(BaseSDK):
    r"""Portal API: Backend for epilot portals - End Customer Portal & Installer Portal"""
    ecp_admin: ECPAdmin
    r"""APIs defined for a ECP Admin"""
    balance: BalanceSDK
    ecp: Ecp
    r"""APIs defined for a portal user"""
    activity: Activity
    public: Public
    r"""Public APIs"""
    def __init__(
        self,
        security: Optional[Union[models.Security, Callable[[], models.Security]]] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = NoOpLogger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
    

        BaseSDK.__init__(self, SDKConfiguration(
            client=client,
            async_client=async_client,
            security=security,
            server_url=server_url,
            server_idx=server_idx,
            retry_config=retry_config,
            timeout_ms=timeout_ms,
            debug_logger=debug_logger
        ))

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.ecp_admin = ECPAdmin(self.sdk_configuration)
        self.balance = BalanceSDK(self.sdk_configuration)
        self.ecp = Ecp(self.sdk_configuration)
        self.activity = Activity(self.sdk_configuration)
        self.public = Public(self.sdk_configuration)
    
