"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from epilot_document.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import NotRequired


class InvalidVariablesTypedDict(TypedDict):
    r"""Invalid variable"""
    
    error: NotRequired[str]
    r"""Explanation for the error"""
    variable: NotRequired[str]
    r"""Variable name"""
    

class InvalidVariables(BaseModel):
    r"""Invalid variable"""
    
    error: Optional[str] = None
    r"""Explanation for the error"""
    variable: Optional[str] = None
    r"""Variable name"""
    

class ContextTypedDict(TypedDict):
    r"""Context for the error"""
    
    invalid_variables: NotRequired[List[InvalidVariablesTypedDict]]
    r"""List of invalid variables"""
    

class Context(BaseModel):
    r"""Context for the error"""
    
    invalid_variables: Optional[List[InvalidVariables]] = None
    r"""List of invalid variables"""
    

class InvalidCustomVariableErrorDetailTypedDict(TypedDict):
    context: NotRequired[ContextTypedDict]
    r"""Context for the error"""
    explanation: NotRequired[str]
    r"""Explanation for the error"""
    

class InvalidCustomVariableErrorDetail(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    context: Optional[Context] = None
    r"""Context for the error"""
    explanation: Optional[str] = None
    r"""Explanation for the error"""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
