"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from epilot import utils
from typing import Any, Dict, List, Optional

class ErrorCode(str, Enum):
    r"""Error code"""
    PARSE_ERROR = 'PARSE_ERROR'
    DOC_TO_PDF_CONVERT_ERROR = 'DOC_TO_PDF_CONVERT_ERROR'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorOutput:
    error_code: Optional[ErrorCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Error code"""
    error_details: Optional[List[Dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_details'), 'exclude': lambda f: f is None }})
    r"""Error details"""
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_message'), 'exclude': lambda f: f is None }})
    r"""Error message"""
    

