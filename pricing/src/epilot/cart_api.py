"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .sdkconfiguration import SDKConfiguration
from epilot import utils
from epilot._hooks import AfterErrorContext, AfterSuccessContext, BeforeRequestContext, HookContext
from epilot.models import components, errors, operations
from typing import Optional

class CartAPI:
    r"""Used to interact with a cart during a customer's checkout session, providing:
     - An unified data model to model a Shopping Cart
     - Product and pricing data validation
     - Checkout a cart into an order or quote
    """
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def dollar_checkout_cart(self, checkout_cart: components.CheckoutCart, x_ivy_org_id: str) -> operations.DollarCheckoutCartResponse:
        r"""checkoutCart
        Checkouts a cart and executes the specified checkout `mode` process.

        A Checkout implicitly finalizes the provided cart (if not transient from a fast-checkout) and behaves in one of the following modes:
        - `create_order` (**default**): the payment happens at a later date or managed by 3rd-party CRM (SAP)
        - `create_invoice`: the payment happens on the online checkout (paypal, stripe, adyen)
        - `create_quote`: the checkout represents a price quote request

        Fast checkout is also supported, by passing the Cart contents directly.
        When a fast checkout is performed the cart is considered transient and there is no cart persistance.

        If the checkout `mode` is omitted, the `mode` will default to `create_order`.
        """
        hook_ctx = HookContext(operation_id='$checkoutCart', oauth2_scopes=[], security_source=None)
        request = operations.DollarCheckoutCartRequest(
            checkout_cart=checkout_cart,
            x_ivy_org_id=x_ivy_org_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/v1/public/cart:checkout'
        
        headers = {}
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.DollarCheckoutCartRequest, "checkout_cart", False, False, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = client.prepare_request(requests_http.Request('POST', url, data=data, files=form, headers=headers))
            req = self.sdk_configuration.get_hooks().before_request(BeforeRequestContext(hook_ctx), req)
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), None, e)
            if e is not None:
                raise e

        if utils.match_status_codes(['400','4XX','5XX'], http_res.status_code):
            result, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), http_res, None)
            if e is not None:
                raise e
            if result is not None:
                http_res = result
        else:
            http_res = self.sdk_configuration.get_hooks().after_success(AfterSuccessContext(hook_ctx), http_res)
            
        
        
        res = operations.DollarCheckoutCartResponse(http_meta=components.HTTPMetadata(request=req, response=http_res))
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get('Content-Type') or '', 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CheckoutCartResult])
                res.checkout_cart_result = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get('Content-Type') or '', 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.Error, infer_missing=True)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    

