"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .billingperiod import BillingPeriod
from .entityrelation import EntityRelation
from .salestax import SalesTax
from .tax import Tax
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from epilot import utils
from typing import Any, Dict, List, Optional, Union


class BillingDurationUnit(str, Enum):
    r"""The billing period duration unit"""
    WEEKS = 'weeks'
    MONTHS = 'months'
    YEARS = 'years'


class BillingScheme(str, Enum):
    r"""Describes how to compute the price per period. Either `per_unit` or `tiered`.
    - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
    - `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.

    ⚠️ Tiered pricing is **not supported** yet.
    """
    PER_UNIT = 'per_unit'


class NoticeTimeUnit(str, Enum):
    r"""The notice period duration unit"""
    WEEKS = 'weeks'
    MONTHS = 'months'
    YEARS = 'years'


class PriceDisplayInJourneys(str, Enum):
    r"""Defines the way the price amount is display in epilot journeys."""
    SHOW_PRICE = 'show_price'
    SHOW_AS_STARTING_PRICE = 'show_as_starting_price'
    SHOW_AS_ON_REQUEST = 'show_as_on_request'


class RenewalDurationUnit(str, Enum):
    r"""The renewal period duration unit"""
    WEEKS = 'weeks'
    MONTHS = 'months'
    YEARS = 'years'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Price1:
    dollar_relation: Optional[List[EntityRelation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('$relation'), 'exclude': lambda f: f is None }})
    



class TaxBehavior(str, Enum):
    r"""Specifies whether the price is considered `inclusive` of taxes or `exclusive` of taxes.
    One of `inclusive`, `exclusive`, or `unspecified`.
    """
    INCLUSIVE = 'inclusive'
    EXCLUSIVE = 'exclusive'


class TerminationTimeUnit(str, Enum):
    r"""The termination period duration unit"""
    WEEKS = 'weeks'
    MONTHS = 'months'
    YEARS = 'years'


class TiersMode(str, Enum):
    r"""Defines the tiered pricing type of the price."""
    STANDARD = 'standard'


class Type(str, Enum):
    r"""One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
    ONE_TIME = 'one_time'
    RECURRING = 'recurring'


class PriceSchemas1(str, Enum):
    r"""built-in units"""
    KW = 'kw'
    KWH = 'kwh'
    M = 'm'
    M2 = 'm2'
    L = 'l'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Price:
    r"""The price entity schema for simple pricing"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_created_at'), 'exclude': lambda f: f is None }})
    r"""The price creation date"""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_id'), 'exclude': lambda f: f is None }})
    r"""The price id"""
    org_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_org_id'), 'exclude': lambda f: f is None }})
    r"""The organization id the price belongs to"""
    tags: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_tags'), 'exclude': lambda f: f is None }})
    r"""An arbitrary set of tags attached to the price"""
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_title'), 'exclude': lambda f: f is None }})
    r"""The price autogenerated title"""
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_updated_at'), 'exclude': lambda f: f is None }})
    r"""The price last update date"""
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether the price can be used for new purchases."""
    billing_duration_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_duration_amount'), 'exclude': lambda f: f is None }})
    r"""The billing period duration"""
    billing_duration_unit: Optional[BillingDurationUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_duration_unit'), 'exclude': lambda f: f is None }})
    r"""The billing period duration unit"""
    billing_period: Optional[PriceBillingPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_period'), 'exclude': lambda f: f is None }})
    r"""For recurring prices `billing_period` defines the default extent of the recurrence."""
    billing_scheme: Optional[BillingScheme] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_scheme'), 'exclude': lambda f: f is None }})
    r"""Describes how to compute the price per period. Either `per_unit` or `tiered`.
    - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
    - `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.

    ⚠️ Tiered pricing is **not supported** yet.
    """
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A brief description of the price."""
    is_composite_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_composite_price'), 'exclude': lambda f: f is None }})
    r"""The flag for prices that contain price components."""
    notice_time_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notice_time_amount'), 'exclude': lambda f: f is None }})
    r"""The notice period duration"""
    notice_time_unit: Optional[NoticeTimeUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notice_time_unit'), 'exclude': lambda f: f is None }})
    r"""The notice period duration unit"""
    price_display_in_journeys: Optional[PriceDisplayInJourneys] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price_display_in_journeys'), 'exclude': lambda f: f is None }})
    r"""Defines the way the price amount is display in epilot journeys."""
    renewal_duration_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal_duration_amount'), 'exclude': lambda f: f is None }})
    r"""The renewal period duration"""
    renewal_duration_unit: Optional[RenewalDurationUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal_duration_unit'), 'exclude': lambda f: f is None }})
    r"""The renewal period duration unit"""
    sales_tax: Optional[PriceSalesTax] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sales_tax'), 'exclude': lambda f: f is None }})
    r"""The default tax rate applicable to the product.
    This field is deprecated, use the new `tax` attribute.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    tax: Optional[PriceTax] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""The default tax rate applied to the price"""
    tax_behavior: Optional[TaxBehavior] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_behavior'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the price is considered `inclusive` of taxes or `exclusive` of taxes.
    One of `inclusive`, `exclusive`, or `unspecified`.
    """
    termination_time_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_time_amount'), 'exclude': lambda f: f is None }})
    r"""The termination period duration"""
    termination_time_unit: Optional[TerminationTimeUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_time_unit'), 'exclude': lambda f: f is None }})
    r"""The termination period duration unit"""
    tiers_mode: Optional[TiersMode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tiers_mode'), 'exclude': lambda f: f is None }})
    r"""Defines the tiered pricing type of the price."""
    type: Optional[Type] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
    unit: Optional[Unit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""The unit of measurement used for display purposes and possibly for calculations when the price is variable."""
    unit_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit_amount'), 'exclude': lambda f: f is None }})
    r"""The unit amount in cents to be charged, represented as a whole integer if possible."""
    unit_amount_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit_amount_currency'), 'exclude': lambda f: f is None }})
    r"""Three-letter ISO currency code, in lowercase."""
    unit_amount_decimal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit_amount_decimal'), 'exclude': lambda f: f is None }})
    r"""The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places."""
    variable_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variable_price'), 'exclude': lambda f: f is None }})
    r"""The flag for prices that can be influenced by external variables such as user input."""
    


PriceBillingPeriod = Union[BillingPeriod]

PriceSalesTax = Union[SalesTax]

PriceTax = Union[Price1, List[Tax]]

Unit = Union[PriceSchemas1, str]
