"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecurrenceAmount:
    r"""An amount associated with a specific recurrence."""
    amount_subtotal: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_subtotal') }})
    r"""Total of all items, with same recurrence, before (discounts or) taxes are applied."""
    amount_total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_total') }})
    r"""Total of all items, with same recurrence, after (discounts and) taxes are applied."""
    amount_tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_tax'), 'exclude': lambda f: f is None }})
    r"""Total of all items taxes, with same recurrence."""
    billing_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_period'), 'exclude': lambda f: f is None }})
    r"""The price billing period."""
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The price type."""
    

