"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, NoOpLogger
from .utils.retries import RetryConfig
from epilot_pricing import models, utils
from epilot_pricing._hooks import SDKHooks
from epilot_pricing.availability_api import AvailabilityAPI
from epilot_pricing.cart_api import CartAPI
from epilot_pricing.catalog_api import CatalogAPI
from epilot_pricing.external_integrations_api import ExternalIntegrationsAPI
from epilot_pricing.order_api import OrderAPI
from epilot_pricing.types import OptionalNullable, UNSET
import httpx
from typing import Any, Callable, Dict, Optional, Union

class Epilot(BaseSDK):
    r"""Pricing API: The `pricing-api` hub sets the foundations for the following Pricing APIs:

    ### Order API
    This api enables the management of orders in epilot 360, providing features such as:
    - Automatic calculation of totals and price breakdowns for taxes on the Order entity
    - Product and pricing data validation

    ### Shopping Cart API
    Used to interact with a cart during a customer's checkout session, providing:
    - An unified data model to model a Shopping Cart
    - Product and pricing data validation
    - Checkout a cart into an order or quote

    ### Catalog API
    Provides a way to query the entire catalog of products and prices.

    ### Availability API
    Provides endpoints for querying products availability by a set of predefined dimensions.

    ### External Integrations API
    Provides endpoints for external integrations (e.g. Enet / GetAG).

    """
    catalog_api: CatalogAPI
    r"""Provides a way to query the entire catalog of products and prices.

    """
    external_integrations_api: ExternalIntegrationsAPI
    r"""Provides endpoints for external integrations (e.g. Enet / GetAG).

    """
    order_api: OrderAPI
    r"""This api enables the management of orders in epilot 360, providing features such as:
    - Automatic calculation of totals and price breakdowns for taxes on the Order entity
    - Product and pricing data validation

    """
    availability_api: AvailabilityAPI
    r"""Provides endpoints for querying products availability by a set of predefined dimensions.

    """
    cart_api: CartAPI
    r"""Used to interact with a cart during a customer's checkout session, providing:
    - An unified data model to model a Shopping Cart
    - Product and pricing data validation
    - Checkout a cart into an order or quote

    """
    def __init__(
        self,
        epilot_auth: Optional[Union[Optional[str], Callable[[], Optional[str]]]] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param epilot_auth: The epilot_auth required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = NoOpLogger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."
        
        security: Any = None
        if callable(epilot_auth):
            security = lambda: models.Security(epilot_auth = epilot_auth()) # pylint: disable=unnecessary-lambda-assignment
        else:
            security = models.Security(epilot_auth = epilot_auth)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
    

        BaseSDK.__init__(self, SDKConfiguration(
            client=client,
            async_client=async_client,
            security=security,
            server_url=server_url,
            server_idx=server_idx,
            retry_config=retry_config,
            timeout_ms=timeout_ms,
            debug_logger=debug_logger
        ))

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.catalog_api = CatalogAPI(self.sdk_configuration)
        self.external_integrations_api = ExternalIntegrationsAPI(self.sdk_configuration)
        self.order_api = OrderAPI(self.sdk_configuration)
        self.availability_api = AvailabilityAPI(self.sdk_configuration)
        self.cart_api = CartAPI(self.sdk_configuration)
    
