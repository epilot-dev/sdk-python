"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .billingperiod import BillingPeriod
from .entityrelation import EntityRelation, EntityRelationTypedDict
from .pricegetag import PriceGetAg, PriceGetAgTypedDict
from .pricetier import PriceTier, PriceTierTypedDict
from .salestax import SalesTax
from .tax import Tax, TaxTypedDict
from enum import Enum
from epilot_pricing.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired, deprecated


class BillingDurationUnit(str, Enum):
    r"""The billing period duration unit"""
    WEEKS = "weeks"
    MONTHS = "months"
    YEARS = "years"

PriceBillingPeriodTypedDict = BillingPeriod
r"""For recurring prices `billing_period` defines the default extent of the recurrence."""


PriceBillingPeriod = BillingPeriod
r"""For recurring prices `billing_period` defines the default extent of the recurrence."""


class NoticeTimeUnit(str, Enum):
    r"""The notice period duration unit"""
    WEEKS = "weeks"
    MONTHS = "months"
    YEARS = "years"

class PriceDisplayInJourneys(str, Enum):
    r"""Defines the way the price amount is display in epilot journeys."""
    SHOW_PRICE = "show_price"
    SHOW_AS_STARTING_PRICE = "show_as_starting_price"
    SHOW_AS_ON_REQUEST = "show_as_on_request"

class PricePricingModel(str, Enum):
    r"""Describes how to compute the price per period. Either `per_unit`, `tiered_graduated` or `tiered_volume`.
    - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
    - `tiered_graduated` indicates that the unit pricing will be computed using tiers attribute. The customer pays the price per unit in every range their purchase rises through.
    - `tiered_volume` indicates that the unit pricing will be computed using tiers attribute. The customer pays the same unit price for all purchased units.
    - `tiered_flatfee` While similar to tiered_volume, tiered flat fee charges for the same price (flat) for the entire range instead using the unit price to multiply the quantity.
    - `external_getag` indicates that the price is influenced by aquisition fees provided by GetAG.

    """
    PER_UNIT = "per_unit"
    TIERED_GRADUATED = "tiered_graduated"
    TIERED_VOLUME = "tiered_volume"
    TIERED_FLATFEE = "tiered_flatfee"
    EXTERNAL_GETAG = "external_getag"

class RenewalDurationUnit(str, Enum):
    r"""The renewal period duration unit"""
    WEEKS = "weeks"
    MONTHS = "months"
    YEARS = "years"

@deprecated("warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")
PriceSalesTaxTypedDict = SalesTax
r"""The default tax rate applicable to the product.
This field is deprecated, use the new `tax` attribute.

"""


@deprecated("warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")
PriceSalesTax = SalesTax
r"""The default tax rate applicable to the product.
This field is deprecated, use the new `tax` attribute.

"""


class Price1TypedDict(TypedDict):
    dollar_relation: NotRequired[List[EntityRelationTypedDict]]
    

class Price1(BaseModel):
    dollar_relation: Annotated[Optional[List[EntityRelation]], pydantic.Field(alias="$relation")] = None
    

PriceTaxTypedDict = Union[Price1TypedDict, List[TaxTypedDict]]
r"""The default tax rate applied to the price"""


PriceTax = Union[Price1, List[Tax]]
r"""The default tax rate applied to the price"""


class TerminationTimeUnit(str, Enum):
    r"""The termination period duration unit"""
    WEEKS = "weeks"
    MONTHS = "months"
    YEARS = "years"

class PriceType(str, Enum):
    r"""One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
    ONE_TIME = "one_time"
    RECURRING = "recurring"

class PriceSchemas1(str, Enum):
    r"""built-in units"""
    KW = "kw"
    KWH = "kwh"
    M = "m"
    M2 = "m2"
    L = "l"
    CUBIC_METER = "cubic-meter"
    CUBIC_METER_H = "cubic-meter-h"
    LS = "ls"
    A = "a"
    KVA = "kva"
    W = "w"
    WP = "wp"
    KWP = "kwp"

UnitTypedDict = Union[PriceSchemas1, str]
r"""The unit of measurement used for display purposes and possibly for calculations when the price is variable."""


Unit = Union[PriceSchemas1, str]
r"""The unit of measurement used for display purposes and possibly for calculations when the price is variable."""


class PriceTypedDict(TypedDict):
    r"""The price entity schema for simple pricing"""
    
    pricing_model: PricePricingModel
    r"""Describes how to compute the price per period. Either `per_unit`, `tiered_graduated` or `tiered_volume`.
    - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
    - `tiered_graduated` indicates that the unit pricing will be computed using tiers attribute. The customer pays the price per unit in every range their purchase rises through.
    - `tiered_volume` indicates that the unit pricing will be computed using tiers attribute. The customer pays the same unit price for all purchased units.
    - `tiered_flatfee` While similar to tiered_volume, tiered flat fee charges for the same price (flat) for the entire range instead using the unit price to multiply the quantity.
    - `external_getag` indicates that the price is influenced by aquisition fees provided by GetAG.

    """
    created_at: NotRequired[str]
    r"""The price creation date"""
    id: NotRequired[str]
    r"""The price id"""
    org_id: NotRequired[str]
    r"""The organization id the price belongs to"""
    tags: NotRequired[List[str]]
    r"""An arbitrary set of tags attached to the price"""
    title: NotRequired[str]
    r"""The price autogenerated title"""
    updated_at: NotRequired[str]
    r"""The price last update date"""
    active: NotRequired[bool]
    r"""Whether the price can be used for new purchases."""
    billing_duration_amount: NotRequired[float]
    r"""The billing period duration"""
    billing_duration_unit: NotRequired[BillingDurationUnit]
    r"""The billing period duration unit"""
    billing_period: NotRequired[PriceBillingPeriodTypedDict]
    r"""For recurring prices `billing_period` defines the default extent of the recurrence."""
    description: NotRequired[str]
    r"""A brief description of the price."""
    get_ag: NotRequired[PriceGetAgTypedDict]
    is_composite_price: NotRequired[bool]
    r"""The flag for prices that contain price components."""
    is_tax_inclusive: NotRequired[bool]
    r"""Specifies whether the price is considered `inclusive` of taxes or not."""
    long_description: NotRequired[str]
    r"""A detailed description of the price. This is shown on the order document and order table."""
    notice_time_amount: NotRequired[float]
    r"""The notice period duration"""
    notice_time_unit: NotRequired[NoticeTimeUnit]
    r"""The notice period duration unit"""
    price_display_in_journeys: NotRequired[PriceDisplayInJourneys]
    r"""Defines the way the price amount is display in epilot journeys."""
    renewal_duration_amount: NotRequired[float]
    r"""The renewal period duration"""
    renewal_duration_unit: NotRequired[RenewalDurationUnit]
    r"""The renewal period duration unit"""
    sales_tax: NotRequired[PriceSalesTaxTypedDict]
    r"""The default tax rate applicable to the product.
    This field is deprecated, use the new `tax` attribute.

    """
    tax: NotRequired[PriceTaxTypedDict]
    r"""The default tax rate applied to the price"""
    termination_time_amount: NotRequired[float]
    r"""The termination period duration"""
    termination_time_unit: NotRequired[TerminationTimeUnit]
    r"""The termination period duration unit"""
    tiers: NotRequired[List[PriceTierTypedDict]]
    r"""Defines an array of tiers. Each tier has an upper bound, an unit amount and a flat fee.

    """
    type: NotRequired[PriceType]
    r"""One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
    unit: NotRequired[UnitTypedDict]
    r"""The unit of measurement used for display purposes and possibly for calculations when the price is variable."""
    unit_amount: NotRequired[float]
    r"""The unit amount in cents to be charged, represented as a whole integer if possible."""
    unit_amount_currency: NotRequired[str]
    r"""Three-letter ISO currency code, in lowercase."""
    unit_amount_decimal: NotRequired[str]
    r"""The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places."""
    variable_price: NotRequired[bool]
    r"""The flag for prices that can be influenced by external variables such as user input."""
    

class Price(BaseModel):
    r"""The price entity schema for simple pricing"""
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    pricing_model: PricePricingModel
    r"""Describes how to compute the price per period. Either `per_unit`, `tiered_graduated` or `tiered_volume`.
    - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
    - `tiered_graduated` indicates that the unit pricing will be computed using tiers attribute. The customer pays the price per unit in every range their purchase rises through.
    - `tiered_volume` indicates that the unit pricing will be computed using tiers attribute. The customer pays the same unit price for all purchased units.
    - `tiered_flatfee` While similar to tiered_volume, tiered flat fee charges for the same price (flat) for the entire range instead using the unit price to multiply the quantity.
    - `external_getag` indicates that the price is influenced by aquisition fees provided by GetAG.

    """
    created_at: Annotated[Optional[str], pydantic.Field(alias="_created_at")] = None
    r"""The price creation date"""
    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None
    r"""The price id"""
    org_id: Annotated[Optional[str], pydantic.Field(alias="_org_id")] = None
    r"""The organization id the price belongs to"""
    tags: Annotated[Optional[List[str]], pydantic.Field(alias="_tags")] = None
    r"""An arbitrary set of tags attached to the price"""
    title: Annotated[Optional[str], pydantic.Field(alias="_title")] = None
    r"""The price autogenerated title"""
    updated_at: Annotated[Optional[str], pydantic.Field(alias="_updated_at")] = None
    r"""The price last update date"""
    active: Optional[bool] = None
    r"""Whether the price can be used for new purchases."""
    billing_duration_amount: Optional[float] = None
    r"""The billing period duration"""
    billing_duration_unit: Optional[BillingDurationUnit] = None
    r"""The billing period duration unit"""
    billing_period: Optional[PriceBillingPeriod] = None
    r"""For recurring prices `billing_period` defines the default extent of the recurrence."""
    description: Optional[str] = None
    r"""A brief description of the price."""
    get_ag: Optional[PriceGetAg] = None
    is_composite_price: Optional[bool] = None
    r"""The flag for prices that contain price components."""
    is_tax_inclusive: Optional[bool] = None
    r"""Specifies whether the price is considered `inclusive` of taxes or not."""
    long_description: Optional[str] = None
    r"""A detailed description of the price. This is shown on the order document and order table."""
    notice_time_amount: Optional[float] = None
    r"""The notice period duration"""
    notice_time_unit: Optional[NoticeTimeUnit] = None
    r"""The notice period duration unit"""
    price_display_in_journeys: Optional[PriceDisplayInJourneys] = None
    r"""Defines the way the price amount is display in epilot journeys."""
    renewal_duration_amount: Optional[float] = None
    r"""The renewal period duration"""
    renewal_duration_unit: Optional[RenewalDurationUnit] = None
    r"""The renewal period duration unit"""
    sales_tax: Annotated[Optional[PriceSalesTax], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")] = None
    r"""The default tax rate applicable to the product.
    This field is deprecated, use the new `tax` attribute.

    """
    tax: Optional[PriceTax] = None
    r"""The default tax rate applied to the price"""
    termination_time_amount: Optional[float] = None
    r"""The termination period duration"""
    termination_time_unit: Optional[TerminationTimeUnit] = None
    r"""The termination period duration unit"""
    tiers: Optional[List[PriceTier]] = None
    r"""Defines an array of tiers. Each tier has an upper bound, an unit amount and a flat fee.

    """
    type: Optional[PriceType] = None
    r"""One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
    unit: Optional[Unit] = None
    r"""The unit of measurement used for display purposes and possibly for calculations when the price is variable."""
    unit_amount: Optional[float] = None
    r"""The unit amount in cents to be charged, represented as a whole integer if possible."""
    unit_amount_currency: Optional[str] = None
    r"""Three-letter ISO currency code, in lowercase."""
    unit_amount_decimal: Optional[str] = None
    r"""The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places."""
    variable_price: Optional[bool] = None
    r"""The flag for prices that can be influenced by external variables such as user input."""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
