"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .compositeprice import CompositePrice, CompositePriceTypedDict
from .metadata import MetaData, MetaDataTypedDict
from .price import Price, PriceTypedDict
from .priceinputmapping import PriceInputMapping, PriceInputMappingTypedDict
from .priceitem import PriceItem, PriceItemTypedDict
from .product import Product, ProductTypedDict
from .recurrenceamount import RecurrenceAmount, RecurrenceAmountTypedDict
from .taxamount import TaxAmount, TaxAmountTypedDict
from .totaldetails import TotalDetails, TotalDetailsTypedDict
from epilot_pricing.types import BaseModel
import pydantic
from typing import List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


CompositePriceItemPriceTypedDict = Union[CompositePriceTypedDict, PriceTypedDict]
r"""The price snapshot data."""


CompositePriceItemPrice = Union[CompositePrice, Price]
r"""The price snapshot data."""


RecurrencesTypedDict = RecurrenceAmountTypedDict


Recurrences = RecurrenceAmount


TaxesTypedDict = TaxAmountTypedDict


Taxes = TaxAmount


class CompositePriceItemTypedDict(TypedDict):
    r"""Represents a composite price input to the pricing library."""
    
    id: NotRequired[str]
    r"""price item id"""
    price: NotRequired[CompositePriceItemPriceTypedDict]
    r"""The price snapshot data."""
    product: NotRequired[ProductTypedDict]
    r"""The product entity"""
    amount_subtotal: NotRequired[int]
    r"""Total of all items before (discounts or) taxes are applied."""
    amount_subtotal_decimal: NotRequired[str]
    r"""Total of all items before (discounts or) taxes are applied, as a string with all the decimal places."""
    amount_tax: NotRequired[int]
    r"""Total tax amount for this line item."""
    amount_total: NotRequired[int]
    r"""Total of all items after (discounts and) taxes are applied."""
    amount_total_decimal: NotRequired[str]
    r"""Total of all items after (discounts and) taxes are applied, as a string with all the decimal places."""
    currency: NotRequired[str]
    r"""Three-letter ISO currency code, in lowercase. Must be a supported currency.
    ISO 4217 CURRENCY CODES as specified in the documentation: https://www.iso.org/iso-4217-currency-codes.html

    """
    description: NotRequired[str]
    r"""An arbitrary string attached to the price item. Often useful for displaying to users. Defaults to product name."""
    is_composite_price: NotRequired[bool]
    r"""The flag for prices that contain price components."""
    is_tax_inclusive: NotRequired[bool]
    r"""Specifies whether the price is considered `inclusive` of taxes or not."""
    item_components: NotRequired[List[PriceItemTypedDict]]
    r"""Contains price item configurations, per price component, when the main price item is a [composite price](/api/pricing#tag/dynamic_price_schema)."""
    metadata: NotRequired[List[MetaDataTypedDict]]
    r"""A set of key-value pairs used to store meta data information about an entity."""
    on_request_approved: NotRequired[bool]
    r"""When set to true on a `_price` displayed as OnRequest (`show_as_on_request: 'on_request'`) this flag means the price has been approved and can now be displayed to the customer. This flag is only valid for prices shown as 'on_request'."""
    price_id: NotRequired[str]
    r"""The id of the price."""
    price_mappings: NotRequired[List[PriceInputMappingTypedDict]]
    product_id: NotRequired[str]
    r"""The id of the product."""
    quantity: NotRequired[int]
    r"""The quantity of products being purchased."""
    recurrences: NotRequired[List[RecurrencesTypedDict]]
    r"""The sum of amounts of the price items by recurrence."""
    taxes: NotRequired[List[TaxesTypedDict]]
    r"""The taxes applied to the price item."""
    total_details: NotRequired[TotalDetailsTypedDict]
    r"""The total details with tax (and discount) aggregated totals."""
    unit_amount: NotRequired[int]
    r"""The unit amount value"""
    unit_amount_decimal: NotRequired[str]
    r"""The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places."""
    unit_amount_gross: NotRequired[int]
    r"""The unit gross amount value."""
    unit_amount_gross_decimal: NotRequired[str]
    r"""The unit gross amount value."""
    unit_amount_net: NotRequired[int]
    r"""Net unit amount without taxes or discounts."""
    unit_amount_net_decimal: NotRequired[str]
    r"""Net unit amount without taxes or discounts."""
    

class CompositePriceItem(BaseModel):
    r"""Represents a composite price input to the pricing library."""
    
    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None
    r"""price item id"""
    price: Annotated[Optional[CompositePriceItemPrice], pydantic.Field(alias="_price")] = None
    r"""The price snapshot data."""
    product: Annotated[Optional[Product], pydantic.Field(alias="_product")] = None
    r"""The product entity"""
    amount_subtotal: Optional[int] = None
    r"""Total of all items before (discounts or) taxes are applied."""
    amount_subtotal_decimal: Optional[str] = None
    r"""Total of all items before (discounts or) taxes are applied, as a string with all the decimal places."""
    amount_tax: Optional[int] = None
    r"""Total tax amount for this line item."""
    amount_total: Optional[int] = None
    r"""Total of all items after (discounts and) taxes are applied."""
    amount_total_decimal: Optional[str] = None
    r"""Total of all items after (discounts and) taxes are applied, as a string with all the decimal places."""
    currency: Optional[str] = None
    r"""Three-letter ISO currency code, in lowercase. Must be a supported currency.
    ISO 4217 CURRENCY CODES as specified in the documentation: https://www.iso.org/iso-4217-currency-codes.html

    """
    description: Optional[str] = None
    r"""An arbitrary string attached to the price item. Often useful for displaying to users. Defaults to product name."""
    is_composite_price: Optional[bool] = None
    r"""The flag for prices that contain price components."""
    is_tax_inclusive: Optional[bool] = None
    r"""Specifies whether the price is considered `inclusive` of taxes or not."""
    item_components: Optional[List[PriceItem]] = None
    r"""Contains price item configurations, per price component, when the main price item is a [composite price](/api/pricing#tag/dynamic_price_schema)."""
    metadata: Optional[List[MetaData]] = None
    r"""A set of key-value pairs used to store meta data information about an entity."""
    on_request_approved: Optional[bool] = None
    r"""When set to true on a `_price` displayed as OnRequest (`show_as_on_request: 'on_request'`) this flag means the price has been approved and can now be displayed to the customer. This flag is only valid for prices shown as 'on_request'."""
    price_id: Optional[str] = None
    r"""The id of the price."""
    price_mappings: Optional[List[PriceInputMapping]] = None
    product_id: Optional[str] = None
    r"""The id of the product."""
    quantity: Optional[int] = None
    r"""The quantity of products being purchased."""
    recurrences: Optional[List[Recurrences]] = None
    r"""The sum of amounts of the price items by recurrence."""
    taxes: Optional[List[Taxes]] = None
    r"""The taxes applied to the price item."""
    total_details: Optional[TotalDetails] = None
    r"""The total details with tax (and discount) aggregated totals."""
    unit_amount: Optional[int] = None
    r"""The unit amount value"""
    unit_amount_decimal: Optional[str] = None
    r"""The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places."""
    unit_amount_gross: Optional[int] = None
    r"""The unit gross amount value."""
    unit_amount_gross_decimal: Optional[str] = None
    r"""The unit gross amount value."""
    unit_amount_net: Optional[int] = None
    r"""Net unit amount without taxes or discounts."""
    unit_amount_net_decimal: Optional[str] = None
    r"""Net unit amount without taxes or discounts."""
    
