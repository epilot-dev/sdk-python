"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .availabilityfilters import AvailabilityFilters, AvailabilityFiltersTypedDict
from epilot_pricing.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class CatalogSearchTypedDict(TypedDict):
    r"""A catalog search payload"""
    
    q: str
    r"""The query to perform using lucene query syntax."""
    availability: NotRequired[AvailabilityFiltersTypedDict]
    r"""Availability filters dimensions"""
    from_: NotRequired[float]
    r"""The index from which to query, used for pagination purposes. Defaults to 0"""
    hydrate: NotRequired[bool]
    r"""When true, enables entity hydration to resolve nested $relation references in-place."""
    size: NotRequired[float]
    r"""The max size of the response, defaults to 2000."""
    sort: NotRequired[str]
    r"""The sort expression to sort the results."""
    

class CatalogSearch(BaseModel):
    r"""A catalog search payload"""
    
    q: str
    r"""The query to perform using lucene query syntax."""
    availability: Optional[AvailabilityFilters] = None
    r"""Availability filters dimensions"""
    from_: Annotated[Optional[float], pydantic.Field(alias="from")] = None
    r"""The index from which to query, used for pagination purposes. Defaults to 0"""
    hydrate: Optional[bool] = False
    r"""When true, enables entity hydration to resolve nested $relation references in-place."""
    size: Optional[float] = None
    r"""The max size of the response, defaults to 2000."""
    sort: Optional[str] = None
    r"""The sort expression to sort the results."""
    
