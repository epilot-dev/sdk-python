"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from epilot_pricing.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import ConfigDict, model_serializer
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class AddressTypedDict(TypedDict):
    tags: NotRequired[List[str]]
    additional_info: NotRequired[Nullable[str]]
    r"""An additional description for the address"""
    city: NotRequired[Nullable[str]]
    r"""The name of the city, district, village, or town."""
    company_name: NotRequired[Nullable[str]]
    r"""the company name, usually used as extra delivery instructions"""
    country: NotRequired[Nullable[str]]
    r"""The two-letter code for the country of the address."""
    first_name: NotRequired[Nullable[str]]
    r"""the first name of the recipient, usually used as extra delivery instructions"""
    last_name: NotRequired[Nullable[str]]
    r"""the last name of the recipient, usually used as extra delivery instructions"""
    postal_code: NotRequired[Nullable[str]]
    r"""The postal code for the address."""
    salutation: NotRequired[Nullable[str]]
    r"""the salutation of the recipient, usually used as extra delivery instructions"""
    street: NotRequired[Nullable[str]]
    r"""The first line of the address. Typically the street address or PO Box number."""
    street_number: NotRequired[Nullable[str]]
    r"""The second line of the address. Typically the number of the apartment, suite, or unit."""
    title: NotRequired[Nullable[str]]
    r"""the title of the recipient, usually used as extra delivery instructions"""
    

class Address(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    tags: Annotated[Optional[List[str]], pydantic.Field(alias="_tags")] = None
    additional_info: OptionalNullable[str] = UNSET
    r"""An additional description for the address"""
    city: OptionalNullable[str] = UNSET
    r"""The name of the city, district, village, or town."""
    company_name: OptionalNullable[str] = UNSET
    r"""the company name, usually used as extra delivery instructions"""
    country: OptionalNullable[str] = UNSET
    r"""The two-letter code for the country of the address."""
    first_name: OptionalNullable[str] = UNSET
    r"""the first name of the recipient, usually used as extra delivery instructions"""
    last_name: OptionalNullable[str] = UNSET
    r"""the last name of the recipient, usually used as extra delivery instructions"""
    postal_code: OptionalNullable[str] = UNSET
    r"""The postal code for the address."""
    salutation: OptionalNullable[str] = UNSET
    r"""the salutation of the recipient, usually used as extra delivery instructions"""
    street: OptionalNullable[str] = UNSET
    r"""The first line of the address. Typically the street address or PO Box number."""
    street_number: OptionalNullable[str] = UNSET
    r"""The second line of the address. Typically the number of the apartment, suite, or unit."""
    title: OptionalNullable[str] = UNSET
    r"""the title of the recipient, usually used as extra delivery instructions"""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["_tags", "additional_info", "city", "company_name", "country", "first_name", "last_name", "postal_code", "salutation", "street", "street_number", "title"]
        nullable_fields = ["additional_info", "city", "company_name", "country", "first_name", "last_name", "postal_code", "salutation", "street", "street_number", "title"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
