"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .consumptiontypegetag import ConsumptionTypeGetAg
from .gasconcessiontype import GasConcessionType
from .markuppricingmodel import MarkupPricingModel
from .powermetertype import PowerMeterType
from .pricetier import PriceTier, PriceTierTypedDict
from .productcategory import ProductCategory
from .tarifftypegetag import TariffTypeGetAg
from .typegetag import TypeGetAg
from epilot_pricing.types import BaseModel
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


ConcessionTypeTypedDict = GasConcessionType


ConcessionType = GasConcessionType


MeterTypeTypedDict = PowerMeterType


MeterType = PowerMeterType


class PriceGetAgTypedDict(TypedDict):
    category: ProductCategory
    markup_amount: float
    markup_amount_decimal: str
    unit_amount_gross: float
    unit_amount_net: float
    concession_type: NotRequired[ConcessionTypeTypedDict]
    consumption_type: NotRequired[ConsumptionTypeGetAg]
    markup_amount_net: NotRequired[float]
    markup_amount_net_decimal: NotRequired[str]
    markup_pricing_model: NotRequired[MarkupPricingModel]
    r"""Describes how to compute the markup per period. Either `per_unit`, `tiered_volume` or `tiered_flatfee`.
    - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
    - `tiered_volume` indicates that the unit pricing will be computed using tiers attribute. The customer pays the same unitary price for all purchased units.
    - `tiered_flatfee` While similar to tiered_volume, tiered flat fee charges for the same price (flat) for the entire range instead using the unit price to multiply the quantity.

    """
    markup_tiers: NotRequired[List[PriceTierTypedDict]]
    r"""Defines an array of tiers. Each tier has an upper bound, an unit amount and a flat fee.

    """
    meter_type: NotRequired[MeterTypeTypedDict]
    tariff_type: NotRequired[TariffTypeGetAg]
    type: NotRequired[TypeGetAg]
    unit_amount_gross_decimal: NotRequired[str]
    unit_amount_net_decimal: NotRequired[str]
    

class PriceGetAg(BaseModel):
    category: ProductCategory
    markup_amount: float
    markup_amount_decimal: str
    unit_amount_gross: float
    unit_amount_net: float
    concession_type: Optional[ConcessionType] = None
    consumption_type: Optional[ConsumptionTypeGetAg] = None
    markup_amount_net: Optional[float] = None
    markup_amount_net_decimal: Optional[str] = None
    markup_pricing_model: Optional[MarkupPricingModel] = None
    r"""Describes how to compute the markup per period. Either `per_unit`, `tiered_volume` or `tiered_flatfee`.
    - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
    - `tiered_volume` indicates that the unit pricing will be computed using tiers attribute. The customer pays the same unitary price for all purchased units.
    - `tiered_flatfee` While similar to tiered_volume, tiered flat fee charges for the same price (flat) for the entire range instead using the unit price to multiply the quantity.

    """
    markup_tiers: Optional[List[PriceTier]] = None
    r"""Defines an array of tiers. Each tier has an upper bound, an unit amount and a flat fee.

    """
    meter_type: Optional[MeterType] = None
    tariff_type: Optional[TariffTypeGetAg] = None
    type: Optional[TypeGetAg] = None
    unit_amount_gross_decimal: Optional[str] = None
    unit_amount_net_decimal: Optional[str] = None
    
