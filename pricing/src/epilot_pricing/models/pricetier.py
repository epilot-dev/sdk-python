"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .pricetierdisplaymode import PriceTierDisplayMode
from epilot_pricing.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class PriceTierTypedDict(TypedDict):
    display_mode: NotRequired[PriceTierDisplayMode]
    flat_fee_amount: NotRequired[float]
    flat_fee_amount_decimal: NotRequired[str]
    unit_amount: NotRequired[float]
    unit_amount_decimal: NotRequired[str]
    up_to: NotRequired[Nullable[float]]
    

class PriceTier(BaseModel):
    display_mode: Optional[PriceTierDisplayMode] = None
    flat_fee_amount: Optional[float] = None
    flat_fee_amount_decimal: Optional[str] = None
    unit_amount: Optional[float] = None
    unit_amount_decimal: Optional[str] = None
    up_to: OptionalNullable[float] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["display_mode", "flat_fee_amount", "flat_fee_amount_decimal", "unit_amount", "unit_amount_decimal", "up_to"]
        nullable_fields = ["up_to"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
