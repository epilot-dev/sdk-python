"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .price import Price, PriceTypedDict
from .pricecomponentrelation import PriceComponentRelation, PriceComponentRelationTypedDict
from epilot_pricing.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class TwoTypedDict(TypedDict):
    dollar_relation: NotRequired[List[PriceComponentRelationTypedDict]]
    

class Two(BaseModel):
    dollar_relation: Annotated[Optional[List[PriceComponentRelation]], pydantic.Field(alias="$relation")] = None
    

PriceComponentsTypedDict = Union[TwoTypedDict, List[PriceTypedDict]]
r"""A set of [price](/api/pricing#tag/simple_price_schema) components that define the composite price."""


PriceComponents = Union[Two, List[Price]]
r"""A set of [price](/api/pricing#tag/simple_price_schema) components that define the composite price."""


class CompositePriceTypedDict(TypedDict):
    r"""The price entity schema for dynamic pricing"""
    
    created_at: NotRequired[str]
    r"""The price creation date"""
    id: NotRequired[str]
    r"""The price id"""
    org_id: NotRequired[str]
    r"""The organization id the price belongs to"""
    tags: NotRequired[List[str]]
    r"""An arbitrary set of tags attached to the composite price"""
    title: NotRequired[str]
    r"""The price autogenerated title"""
    updated_at: NotRequired[str]
    r"""The price last update date"""
    active: NotRequired[bool]
    r"""Whether the price can be used for new purchases."""
    description: NotRequired[str]
    r"""A brief description of the price."""
    is_composite_price: NotRequired[bool]
    r"""The flag for prices that contain price components."""
    price_components: NotRequired[PriceComponentsTypedDict]
    r"""A set of [price](/api/pricing#tag/simple_price_schema) components that define the composite price."""
    unit_amount_currency: NotRequired[str]
    r"""Three-letter ISO currency code, in lowercase."""
    

class CompositePrice(BaseModel):
    r"""The price entity schema for dynamic pricing"""
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    created_at: Annotated[Optional[str], pydantic.Field(alias="_created_at")] = None
    r"""The price creation date"""
    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None
    r"""The price id"""
    org_id: Annotated[Optional[str], pydantic.Field(alias="_org_id")] = None
    r"""The organization id the price belongs to"""
    tags: Annotated[Optional[List[str]], pydantic.Field(alias="_tags")] = None
    r"""An arbitrary set of tags attached to the composite price"""
    title: Annotated[Optional[str], pydantic.Field(alias="_title")] = None
    r"""The price autogenerated title"""
    updated_at: Annotated[Optional[str], pydantic.Field(alias="_updated_at")] = None
    r"""The price last update date"""
    active: Optional[bool] = None
    r"""Whether the price can be used for new purchases."""
    description: Optional[str] = None
    r"""A brief description of the price."""
    is_composite_price: Optional[bool] = None
    r"""The flag for prices that contain price components."""
    price_components: Optional[PriceComponents] = None
    r"""A set of [price](/api/pricing#tag/simple_price_schema) components that define the composite price."""
    unit_amount_currency: Optional[str] = None
    r"""Three-letter ISO currency code, in lowercase."""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
