"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from epilot_pricing import models, utils
from epilot_pricing._hooks import HookContext
from epilot_pricing.types import OptionalNullable, UNSET
from typing import Any, Optional, Union

class CartAPI(BaseSDK):
    r"""Used to interact with a cart during a customer's checkout session, providing:
    - An unified data model to model a Shopping Cart
    - Product and pricing data validation
    - Checkout a cart into an order or quote

    """
    
    
    def dollar_checkout_cart(
        self, *,
        x_ivy_org_id: str,
        checkout_cart: Union[models.CheckoutCart, models.CheckoutCartTypedDict],
        security: Optional[Union[models.DollarCheckoutCartSecurity, models.DollarCheckoutCartSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.CheckoutCartResult]:
        r"""checkoutCart

        Checkouts a cart and executes the specified checkout `mode` process.

        A Checkout implicitly finalizes the provided cart (if not transient from a fast-checkout) and behaves in one of the following modes:
        - `create_order` (**default**): the payment happens at a later date or managed by 3rd-party CRM (SAP)
        - `create_invoice`: the payment happens on the online checkout (paypal, stripe, adyen)
        - `create_quote`: the checkout represents a price quote request

        Fast checkout is also supported, by passing the Cart contents directly.
        When a fast checkout is performed the cart is considered transient and there is no cart persistance.

        If the checkout `mode` is omitted, the `mode` will default to `create_order`.


        :param x_ivy_org_id: The target Organization Id represented by the caller
        :param checkout_cart: 
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = models.DollarCheckoutCartRequest(
            x_ivy_org_id=x_ivy_org_id,
            checkout_cart=utils.get_pydantic_model(checkout_cart, models.CheckoutCart),
        )
        
        req = self.build_request(
            method="POST",
            path="/v1/public/cart:checkout",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=utils.get_pydantic_model(security, Optional[models.DollarCheckoutCartSecurity]),
            get_serialized_body=lambda: utils.serialize_request_body(request.checkout_cart, False, False, "json", models.CheckoutCart),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="$checkoutCart", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.CheckoutCartResult])
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ErrorData)
            raise models.Error(data=data)
        if utils.match_response(http_res, ["4XX","5XX"], "*"):
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def dollar_checkout_cart_async(
        self, *,
        x_ivy_org_id: str,
        checkout_cart: Union[models.CheckoutCart, models.CheckoutCartTypedDict],
        security: Optional[Union[models.DollarCheckoutCartSecurity, models.DollarCheckoutCartSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> Optional[models.CheckoutCartResult]:
        r"""checkoutCart

        Checkouts a cart and executes the specified checkout `mode` process.

        A Checkout implicitly finalizes the provided cart (if not transient from a fast-checkout) and behaves in one of the following modes:
        - `create_order` (**default**): the payment happens at a later date or managed by 3rd-party CRM (SAP)
        - `create_invoice`: the payment happens on the online checkout (paypal, stripe, adyen)
        - `create_quote`: the checkout represents a price quote request

        Fast checkout is also supported, by passing the Cart contents directly.
        When a fast checkout is performed the cart is considered transient and there is no cart persistance.

        If the checkout `mode` is omitted, the `mode` will default to `create_order`.


        :param x_ivy_org_id: The target Organization Id represented by the caller
        :param checkout_cart: 
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = models.DollarCheckoutCartRequest(
            x_ivy_org_id=x_ivy_org_id,
            checkout_cart=utils.get_pydantic_model(checkout_cart, models.CheckoutCart),
        )
        
        req = self.build_request(
            method="POST",
            path="/v1/public/cart:checkout",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=utils.get_pydantic_model(security, Optional[models.DollarCheckoutCartSecurity]),
            get_serialized_body=lambda: utils.serialize_request_body(request.checkout_cart, False, False, "json", models.CheckoutCart),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="$checkoutCart", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.CheckoutCartResult])
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ErrorData)
            raise models.Error(data=data)
        if utils.match_response(http_res, ["4XX","5XX"], "*"):
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
