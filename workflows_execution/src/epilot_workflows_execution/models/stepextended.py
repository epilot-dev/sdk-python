"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .automationconfig import AutomationConfig, AutomationConfigTypedDict
from .dynamicduedate import DynamicDueDate, DynamicDueDateTypedDict
from .ecpdetails import ECPDetails, ECPDetailsTypedDict
from .itemtype import ItemType
from .stepdescription import StepDescription, StepDescriptionTypedDict
from .stepjourney import StepJourney, StepJourneyTypedDict
from .steprequirement import StepRequirement, StepRequirementTypedDict
from .stepstatus import StepStatus
from .steptype import StepType
from .workflowcontext import WorkflowContext, WorkflowContextTypedDict
from .workflowstatus import WorkflowStatus
from epilot_workflows_execution.types import BaseModel
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class StepExtendedTypedDict(TypedDict):
    execution_id: str
    execution_name: str
    execution_status: WorkflowStatus
    id: str
    name: str
    type: ItemType
    assigned_to: NotRequired[List[str]]
    assigned_to_in_progress: NotRequired[str]
    r"""The user which moved the step/task to the IN_PROGRESS state. The user should also be present in the assignedTo property of the step/task"""
    automation_config: NotRequired[AutomationConfigTypedDict]
    r"""Configuration for automation execution to run"""
    completed_time: NotRequired[str]
    contexts: NotRequired[List[WorkflowContextTypedDict]]
    created: NotRequired[str]
    definition_id: NotRequired[str]
    description: NotRequired[StepDescriptionTypedDict]
    r"""Longer information regarding Task"""
    due_date: NotRequired[str]
    dynamic_due_date: NotRequired[DynamicDueDateTypedDict]
    r"""set a Duedate for a step then a specific"""
    ecp: NotRequired[ECPDetailsTypedDict]
    r"""Details regarding ECP for the workflow step"""
    enabled: NotRequired[bool]
    r"""enabled flag results from calculating the requirements"""
    entity_ref_id: NotRequired[str]
    r"""This field is deprecated. It will be soon removed. Please use only id."""
    execution_type: NotRequired[StepType]
    installer: NotRequired[ECPDetailsTypedDict]
    r"""Details regarding ECP for the workflow step"""
    journey: NotRequired[StepJourneyTypedDict]
    last_updated: NotRequired[str]
    manually_created: NotRequired[bool]
    requirements: NotRequired[List[StepRequirementTypedDict]]
    section_id: NotRequired[str]
    started_time: NotRequired[str]
    status: NotRequired[StepStatus]
    user_ids: NotRequired[List[float]]
    r"""This field is deprecated. Please use assignedTo"""
    

class StepExtended(BaseModel):
    execution_id: Annotated[str, pydantic.Field(alias="executionId")]
    execution_name: Annotated[str, pydantic.Field(alias="executionName")]
    execution_status: Annotated[WorkflowStatus, pydantic.Field(alias="executionStatus")]
    id: str
    name: str
    type: ItemType
    assigned_to: Annotated[Optional[List[str]], pydantic.Field(alias="assignedTo")] = None
    assigned_to_in_progress: Annotated[Optional[str], pydantic.Field(alias="assignedToInProgress")] = None
    r"""The user which moved the step/task to the IN_PROGRESS state. The user should also be present in the assignedTo property of the step/task"""
    automation_config: Annotated[Optional[AutomationConfig], pydantic.Field(alias="automationConfig")] = None
    r"""Configuration for automation execution to run"""
    completed_time: Annotated[Optional[str], pydantic.Field(alias="completedTime")] = None
    contexts: Optional[List[WorkflowContext]] = None
    created: Optional[str] = None
    definition_id: Annotated[Optional[str], pydantic.Field(alias="definitionId")] = None
    description: Optional[StepDescription] = None
    r"""Longer information regarding Task"""
    due_date: Annotated[Optional[str], pydantic.Field(alias="dueDate")] = None
    dynamic_due_date: Annotated[Optional[DynamicDueDate], pydantic.Field(alias="dynamicDueDate")] = None
    r"""set a Duedate for a step then a specific"""
    ecp: Optional[ECPDetails] = None
    r"""Details regarding ECP for the workflow step"""
    enabled: Optional[bool] = None
    r"""enabled flag results from calculating the requirements"""
    entity_ref_id: Annotated[Optional[str], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.", alias="entityRefId")] = None
    r"""This field is deprecated. It will be soon removed. Please use only id."""
    execution_type: Annotated[Optional[StepType], pydantic.Field(alias="executionType")] = None
    installer: Optional[ECPDetails] = None
    r"""Details regarding ECP for the workflow step"""
    journey: Optional[StepJourney] = None
    last_updated: Annotated[Optional[str], pydantic.Field(alias="lastUpdated")] = None
    manually_created: Annotated[Optional[bool], pydantic.Field(alias="manuallyCreated")] = None
    requirements: Optional[List[StepRequirement]] = None
    section_id: Annotated[Optional[str], pydantic.Field(alias="sectionId")] = None
    started_time: Annotated[Optional[str], pydantic.Field(alias="startedTime")] = None
    status: Optional[StepStatus] = None
    user_ids: Annotated[Optional[List[float]], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.", alias="userIds")] = None
    r"""This field is deprecated. Please use assignedTo"""
    
