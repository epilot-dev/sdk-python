"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from epilot.models import operations, shared
from typing import Optional

class Workflows:
    r"""Interact with workflow executions - start / close / retrieve one or all / search / delete"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def create_execution(self, request: shared.WorkflowExecutionCreateReq) -> operations.CreateExecutionResponse:
        r"""createExecution
        Create a Workflow Execution. Start a new workflow execution, based on a workflow definition (template).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/workflows/executions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkflowExecution])
                res.workflow_execution = out
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def create_step(self, request: operations.CreateStepRequest) -> operations.CreateStepResponse:
        r"""createStep
        Create a new step in current workflow execution.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateStepRequest, base_url, '/v1/workflows/executions/{executionId}/steps', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_step_req", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateStepResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Step])
                res.step = out
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def delete_execution(self, request: operations.DeleteExecutionRequest) -> operations.DeleteExecutionResponse:
        r"""deleteExecution
        Delete workflow execution by id. Workflow contexts will NOT be deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteExecutionRequest, base_url, '/v1/workflows/executions/{executionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def delete_step(self, request: operations.DeleteStepRequest) -> operations.DeleteStepResponse:
        r"""deleteStep
        Deletes a step from a workflow execution.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteStepRequest, base_url, '/v1/workflows/executions/{executionId}/steps/{stepId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteStepResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def get_closing_reason_execution(self, request: operations.GetClosingReasonExecutionRequest) -> operations.GetClosingReasonExecutionResponse:
        r"""getClosingReasonExecution
        Shows all Closing Reasons defined at the moment of starting the Workflow Execution.
        The Closing Reasons shown in the execution are just snapshots
        from the state of the Definition when the instance was created.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetClosingReasonExecutionRequest, base_url, '/v1/workflows/executions/{executionId}/closing-reasons', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClosingReasonExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClosingReasonResp])
                res.closing_reason_resp = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def get_execution(self, request: operations.GetExecutionRequest) -> operations.GetExecutionResponse:
        r"""getExecution
        Get a full workflow execution, included steps information, by execution id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetExecutionRequest, base_url, '/v1/workflows/executions/{executionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkflowExecution])
                res.workflow_execution = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def get_executions(self, request: operations.GetExecutionsRequest) -> operations.GetExecutionsResponse:
        r"""getExecutions
        Retrieve Workflow Executions. Optionally, you can filter them by context & schema. Please be aware, these executions are more light weight - steps are not loaded with all information.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/workflows/executions'
        
        query_params = utils.get_query_params(operations.GetExecutionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExecutionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WorkflowExecutionSlim]])
                res.workflow_execution_slims = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def search_executions(self, request: shared.SearchExecutionsReq) -> operations.SearchExecutionsResponse:
        r"""searchExecutions
        Search Workflow Executions by different filters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/workflows/executions/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchExecutionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchExecutionsResp])
                res.search_executions_resp = out
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def search_steps(self, request: shared.SearchStepsReq) -> operations.SearchStepsResponse:
        r"""searchSteps
        Search workflow execution steps by different filters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/workflows/executions/steps/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchStepsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchStepsResp])
                res.search_steps_resp = out
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def update_execution(self, request: operations.UpdateExecutionRequest) -> operations.UpdateExecutionResponse:
        r"""updateExecution
        Patches updates like assignees, status, closingReason for a single Workflow Execution.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateExecutionRequest, base_url, '/v1/workflows/executions/{executionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workflow_execution_update_req", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    
    def update_step(self, request: operations.UpdateStepRequest) -> operations.UpdateStepResponse:
        r"""updateStep
        Patches various changes to a workflow execution step.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateStepRequest, base_url, '/v1/workflows/executions/{executionId}/steps/{stepId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_step_req", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateStepResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Step])
                res.step = out
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResp])
                res.error_resp = out

        return res

    