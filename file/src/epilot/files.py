"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from epilot.models import operations, shared
from typing import Any, Optional

class Files:
    r"""Files"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def delete_file(self, request: shared.DeleteFilePayload) -> operations.DeleteFileResponse:
        r"""deleteFile
        Delete file entity
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/files/delete'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def download_file(self, request: operations.DownloadFileRequest) -> operations.DownloadFileResponse:
        r"""downloadFile
        Generate pre-signed download S3 url for a file
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadFileRequest, base_url, '/v1/files/{id}/download', request)
        headers = {}
        query_params = utils.get_query_params(operations.DownloadFileRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DownloadFile200ApplicationJSON])
                res.download_file_200_application_json_object = out

        return res

    
    def download_s3_file(self, request: operations.DownloadS3FileRequest) -> operations.DownloadS3FileResponse:
        r"""downloadS3File
        Generate pre-signed download S3 url for a file
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/files:downloadS3'
        headers = {}
        query_params = utils.get_query_params(operations.DownloadS3FileRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadS3FileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DownloadS3File200ApplicationJSON])
                res.download_s3_file_200_application_json_object = out

        return res

    
    def preview_file(self, request: operations.PreviewFileRequest) -> operations.PreviewFileResponse:
        r"""previewFile
        Generate thumbnail preview for a file entity
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PreviewFileRequest, base_url, '/v1/files/{id}/preview', request)
        headers = {}
        query_params = utils.get_query_params(operations.PreviewFileRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PreviewFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def preview_s3_file(self, request: operations.PreviewS3FileRequest) -> operations.PreviewS3FileResponse:
        r"""previewS3File
        Generate thumbnail preview from an s3 reference for a file entity
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/files:previewS3'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "s3_reference", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PreviewS3FileRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PreviewS3FileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def save_file(self, request: dict[str, Any]) -> operations.SaveFileResponse:
        r"""saveFile
        Create / Update a permanent File entity
        
        Makes file object permanent
        
        Saves metadata to file entity
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/files'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileEntity])
                res.file_entity = out

        return res

    
    def upload_file(self, request: operations.UploadFileRequest) -> operations.UploadFileResponse:
        r"""uploadFile
        Create pre-signed S3 URL to upload a file to keep temporarily (one week).
        
        Use the createFile operation to store file file permanently.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/files/upload'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "upload_file_payload", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UploadFileRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UploadFile201ApplicationJSON])
                res.upload_file_201_application_json_object = out

        return res

    
    def upload_file_public(self, request: shared.UploadFilePayload) -> operations.UploadFilePublicResponse:
        r"""uploadFilePublic
        Create pre-signed S3 URL to upload a file to keep temporarily (one week).
        
        Use the createFile operation to store file file permanently.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/files/public/upload'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadFilePublicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UploadFilePublic201ApplicationJSON])
                res.upload_file_public_201_application_json_object = out

        return res

    