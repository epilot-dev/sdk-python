"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .filerelationitem import FileRelationItem, FileRelationItemTypedDict
from .s3reference import S3Reference, S3ReferenceTypedDict
from enum import Enum
from epilot_file.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class SaveS3FilePayloadAccessControl(str, Enum):
    PRIVATE = "private"
    PUBLIC_READ = "public-read"

class SaveS3FilePayloadDocumentType(str, Enum):
    DOCUMENT = "document"
    DOCUMENT_TEMPLATE = "document_template"
    TEXT = "text"
    IMAGE = "image"
    VIDEO = "video"
    AUDIO = "audio"
    SPREADSHEET = "spreadsheet"
    PRESENTATION = "presentation"
    FONT = "font"
    ARCHIVE = "archive"
    APPLICATION = "application"
    UNKNOWN = "unknown"

class SaveS3FilePayloadTypedDict(TypedDict):
    s3ref: S3ReferenceTypedDict
    tags: NotRequired[List[str]]
    access_control: NotRequired[SaveS3FilePayloadAccessControl]
    document_type: NotRequired[SaveS3FilePayloadDocumentType]
    file_entity_id: NotRequired[str]
    r"""if passed, adds a new version to existing file entity"""
    filename: NotRequired[str]
    relations: NotRequired[List[FileRelationItemTypedDict]]
    r"""List of entities to relate the file to"""
    

class SaveS3FilePayload(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    s3ref: S3Reference
    tags: Annotated[Optional[List[str]], pydantic.Field(alias="_tags")] = None
    access_control: Optional[SaveS3FilePayloadAccessControl] = SaveS3FilePayloadAccessControl.PRIVATE
    document_type: Optional[SaveS3FilePayloadDocumentType] = None
    file_entity_id: Optional[str] = None
    r"""if passed, adds a new version to existing file entity"""
    filename: Optional[str] = None
    relations: Optional[List[FileRelationItem]] = None
    r"""List of entities to relate the file to"""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
