"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .appendvaluemapper import AppendValueMapper
from .copyvaluemapper import CopyValueMapper
from .mappingattributev2 import MappingAttributeV2
from .mappingconfigref import MappingConfigRef
from .relationattribute import RelationAttribute
from .setvaluemapper import SetValueMapper
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import List, Optional, Union


@dataclasses.dataclass
class MapEntityConfigMappingAttributes:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MapEntityConfig:
    target_schema: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_schema') }})
    r"""Schema of target entity"""
    linkback_relation_attribute: Optional[str] = dataclasses.field(default='mapped_entities', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkback_relation_attribute'), 'exclude': lambda f: f is None }})
    r"""Relation attribute on the main entity where the target entity will be linked. Set to false to disable linkback"""
    linkback_relation_tags: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkback_relation_tags'), 'exclude': lambda f: f is None }})
    r"""Relation tags (labels) to include in main entity linkback relation attribute"""
    mapping_attributes: Optional[List[Union[MappingAttributeV2, Union[SetValueMapper, CopyValueMapper, AppendValueMapper]]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mapping_attributes'), 'exclude': lambda f: f is None }})
    r"""Attribute mappings"""
    mapping_config: Optional[MappingConfigRef] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mapping_config'), 'exclude': lambda f: f is None }})
    relation_attributes: Optional[List[RelationAttribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relation_attributes'), 'exclude': lambda f: f is None }})
    r"""Relation mappings"""
    target_unique: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_unique'), 'exclude': lambda f: f is None }})
    r"""Unique key for target entity (see upsertEntity of Entity API)"""
    

