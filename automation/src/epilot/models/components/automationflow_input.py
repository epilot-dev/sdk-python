"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .activitytrigger import ActivityTrigger
from .apisubmissiontrigger import APISubmissionTrigger
from .entitymanualtrigger import EntityManualTrigger
from .entityoperationtrigger import EntityOperationTrigger
from .frontendsubmittrigger import FrontendSubmitTrigger
from .journeysubmittrigger import JourneySubmitTrigger
from .receivedemailtrigger import ReceivedEmailTrigger
from .triggercondition import TriggerCondition
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import List, Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutomationFlowInput:
    flow_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flow_name') }})
    r"""A descriptive name for the Automation"""
    triggers: List[Union[FrontendSubmitTrigger, JourneySubmitTrigger, APISubmissionTrigger, EntityOperationTrigger, ActivityTrigger, EntityManualTrigger, ReceivedEmailTrigger]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggers') }})
    enabled: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether the automation is enabled or not"""
    entity_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_schema'), 'exclude': lambda f: f is None }})
    r"""The triggering entity schema"""
    runs: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runs'), 'exclude': lambda f: f is None }})
    r"""Number of automation executions that ran"""
    trigger_conditions: Optional[List[TriggerCondition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trigger_conditions'), 'exclude': lambda f: f is None }})
    

