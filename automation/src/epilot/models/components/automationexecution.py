"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from .automationaction import AutomationAction
from .cartcheckoutaction import CartCheckoutAction
from .createdocumentaction import CreateDocumentAction
from .entityitemsnapshot import EntityItemSnapshot
from .executionstatus import ExecutionStatus
from .mapentityaction import MapEntityAction
from .sendemailaction import SendEmailAction
from .triggerevententityactivity import TriggerEventEntityActivity
from .triggerevententityoperation import TriggerEventEntityOperation
from .triggereventmanual import TriggerEventManual
from .triggerwebhookaction import TriggerWebhookAction
from .triggerworkflowaction import TriggerWorkflowAction
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from epilot import utils
from typing import List, Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutomationExecution:
    actions: List[Union[MapEntityAction, TriggerWorkflowAction, TriggerWebhookAction, CreateDocumentAction, SendEmailAction, CartCheckoutAction, AutomationAction]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions') }})
    entity_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_id') }})
    flow_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flow_id') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    org_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('org_id') }})
    activity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_id'), 'exclude': lambda f: f is None }})
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    current_action_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_action_id'), 'exclude': lambda f: f is None }})
    entity_snapshot: Optional[EntityItemSnapshot] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_snapshot'), 'exclude': lambda f: f is None }})
    execution_status: Optional[ExecutionStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execution_status'), 'exclude': lambda f: f is None }})
    flow_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flow_name'), 'exclude': lambda f: f is None }})
    trigger_event: Optional[Union[TriggerEventManual, TriggerEventEntityActivity, TriggerEventEntityOperation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trigger_event'), 'exclude': lambda f: f is None }})
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    

