"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import searchautomationsresp as shared_searchautomationsresp
from typing import Optional


@dataclasses.dataclass
class SearchFlowsRequest:
    from_: Optional[int] = dataclasses.field(default=0, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Pagination: starting for results"""
    schema: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'schema', 'style': 'form', 'explode': True }})
    r"""Entity Schema"""
    size: Optional[int] = dataclasses.field(default=25, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Pagination: max number of results to return"""
    trigger_source_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'trigger_source_id', 'style': 'form', 'explode': True }})
    r"""Trigger source identifier"""
    



@dataclasses.dataclass
class SearchFlowsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    search_automations_resp: Optional[shared_searchautomationsresp.SearchAutomationsResp] = dataclasses.field(default=None)
    r"""List of automation flows, including total count"""
    

