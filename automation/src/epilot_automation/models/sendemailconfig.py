"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from epilot_automation.types import BaseModel
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class DocumentType(str, Enum):
    r"""Filter by a specific document type (e.g. document)"""
    DOCUMENT = "document"
    TEXT = "text"
    IMAGE = "image"
    VIDEO = "video"
    AUDIO = "audio"
    SPREADSHEET = "spreadsheet"
    PRESENTATION = "presentation"
    FONT = "font"
    ARCHIVE = "archive"
    APPLICATION = "application"
    UNKNOWN = "unknown"

class SendEmailConfigSourceFilterTypedDict(TypedDict):
    r"""Specify filters to match file entities related to main entity"""
    
    attribute: NotRequired[str]
    r"""Filter by a specific relation attribute on the main entity"""
    document_type: NotRequired[DocumentType]
    r"""Filter by a specific document type (e.g. document)"""
    filename_regex: NotRequired[str]
    r"""Match by filename. Regex syntax supported"""
    limit: NotRequired[int]
    r"""Limit files to maximum number (default, all matched file relations)"""
    relation_tag: NotRequired[str]
    r"""Filter by relation tag (label) on the main entity"""
    self_: NotRequired[bool]
    r"""Picks main entity as file (only works if source entity is a file)"""
    tag: NotRequired[str]
    r"""Filter by a specific tag on the related file entity"""
    

class SendEmailConfigSourceFilter(BaseModel):
    r"""Specify filters to match file entities related to main entity"""
    
    attribute: Optional[str] = None
    r"""Filter by a specific relation attribute on the main entity"""
    document_type: Optional[DocumentType] = None
    r"""Filter by a specific document type (e.g. document)"""
    filename_regex: Optional[str] = None
    r"""Match by filename. Regex syntax supported"""
    limit: Optional[int] = None
    r"""Limit files to maximum number (default, all matched file relations)"""
    relation_tag: Optional[str] = None
    r"""Filter by relation tag (label) on the main entity"""
    self_: Annotated[Optional[bool], pydantic.Field(alias="self")] = False
    r"""Picks main entity as file (only works if source entity is a file)"""
    tag: Optional[str] = None
    r"""Filter by a specific tag on the related file entity"""
    

class AttachmentsTypedDict(TypedDict):
    source_filter: NotRequired[SendEmailConfigSourceFilterTypedDict]
    r"""Specify filters to match file entities related to main entity"""
    

class Attachments(BaseModel):
    source_filter: Optional[SendEmailConfigSourceFilter] = None
    r"""Specify filters to match file entities related to main entity"""
    

class LanguageCode(str, Enum):
    DE = "de"
    EN = "en"

class SendEmailConfigTypedDict(TypedDict):
    attachments: NotRequired[List[AttachmentsTypedDict]]
    r"""Include extra file attachments in sent email.
    Attachments in email template will be sent regardless of this configuration.

    """
    email_template_id: NotRequired[str]
    language_code: NotRequired[LanguageCode]
    notify_portal_user_only: NotRequired[bool]
    r"""Send an email exclusively to the portal user if they are registered on the portal."""
    skip_creating_entities: NotRequired[bool]
    r"""When true, it lets to send only the email by skip creating the thread & message entities."""
    wait_for_confirmation: NotRequired[bool]
    r"""Pause automation execution after sending email to wait for a confirmation link to be clicked.

    The email template should contain a confirmation link using the variable `{{confirmation_url}}`

    """
    

class SendEmailConfig(BaseModel):
    attachments: Optional[List[Attachments]] = None
    r"""Include extra file attachments in sent email.
    Attachments in email template will be sent regardless of this configuration.

    """
    email_template_id: Optional[str] = None
    language_code: Optional[LanguageCode] = None
    notify_portal_user_only: Optional[bool] = False
    r"""Send an email exclusively to the portal user if they are registered on the portal."""
    skip_creating_entities: Optional[bool] = False
    r"""When true, it lets to send only the email by skip creating the thread & message entities."""
    wait_for_confirmation: Optional[bool] = False
    r"""Pause automation execution after sending email to wait for a confirmation link to be clicked.

    The email template should contain a confirmation link using the variable `{{confirmation_url}}`

    """
    
