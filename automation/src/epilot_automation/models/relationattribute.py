"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from epilot_automation.types import BaseModel
import pydantic
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Mode(str, Enum):
    APPEND = "append"
    PREPEND = "prepend"
    SET = "set"

class SourceFilterTypedDict(TypedDict):
    r"""A filter to identify which source entities to pick as relations from main entity"""
    
    attribute: NotRequired[str]
    r"""Filter by a specific relation attribute on the main entity"""
    limit: NotRequired[int]
    r"""Limit relations to maximum number (default, all matched relations)"""
    relation_tag: NotRequired[str]
    r"""Filter by relation tag (label) on the main entity"""
    schema_: NotRequired[str]
    r"""Filter by specific schema"""
    self_: NotRequired[bool]
    r"""Picks main entity as relation (overrides other filters)"""
    tag: NotRequired[str]
    r"""Filter by a specific tag on the related entity"""
    

class SourceFilter(BaseModel):
    r"""A filter to identify which source entities to pick as relations from main entity"""
    
    attribute: Optional[str] = None
    r"""Filter by a specific relation attribute on the main entity"""
    limit: Optional[int] = None
    r"""Limit relations to maximum number (default, all matched relations)"""
    relation_tag: Optional[str] = None
    r"""Filter by relation tag (label) on the main entity"""
    schema_: Annotated[Optional[str], pydantic.Field(alias="schema")] = None
    r"""Filter by specific schema"""
    self_: Annotated[Optional[bool], pydantic.Field(alias="self")] = False
    r"""Picks main entity as relation (overrides other filters)"""
    tag: Optional[str] = None
    r"""Filter by a specific tag on the related entity"""
    

class RelationAttributeTypedDict(TypedDict):
    mode: Mode
    target: str
    r"""Target attribute to store the relation in"""
    related_to: NotRequired[Dict[str, Any]]
    source_filter: NotRequired[SourceFilterTypedDict]
    r"""A filter to identify which source entities to pick as relations from main entity"""
    target_tags: NotRequired[List[str]]
    r"""Relation tags (labels) to set for the stored relations"""
    target_tags_include_source: NotRequired[bool]
    r"""Include all relation tags (labels) present on the main entity relation"""
    

class RelationAttribute(BaseModel):
    mode: Mode
    target: str
    r"""Target attribute to store the relation in"""
    related_to: Annotated[Optional[Dict[str, Any]], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")] = None
    source_filter: Optional[SourceFilter] = None
    r"""A filter to identify which source entities to pick as relations from main entity"""
    target_tags: Optional[List[str]] = None
    r"""Relation tags (labels) to set for the stored relations"""
    target_tags_include_source: Optional[bool] = False
    r"""Include all relation tags (labels) present on the main entity relation"""
    
