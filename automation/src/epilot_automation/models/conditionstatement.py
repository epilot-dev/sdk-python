"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from epilot_automation.types import BaseModel
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Operation(str, Enum):
    EQUALS = "equals"
    NOT_EQUALS = "not_equals"
    ANY_OF = "any_of"
    NONE_OF = "none_of"
    CONTAINS = "contains"
    NOT_CONTAINS = "not_contains"
    STARTS_WITH = "starts_with"
    ENDS_WITH = "ends_with"
    GREATER_THAN = "greater_than"
    LESS_THAN = "less_than"
    GREATER_THAN_OR_EQUALS = "greater_than_or_equals"
    LESS_THAN_OR_EQUALS = "less_than_or_equals"
    IS_EMPTY = "is_empty"
    IS_NOT_EMPTY = "is_not_empty"

class AttributeType(str, Enum):
    STRING = "string"
    TEXT = "text"
    NUMBER = "number"
    BOOLEAN = "boolean"
    DATE = "date"
    DATETIME = "datetime"
    TAGS = "tags"
    COUNTRY = "country"
    EMAIL = "email"
    PHONE = "phone"
    PRODUCT = "product"
    PRICE = "price"
    STATUS = "status"
    RELATION = "relation"
    MULTISELECT = "multiselect"
    SELECT = "select"
    RADIO = "radio"
    RELATION_USER = "relation_user"

class Origin(str, Enum):
    TRIGGER = "trigger"
    ACTION = "action"

class OriginType(str, Enum):
    ENTITY = "entity"
    WORKFLOW = "workflow"
    JOURNEY_BLOCK = "journey_block"

class SourceTypedDict(TypedDict):
    attribute: NotRequired[str]
    attribute_repeatable: NotRequired[bool]
    attribute_type: NotRequired[AttributeType]
    id: NotRequired[str]
    origin: NotRequired[Origin]
    origin_type: NotRequired[OriginType]
    schema_: NotRequired[str]
    

class Source(BaseModel):
    attribute: Optional[str] = None
    attribute_repeatable: Annotated[Optional[bool], pydantic.Field(alias="attributeRepeatable")] = None
    attribute_type: Annotated[Optional[AttributeType], pydantic.Field(alias="attributeType")] = None
    id: Optional[str] = None
    origin: Optional[Origin] = None
    origin_type: Annotated[Optional[OriginType], pydantic.Field(alias="originType")] = None
    schema_: Annotated[Optional[str], pydantic.Field(alias="schema")] = None
    

class ConditionStatementTypedDict(TypedDict):
    id: NotRequired[str]
    operation: NotRequired[Operation]
    source: NotRequired[SourceTypedDict]
    values: NotRequired[List[str]]
    

class ConditionStatement(BaseModel):
    id: Optional[str] = None
    operation: Optional[Operation] = None
    source: Optional[Source] = None
    values: Optional[List[str]] = None
    
