"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .anythingbutcondition import AnythingButCondition, AnythingButConditionTypedDict
from .diffadded import DiffAdded, DiffAddedTypedDict
from .diffdeleted import DiffDeleted, DiffDeletedTypedDict
from .diffupdated import DiffUpdated, DiffUpdatedTypedDict
from .entityoperation import EntityOperation
from .equalsignorecasecondition import EqualsIgnoreCaseCondition, EqualsIgnoreCaseConditionTypedDict
from .existscondition import ExistsCondition, ExistsConditionTypedDict
from .filterconditiononevent import FilterConditionOnEvent, FilterConditionOnEventTypedDict
from .orconditionfordiff import OrConditionForDiff, OrConditionForDiffTypedDict
from .prefixcondition import PrefixCondition, PrefixConditionTypedDict
from .suffixcondition import SuffixCondition, SuffixConditionTypedDict
from .wildcardcondition import WildcardCondition, WildcardConditionTypedDict
from enum import Enum
from epilot_automation.types import BaseModel
import pydantic
from typing import List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class FileConfigTypedDict(TypedDict):
    shared_with_end_customer: NotRequired[bool]
    

class FileConfig(BaseModel):
    shared_with_end_customer: Optional[bool] = None
    

class EcpConfigTypedDict(TypedDict):
    file_config: NotRequired[FileConfigTypedDict]
    origin: NotRequired[str]
    

class EcpConfig(BaseModel):
    file_config: Optional[FileConfig] = None
    origin: Optional[str] = None
    

class ActivityTypedDict(TypedDict):
    type: NotRequired[List[EntityOperationTriggerSchemasTypeTypedDict]]
    r"""Filter on activity type. If not specified, all activities will be matched on execution.
    Example:
    1. Filter the events when an entity is updated from portal
    ```
    {
    \"activity\":{
    \"type\": [\"EntityUpdatedFromPortal\"]
    }
    }
    ```
    2. Filter the events when either a doc is uploaded/removed on an entity from a portal
    ```
    {
    \"activity\":{
    \"type\": [\"DocUploadedFromPortal\", \"DocRemovedFromPortal\"]
    }
    }
    ```

    """
    

class Activity(BaseModel):
    type: Optional[List[EntityOperationTriggerSchemasType]] = None
    r"""Filter on activity type. If not specified, all activities will be matched on execution.
    Example:
    1. Filter the events when an entity is updated from portal
    ```
    {
    \"activity\":{
    \"type\": [\"EntityUpdatedFromPortal\"]
    }
    }
    ```
    2. Filter the events when either a doc is uploaded/removed on an entity from a portal
    ```
    {
    \"activity\":{
    \"type\": [\"DocUploadedFromPortal\", \"DocRemovedFromPortal\"]
    }
    }
    ```

    """
    

class EntityOperationTrigger2TypedDict(TypedDict):
    r"""Diff to it's prior state when an entity is updated"""
    
    added: NotRequired[DiffAddedTypedDict]
    deleted: NotRequired[DiffDeletedTypedDict]
    updated: NotRequired[DiffUpdatedTypedDict]
    

class EntityOperationTrigger2(BaseModel):
    r"""Diff to it's prior state when an entity is updated"""
    
    added: Optional[DiffAdded] = None
    deleted: Optional[DiffDeleted] = None
    updated: Optional[DiffUpdated] = None
    

class EntityOperationTriggerOperationTypedDict(TypedDict):
    diff: NotRequired[DiffTypedDict]
    operation: NotRequired[List[EntityOperation]]
    r"""Filter on operation type. If not specified, all operations will be matched on execution.
    Example:
    1. Filter all the createEntity/updateEntity operations
    ```
    {
    \"operation\":{
    \"operation\": [\"createEntity\", \"updateEntity\"]
    }
    }
    ```

    """
    payload: NotRequired[FilterConditionOnEventTypedDict]
    

class EntityOperationTriggerOperation(BaseModel):
    diff: Optional[Diff] = None
    operation: Optional[List[EntityOperation]] = None
    r"""Filter on operation type. If not specified, all operations will be matched on execution.
    Example:
    1. Filter all the createEntity/updateEntity operations
    ```
    {
    \"operation\":{
    \"operation\": [\"createEntity\", \"updateEntity\"]
    }
    }
    ```

    """
    payload: Optional[FilterConditionOnEvent] = None
    

class FilterConfigTypedDict(TypedDict):
    activity: NotRequired[ActivityTypedDict]
    operation: NotRequired[EntityOperationTriggerOperationTypedDict]
    

class FilterConfig(BaseModel):
    activity: Optional[Activity] = None
    operation: Optional[EntityOperationTriggerOperation] = None
    

class EntityOperationTriggerConfigurationTypedDict(TypedDict):
    ecp_config: NotRequired[EcpConfigTypedDict]
    exclude_activities: NotRequired[List[str]]
    filter_config: NotRequired[FilterConfigTypedDict]
    include_activities: NotRequired[List[str]]
    operations: NotRequired[List[EntityOperation]]
    schema_: NotRequired[str]
    

class EntityOperationTriggerConfiguration(BaseModel):
    ecp_config: Optional[EcpConfig] = None
    exclude_activities: Optional[List[str]] = None
    filter_config: Optional[FilterConfig] = None
    include_activities: Optional[List[str]] = None
    operations: Optional[List[EntityOperation]] = None
    schema_: Annotated[Optional[str], pydantic.Field(alias="schema")] = None
    

class EntityOperationTriggerType(str, Enum):
    ENTITY_OPERATION = "entity_operation"

class EntityOperationTriggerTypedDict(TypedDict):
    r"""- If provides filter_config, executes an automation based on the filtered configuration when an entity event occurs.
    - The conditions on a filter follows the event bridge patterns - `https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html`
    | Comparison             | Example                                             | Rule syntax                                              |
    |------------------------|-----------------------------------------------------|----------------------------------------------------------|
    | Null                   | first_name is null                                  | `\"first_name\": [ null ]`                                 |
    | Empty                  | last_name is empty                                  | `\"last_name\": [\"\"]`                                      |
    | Equals                 | email is \"j.doe@email.com\"                          | `\"email\": [ \"j.doe@email.com\" ]`                         |
    | Equals (ignore case)   | first_name is \"John\"                                | `\"first_name\": [ { \"equals-ignore-case\": \"john\" } ]`     |
    | And                    | fist_name is \"John\" and last_name is \"Doe\"          | `\"first_name\": [ \"John\" ], \"last_name\": [\"Doe\"]`         |
    | Or                     | PaymentType is \"Invoice\" or \"SEPA\"                  | `\"PaymentType\": [ \"invoice\", \"sepa\"]`                    |
    | Or (multiple fields)   | first_name is \"John\", or last_name is \"Doe\".        | `\"$or\": [ { \"first_name\": [ \"John\" ] }, { \"last_name\": [ \"Doe\" ] } ]` |
    | Not                    | status is anything but \"cancelled\"                  | `\"status\": [ { \"anything-but\": [ \"cancelled\" ] } ]`      |
    | Numeric (equals)       | Price is 100                                        | `\"Price\": [ { \"numeric\": [ \"=\", 100 ] } ]`               |
    | Numeric (range)        | Price is more than 10, and less than or equal to 20 | `\"Price\": [ { \"numeric\": [ \">\", 10, \"<=\", 20 ] } ]`      |
    | Exists                 | ProductName exists                                  | `\"ProductName\": [ { \"exists\": true } ]`                  |
    | Does not exist         | ProductName does not exist                          | `\"ProductName\": [ { \"exists\": false } ]`                 |
    | Begins with            | OpportunityNumber starts with OPP-                  | `\"opportunity_number\": [ { \"prefix\": \"OPP-\" } ]`         |
    | Ends with              | FileName ends with a .png extension                 | `\"filename\": [ { \"suffix\": \".png\" } ]`                   |
    | Wildcard               | search a string using a wildcard                    | `\"email\": [ { \"wildcard\": \"*@doe.com\" } ]`               |
    - To run the execution on all update events
    ```
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"operation\": [\"updateEntity\"]
    }
    }
    }
    ```
    - To run the execution only when the updates are from a portal user
    ```
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"operation\": [\"updateEntity\"]
    },
    \"activity\": {
    \"type\": \"EntityUpdatedFromPortal\" 
    }
    }
    }
    ```
    - To run the execution only when there is an update on a specific attribute
    ```
    Only starts the automation when the email on a contact is changed
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"operation\": [\"updateEntity\"],
    \"payload\": {
    \"_schema\": [\"contact\"]
    },
    \"diff\": {
    \"updated\": {
    \"email\": [{ \"exists\": true }]
    }
    }
    }
    }
    }
    ```
    - To run the execution only when a specific attribute is altered(created/updated/deleted)
    ```
    Only starts the automation when a price is altered on a contract
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"payload\": {
    \"_schema\": [\"contract\"]
    },
    \"diff\": {
    // Whether he first_name has been added, updated, or removed
    $or: [
    {
    'added.first_name': [{ exists: true }]
    },
    {
    'updated.first_name': [{ exists: true }]
    },
    {
    'deleted.first_name': [{ exists: true }]
    }
    ]
    }
    }
    }
    }
    ```
    - To run the execution if an attribute is changed from one state to another
    ```
    Only starts the automation when the order status changes from `open_for_acceptance` to `placed`
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"operation\": [\"updateEntity\"],
    \"payload\": {
    \"_schema\": [\"order\"],
    \"status\": [\"placed\"]
    },
    \"diff\": {
    \"updated\": {
    \"status\": [\"open_for_acceptance\"]
    }
    }
    }
    }
    }
    ```

    """
    
    configuration: EntityOperationTriggerConfigurationTypedDict
    type: EntityOperationTriggerType
    id: NotRequired[str]
    

class EntityOperationTrigger(BaseModel):
    r"""- If provides filter_config, executes an automation based on the filtered configuration when an entity event occurs.
    - The conditions on a filter follows the event bridge patterns - `https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html`
    | Comparison             | Example                                             | Rule syntax                                              |
    |------------------------|-----------------------------------------------------|----------------------------------------------------------|
    | Null                   | first_name is null                                  | `\"first_name\": [ null ]`                                 |
    | Empty                  | last_name is empty                                  | `\"last_name\": [\"\"]`                                      |
    | Equals                 | email is \"j.doe@email.com\"                          | `\"email\": [ \"j.doe@email.com\" ]`                         |
    | Equals (ignore case)   | first_name is \"John\"                                | `\"first_name\": [ { \"equals-ignore-case\": \"john\" } ]`     |
    | And                    | fist_name is \"John\" and last_name is \"Doe\"          | `\"first_name\": [ \"John\" ], \"last_name\": [\"Doe\"]`         |
    | Or                     | PaymentType is \"Invoice\" or \"SEPA\"                  | `\"PaymentType\": [ \"invoice\", \"sepa\"]`                    |
    | Or (multiple fields)   | first_name is \"John\", or last_name is \"Doe\".        | `\"$or\": [ { \"first_name\": [ \"John\" ] }, { \"last_name\": [ \"Doe\" ] } ]` |
    | Not                    | status is anything but \"cancelled\"                  | `\"status\": [ { \"anything-but\": [ \"cancelled\" ] } ]`      |
    | Numeric (equals)       | Price is 100                                        | `\"Price\": [ { \"numeric\": [ \"=\", 100 ] } ]`               |
    | Numeric (range)        | Price is more than 10, and less than or equal to 20 | `\"Price\": [ { \"numeric\": [ \">\", 10, \"<=\", 20 ] } ]`      |
    | Exists                 | ProductName exists                                  | `\"ProductName\": [ { \"exists\": true } ]`                  |
    | Does not exist         | ProductName does not exist                          | `\"ProductName\": [ { \"exists\": false } ]`                 |
    | Begins with            | OpportunityNumber starts with OPP-                  | `\"opportunity_number\": [ { \"prefix\": \"OPP-\" } ]`         |
    | Ends with              | FileName ends with a .png extension                 | `\"filename\": [ { \"suffix\": \".png\" } ]`                   |
    | Wildcard               | search a string using a wildcard                    | `\"email\": [ { \"wildcard\": \"*@doe.com\" } ]`               |
    - To run the execution on all update events
    ```
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"operation\": [\"updateEntity\"]
    }
    }
    }
    ```
    - To run the execution only when the updates are from a portal user
    ```
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"operation\": [\"updateEntity\"]
    },
    \"activity\": {
    \"type\": \"EntityUpdatedFromPortal\" 
    }
    }
    }
    ```
    - To run the execution only when there is an update on a specific attribute
    ```
    Only starts the automation when the email on a contact is changed
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"operation\": [\"updateEntity\"],
    \"payload\": {
    \"_schema\": [\"contact\"]
    },
    \"diff\": {
    \"updated\": {
    \"email\": [{ \"exists\": true }]
    }
    }
    }
    }
    }
    ```
    - To run the execution only when a specific attribute is altered(created/updated/deleted)
    ```
    Only starts the automation when a price is altered on a contract
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"payload\": {
    \"_schema\": [\"contract\"]
    },
    \"diff\": {
    // Whether he first_name has been added, updated, or removed
    $or: [
    {
    'added.first_name': [{ exists: true }]
    },
    {
    'updated.first_name': [{ exists: true }]
    },
    {
    'deleted.first_name': [{ exists: true }]
    }
    ]
    }
    }
    }
    }
    ```
    - To run the execution if an attribute is changed from one state to another
    ```
    Only starts the automation when the order status changes from `open_for_acceptance` to `placed`
    {
    \"type\": \"filter_entity_event\",
    \"configuration\": {
    \"operation\": {
    \"operation\": [\"updateEntity\"],
    \"payload\": {
    \"_schema\": [\"order\"],
    \"status\": [\"placed\"]
    },
    \"diff\": {
    \"updated\": {
    \"status\": [\"open_for_acceptance\"]
    }
    }
    }
    }
    }
    ```

    """
    
    configuration: EntityOperationTriggerConfiguration
    type: EntityOperationTriggerType
    id: Optional[str] = None
    

EntityOperationTriggerSchemasTypeTypedDict = Union[EqualsIgnoreCaseConditionTypedDict, AnythingButConditionTypedDict, ExistsConditionTypedDict, PrefixConditionTypedDict, SuffixConditionTypedDict, WildcardConditionTypedDict, str]


EntityOperationTriggerSchemasType = Union[EqualsIgnoreCaseCondition, AnythingButCondition, ExistsCondition, PrefixCondition, SuffixCondition, WildcardCondition, str]


DiffTypedDict = Union[OrConditionForDiffTypedDict, EntityOperationTrigger2TypedDict]


Diff = Union[OrConditionForDiff, EntityOperationTrigger2]

