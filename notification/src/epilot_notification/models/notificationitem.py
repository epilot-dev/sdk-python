"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .entityoperation import EntityOperation, EntityOperationTypedDict
from .notificationcallercontext import NotificationCallerContext, NotificationCallerContextTypedDict
from datetime import datetime
from epilot_notification.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import NotRequired


class NotificationItemMessageTypedDict(TypedDict):
    de: NotRequired[str]
    r"""Message for notification. Supports handlebars syntax."""
    en: NotRequired[str]
    r"""Message for notification. Supports handlebars syntax."""
    

class NotificationItemMessage(BaseModel):
    de: Optional[str] = None
    r"""Message for notification. Supports handlebars syntax."""
    en: Optional[str] = None
    r"""Message for notification. Supports handlebars syntax."""
    

class NotificationItemTitleTypedDict(TypedDict):
    de: NotRequired[str]
    r"""Title for notification. Supports handlebars syntax."""
    en: NotRequired[str]
    r"""Title for notification. Supports handlebars syntax."""
    

class NotificationItemTitle(BaseModel):
    de: Optional[str] = None
    r"""Title for notification. Supports handlebars syntax."""
    en: Optional[str] = None
    r"""Title for notification. Supports handlebars syntax."""
    

class NotificationItemTypedDict(TypedDict):
    message: NotificationItemMessageTypedDict
    title: NotificationItemTitleTypedDict
    type: str
    r"""Type of notification"""
    caller: NotRequired[NotificationCallerContextTypedDict]
    force_notify_users: NotRequired[Dict[str, Any]]
    id: NotRequired[float]
    notification_id: NotRequired[float]
    operations: NotRequired[List[EntityOperationTypedDict]]
    organization_id: NotRequired[str]
    r"""Organization Id"""
    payload: NotRequired[Dict[str, Any]]
    read_state: NotRequired[bool]
    redirect_url: NotRequired[str]
    r"""Redirect url"""
    timestamp: NotRequired[datetime]
    

class NotificationItem(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    message: NotificationItemMessage
    title: NotificationItemTitle
    type: str
    r"""Type of notification"""
    caller: Optional[NotificationCallerContext] = None
    force_notify_users: Optional[Dict[str, Any]] = None
    id: Optional[float] = None
    notification_id: Optional[float] = None
    operations: Optional[List[EntityOperation]] = None
    organization_id: Optional[str] = None
    r"""Organization Id"""
    payload: Optional[Dict[str, Any]] = None
    read_state: Optional[bool] = None
    redirect_url: Optional[str] = None
    r"""Redirect url"""
    timestamp: Optional[datetime] = None
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
