"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .entityoperation import EntityOperation, EntityOperationTypedDict
from .notificationcallercontext import NotificationCallerContext, NotificationCallerContextTypedDict
from epilot_notification.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import NotRequired


class MessageTypedDict(TypedDict):
    de: NotRequired[str]
    r"""Message for notification. Supports handlebars syntax."""
    en: NotRequired[str]
    r"""Message for notification. Supports handlebars syntax."""
    

class Message(BaseModel):
    de: Optional[str] = None
    r"""Message for notification. Supports handlebars syntax."""
    en: Optional[str] = None
    r"""Message for notification. Supports handlebars syntax."""
    

class TitleTypedDict(TypedDict):
    de: NotRequired[str]
    r"""Title for notification. Supports handlebars syntax."""
    en: NotRequired[str]
    r"""Title for notification. Supports handlebars syntax."""
    

class Title(BaseModel):
    de: Optional[str] = None
    r"""Title for notification. Supports handlebars syntax."""
    en: Optional[str] = None
    r"""Title for notification. Supports handlebars syntax."""
    

class NotificationTypedDict(TypedDict):
    message: MessageTypedDict
    title: TitleTypedDict
    type: str
    r"""Type of notification"""
    caller: NotRequired[NotificationCallerContextTypedDict]
    force_notify_users: NotRequired[Dict[str, Any]]
    operations: NotRequired[List[EntityOperationTypedDict]]
    organization_id: NotRequired[str]
    r"""Organization Id"""
    payload: NotRequired[Dict[str, Any]]
    redirect_url: NotRequired[str]
    r"""Redirect url"""
    visibility_user_ids: NotRequired[List[str]]
    r"""The person who is the corresponding event recipient."""
    

class Notification(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    message: Message
    title: Title
    type: str
    r"""Type of notification"""
    caller: Optional[NotificationCallerContext] = None
    force_notify_users: Optional[Dict[str, Any]] = None
    operations: Optional[List[EntityOperation]] = None
    organization_id: Optional[str] = None
    r"""Organization Id"""
    payload: Optional[Dict[str, Any]] = None
    redirect_url: Optional[str] = None
    r"""Redirect url"""
    visibility_user_ids: Optional[List[str]] = None
    r"""The person who is the corresponding event recipient."""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
