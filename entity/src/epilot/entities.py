"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from epilot import utils
from epilot.models import operations, shared
from typing import Any, Optional

class Entities:
    r"""CRUD Access for Entities"""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def autocomplete(self, request: operations.AutocompleteRequest) -> operations.AutocompleteResponse:
        r"""autocomplete
        Autocomplete entity attributes
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/v1/entity:autocomplete'
        headers = {}
        query_params = utils.get_query_params(operations.AutocompleteRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutocompleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Autocomplete200ApplicationJSON])
                res.autocomplete_200_application_json_object = out

        return res

    
    def create_entity(self, request: operations.CreateEntityRequest) -> operations.CreateEntityResponse:
        r"""createEntity
        Creates a new entity using a key.

        ## Activity

        If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityCreated`

        ## Relations

        To create a relation, store a property object that defines a `$relation` array.

        Example:

        ```json
        {
          \"contacts\": {
            \"$relation\": [
              { \"entity_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" }
            ]
          }
        }
        ```

        The items in `$relation` support two properties:
        - `entity_id` - The ID of the entity to link
        - `_tags` - Tags or labels for the relation (optional)
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateEntityRequest, base_url, '/v1/entity/{slug}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateEntityRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateEntityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.entity_item = out

        return res

    
    def delete_entity(self, request: operations.DeleteEntityRequest) -> operations.DeleteEntityResponse:
        r"""deleteEntity
        Deletes an Entity

        ## Activity

        If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityDeleted`
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteEntityRequest, base_url, '/v1/entity/{slug}/{id}', request)
        headers = {}
        query_params = utils.get_query_params(operations.DeleteEntityRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteEntityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def get_entity(self, request: operations.GetEntityRequest) -> operations.GetEntityResponse:
        r"""getEntity
        Gets Entity and relations by id.

        ## Relations

        When `hydrate=true`, relation attributes are replaced in-place with nested entity values.

        Example:
        ```json
        {
          \"_id\": \"123\",
          \"name\": \"parent\",
          \"_tags\": [\"parent\"],
          \"contacts\": {
            \"$relation\": [
              { \"entity_id\": \"456\", \"_tags\": [\"primary\"] },
              { \"entity_id\": \"789\", \"_tags\": [\"secondary\"] },
            ]
          },
          \"addresses\": {
            \"$relation_ref\": [
              { \"entity_id\": \"123\", \"_tags\": [\"primary\"], \"path\": \"address.0\" },
              { \"entity_id\": \"234\", \"_tags\": [\"secondary\"], \"path\": \"address.0\" },
            ]
          }
        }
        ```

        Becomes:
        ```json
        {
          \"_id\": \"123\",
          \"name\": \"parent\",
          \"_tags\": [\"parent\"],
          \"contacts\": [
            {
              \"$relation\": { \"entity_id\": \"456\", \"_tags\": [\"primary\"] },
              \"_id\": \"456\",
              \"name\": \"child 1\",
              \"_tags\": [\"child\"]
            },
            {
              \"$relation\": { \"entity_id\": \"789\", \"_tags\": [\"secondary\"] },
              \"_id\": \"789\",
              \"name\": \"child 2\",
              \"_tags\": [\"child\"]
            }
          ],
          \"addresses\": [
            {
              \"$relation_ref\": { \"entity_id\": \"123\", \"_tags\": [\"primary\"], \"path\": \"address.0\" },
              \"_id\": \"123\",
              \"address\": \"address 1\",
              \"_tags\": [\"child\"]
            },
            {
              \"$relation_ref\": { \"entity_id\": \"234\", \"_tags\": [\"secondary\"], \"path\": \"address.0\" },
              \"_id\": \"234\",
              \"address\": \"address 2\",
              \"_tags\": [\"child\"]
            }
          ]
        }
        ```
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetEntityRequest, base_url, '/v1/entity/{slug}/{id}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetEntityRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEntityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetEntity200ApplicationJSON])
                res.get_entity_200_application_json_object = out

        return res

    
    def patch_entity(self, request: operations.PatchEntityRequest) -> operations.PatchEntityResponse:
        r"""patchEntity
        Partially updates an entity with the passed in entity data.

        - If an _updated_at is passed and the server contains a newer version of the entity a `409` Error is returned

        ## Activity

        If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityUpdated`

        ## Relations

        To create a relation, store a property that defines a `$relation` array.

        Example:

        ```json
        {
          \"contacts\": {
            \"$relation\": [
              { \"entity_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" }
            ]
          }
        }
        ```

        The items in `$relation` support two properties:
        - `entity_id` - The ID of the entity to link
        - `_tags` - Tags or labels for the relation (optional)
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PatchEntityRequest, base_url, '/v1/entity/{slug}/{id}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PatchEntityRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchEntityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.entity_item = out
        elif http_res.status_code == 409:
            pass

        return res

    
    def search_entities(self, request: shared.EntitySearchParams) -> operations.SearchEntitiesResponse:
        r"""searchEntities
        Search for entities. Supports ordering and pagination. Lucene query syntax supported for complex querying.

        Passing comma-separated `x-epilot-org-id` is supported for cross-org entity search.

        ## Relations

        When `hydrate=true`, relation attributes are replaced in-place with nested entity values.

        Example:
        ```json
        {
          \"_id\": \"123\",
          \"name\": \"parent\",
          \"_tags\": [\"parent\"],
          \"contacts\": {
            \"$relation\": [
              { \"entity_id\": \"456\", \"_tags\": [\"primary\"] },
              { \"entity_id\": \"789\", \"_tags\": [\"secondary\"] },
            ]
          },
          \"addresses\": {
            \"$relation_ref\": [
              { \"entity_id\": \"123\", \"_tags\": [\"primary\"], \"path\": \"address.0\" },
              { \"entity_id\": \"234\", \"_tags\": [\"secondary\"], \"path\": \"address.0\" },
            ]
          }
        }
        ```

        Becomes:
        ```json
        {
          \"_id\": \"123\",
          \"name\": \"parent\",
          \"_tags\": [\"parent\"],
          \"contacts\": [
            {
              \"$relation\": { \"entity_id\": \"456\", \"_tags\": [\"primary\"] },
              \"_id\": \"456\",
              \"name\": \"child 1\",
              \"_tags\": [\"child\"]
            },
            {
              \"$relation\": { \"entity_id\": \"789\", \"_tags\": [\"secondary\"] },
              \"_id\": \"789\",
              \"name\": \"child 2\",
              \"_tags\": [\"child\"]
            }
          ],
          \"addresses\": [
            {
              \"$relation_ref\": { \"entity_id\": \"123\", \"_tags\": [\"primary\"], \"path\": \"address.0\" },
              \"_id\": \"123\",
              \"address\": \"address 1\",
              \"_tags\": [\"child\"]
            },
            {
              \"$relation_ref\": { \"entity_id\": \"234\", \"_tags\": [\"secondary\"], \"path\": \"address.0\" },
              \"_id\": \"234\",
              \"address\": \"address 2\",
              \"_tags\": [\"child\"]
            }
          ]
        }
        ```
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/v1/entity:search'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json;q=1, text/csv;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntitySearchResults])
                res.entity_search_results = out
            if utils.match_content_type(content_type, 'text/csv'):
                res.search_entities_200_text_csv_string = http_res.content

        return res

    
    def update_entity(self, request: operations.UpdateEntityRequest) -> operations.UpdateEntityResponse:
        r"""updateEntity
        Updates an Entity

        ## Activity

        If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityUpdated`

        ## Relations

        To create a relation, store a property that defines a `$relation` array.

        Example:

        ```json
        {
          \"contacts\": {
            \"$relation\": [
              { \"entity_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" }
            ]
          }
        }
        ```

        The items in `$relation` support two properties:
        - `entity_id` - The ID of the entity to link
        - `_tags` - Tags or labels for the relation (optional)
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpdateEntityRequest, base_url, '/v1/entity/{slug}/{id}', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UpdateEntityRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateEntityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.entity_item = out

        return res

    
    def upsert_entity(self, request: operations.UpsertEntityRequest) -> operations.UpsertEntityResponse:
        r"""upsertEntity
        Create or update an entity using `unique_key`

        - If no entities are matched, a new entity is created.
        - If exactly one entity is matched, a `PATCH`-style update is applied to the existing entity.
        - If more than one entity is matched a `409` Error is returned

        ## Activity

        If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityCreated` or `EntityUpdated`
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpsertEntityRequest, base_url, '/v1/entity/{slug}:upsert', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UpsertEntityRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpsertEntityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.entity_item = out
        elif http_res.status_code == 409:
            pass

        return res

    