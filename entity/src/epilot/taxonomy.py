"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from epilot import utils
from epilot.models import errors, operations, shared
from typing import Optional

class Taxonomy:
    r"""Entity classification with Taxonomies"""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def get_taxonomy(self, taxonomy_slug: str) -> operations.GetTaxonomyResponse:
        r"""getTaxonomy
        Get taxonomy by slug
        """
        request = operations.GetTaxonomyRequest(
            taxonomy_slug=taxonomy_slug,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTaxonomyRequest, base_url, '/v1/entity/taxonomies/{taxonomySlug}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaxonomyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Taxonomy])
                res.taxonomy = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def list_taxonomies(self) -> operations.ListTaxonomiesResponse:
        r"""listTaxonomies
        List taxonomies in an organisation
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/v1/entity/listTaxonomies'
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTaxonomiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTaxonomies200ApplicationJSON])
                res.list_taxonomies_200_application_json_object = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def taxonomies_classifications_search(self, taxonomy_slug: str, request_body: Optional[operations.TaxonomiesClassificationsSearchRequestBody] = None) -> operations.TaxonomiesClassificationsSearchResponse:
        r"""taxonomiesClassificationsSearch
        List taxonomy classifications in an organisation based on taxonomy slug
        """
        request = operations.TaxonomiesClassificationsSearchRequest(
            taxonomy_slug=taxonomy_slug,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/v1/entity/taxonomies/classifications:search'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", False, True, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TaxonomiesClassificationsSearchRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaxonomiesClassificationsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TaxonomiesClassificationsSearch200ApplicationJSON])
                res.taxonomies_classifications_search_200_application_json_object = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def taxonomy_autocomplete(self, taxonomy_slug: str, query: Optional[str] = None, size: Optional[float] = None) -> operations.TaxonomyAutocompleteResponse:
        r"""taxonomyAutocomplete
        Taxonomies autocomplete
        """
        request = operations.TaxonomyAutocompleteRequest(
            taxonomy_slug=taxonomy_slug,
            query=query,
            size=size,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.TaxonomyAutocompleteRequest, base_url, '/v1/entity/taxonomies/{taxonomySlug}:autocomplete', request)
        headers = {}
        query_params = utils.get_query_params(operations.TaxonomyAutocompleteRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaxonomyAutocompleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TaxonomyAutocomplete200ApplicationJSON])
                res.taxonomy_autocomplete_200_application_json_object = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    def update_classifications_for_taxonomy(self, taxonomy_slug: str, classifications_update: Optional[shared.ClassificationsUpdate] = None) -> operations.UpdateClassificationsForTaxonomyResponse:
        r"""updateClassificationsForTaxonomy
        Update taxonomies in an organisation based in taxonomy slug
        """
        request = operations.UpdateClassificationsForTaxonomyRequest(
            taxonomy_slug=taxonomy_slug,
            classifications_update=classifications_update,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpdateClassificationsForTaxonomyRequest, base_url, '/v1/entity/taxonomies/{taxonomySlug}/classifications', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "classifications_update", False, True, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClassificationsForTaxonomyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateClassificationsForTaxonomy200ApplicationJSON])
                res.update_classifications_for_taxonomy_200_application_json_object = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    