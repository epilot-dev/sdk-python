"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SummaryAttribute:
    r"""Represents an expanded version of an attribute to be displayed in the list item summary.
    This configuration can be used in the following way:
    ```js
    {
      \"label\": \"Price components\"
      \"value\": \"{{item.prices.length}} price components\"
      \"show_as_tag\": true
      \"render_condition\": \"is_composite_price = \"true\"\"
    }
    ```
    The value field supports handlebar expressions from which you can pick any field from the entity state.
    """
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""Label to be shown on the top of the value."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""A static value or an handlebar expression."""
    feature_flag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feature_flag'), 'exclude': lambda f: f is None }})
    r"""Binds summary field visibility to the feature flag state."""
    render_condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('render_condition'), 'exclude': lambda f: f is None }})
    r"""Defines the conditional rendering expression for showing this field.
    When a valid expression is parsed, their evaluation defines the visibility of this attribute.
    Note: Empty or invalid expression have no effect on the field visibility.
    """
    setting_flag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setting_flag'), 'exclude': lambda f: f is None }})
    r"""Binds summary field visibility to the setting flag state."""
    show_as_tag: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_as_tag'), 'exclude': lambda f: f is None }})
    r"""Displays the value within a tag chip."""
    tag_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag_color'), 'exclude': lambda f: f is None }})
    r"""CSS hex color or CSS color name for the tag chip."""
    

