"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .addressrelationattribute import AddressRelationAttribute
from .automationattribute import AutomationAttribute
from .booleanattribute import BooleanAttribute
from .computedattribute import ComputedAttribute
from .consentattribute import ConsentAttribute
from .countryattribute import CountryAttribute
from .currencyattribute import CurrencyAttribute
from .dateattribute import DateAttribute
from .fileattribute import FileAttribute
from .internalattribute import InternalAttribute
from .internaluserattribute import InternalUserAttribute
from .invitationemailattribute import InvitationEmailAttribute
from .linkattribute import LinkAttribute
from .multiselectattribute import MultiSelectAttribute
from .numberattribute import NumberAttribute
from .orderedlistattribute import OrderedListAttribute
from .partnerorganisationattribute import PartnerOrganisationAttribute
from .partnerstatusattribute import PartnerStatusAttribute
from .paymentmethodrelationattribute import PaymentMethodRelationAttribute
from .purposeattribute import PurposeAttribute
from .relationattribute import RelationAttribute
from .repeatableattribute import RepeatableAttribute
from .selectattribute import SelectAttribute
from .sequenceattribute import SequenceAttribute
from .statusattribute import StatusAttribute
from .tagsattribute import TagsAttribute
from .textattribute import TextAttribute
from .userrelationattribute import UserRelationAttribute
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import Any, Dict, List, Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RequiredPermission:
    r"""Require a permission to display UI hook"""
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    resource: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UIHooks:
    hook: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hook') }})
    r"""name of the hook to use"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    component: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('component'), 'exclude': lambda f: f is None }})
    r"""the component to be dynamically loaded"""
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""Whether capability should be disabled"""
    group_expanded: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_expanded'), 'exclude': lambda f: f is None }})
    r"""Sets the group expand/collapse default state"""
    header: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header'), 'exclude': lambda f: f is None }})
    r"""Specific to Activity pilot"""
    icon: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon'), 'exclude': lambda f: f is None }})
    r"""Preview icon name(As in Base elements) for the capability"""
    import_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('import'), 'exclude': lambda f: f is None }})
    r"""package to be imported"""
    order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""render order (ascending)"""
    render_condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('render_condition'), 'exclude': lambda f: f is None }})
    required_permission: Optional[RequiredPermission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiredPermission'), 'exclude': lambda f: f is None }})
    r"""Require a permission to display UI hook"""
    route: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route'), 'exclude': lambda f: f is None }})
    r"""route for specified capability"""
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityCapability:
    r"""Capabilities the Entity has. Turn features on/off for entities."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique name for the capability"""
    purpose: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_purpose'), 'exclude': lambda f: f is None }})
    attributes: Optional[List[Union[TextAttribute, LinkAttribute, DateAttribute, CountryAttribute, BooleanAttribute, SelectAttribute, MultiSelectAttribute, StatusAttribute, SequenceAttribute, RelationAttribute, UserRelationAttribute, AddressRelationAttribute, PaymentMethodRelationAttribute, CurrencyAttribute, RepeatableAttribute, TagsAttribute, NumberAttribute, ConsentAttribute, InternalAttribute, OrderedListAttribute, FileAttribute, ComputedAttribute, PartnerStatusAttribute, InvitationEmailAttribute, AutomationAttribute, InternalUserAttribute, PurposeAttribute, PartnerOrganisationAttribute]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    feature_flag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feature_flag'), 'exclude': lambda f: f is None }})
    r"""This capability should only be active when the feature flag is enabled"""
    setting_flag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setting_flag'), 'exclude': lambda f: f is None }})
    r"""This capability should only be active when the setting is enabled"""
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Human readable title of the capability"""
    ui_hooks: Optional[List[UIHooks]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ui_hooks'), 'exclude': lambda f: f is None }})
    

