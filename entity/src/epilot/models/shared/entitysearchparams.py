"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import List, Optional


@dataclasses.dataclass
class EntitySearchParamsAggs:
    r"""Aggregation supported by ElasticSearch allows summarizing data as metrics, statistics, or other analytics."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntitySearchParams:
    q: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('q') }})
    r"""Lucene queries supported with ElasticSearch"""
    aggs: Optional[EntitySearchParamsAggs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggs'), 'exclude': lambda f: f is None }})
    r"""Aggregation supported by ElasticSearch allows summarizing data as metrics, statistics, or other analytics."""
    fields: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""List of entity fields to include in search results"""
    from_: Optional[int] = dataclasses.field(default=0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    hydrate: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hydrate'), 'exclude': lambda f: f is None }})
    r"""When true, enables entity hydration to resolve nested $relation & $relation_ref references in-place."""
    include_scores: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('include_scores'), 'exclude': lambda f: f is None }})
    r"""Adds a `_score` number field to results that can be used to rank by match score"""
    size: Optional[int] = dataclasses.field(default=10, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Max search size is 1000 with higher values defaulting to 1000"""
    sort: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort'), 'exclude': lambda f: f is None }})
    

