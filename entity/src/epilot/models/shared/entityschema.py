"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import addressrelationattribute as shared_addressrelationattribute
from ..shared import automationattribute as shared_automationattribute
from ..shared import booleanattribute as shared_booleanattribute
from ..shared import computedattribute as shared_computedattribute
from ..shared import consentattribute as shared_consentattribute
from ..shared import countryattribute as shared_countryattribute
from ..shared import currencyattribute as shared_currencyattribute
from ..shared import dateattribute as shared_dateattribute
from ..shared import entitycapability as shared_entitycapability
from ..shared import entitydefaultcreate as shared_entitydefaultcreate
from ..shared import entitydefaultedit as shared_entitydefaultedit
from ..shared import entitydefaulttable as shared_entitydefaulttable
from ..shared import entityviewdisabled as shared_entityviewdisabled
from ..shared import fileattribute as shared_fileattribute
from ..shared import internalattribute as shared_internalattribute
from ..shared import internaluserattribute as shared_internaluserattribute
from ..shared import invitationemailattribute as shared_invitationemailattribute
from ..shared import linkattribute as shared_linkattribute
from ..shared import multiselectattribute as shared_multiselectattribute
from ..shared import numberattribute as shared_numberattribute
from ..shared import orderedlistattribute as shared_orderedlistattribute
from ..shared import partnerorganisationattribute as shared_partnerorganisationattribute
from ..shared import partnerstatusattribute as shared_partnerstatusattribute
from ..shared import paymentmethodrelationattribute as shared_paymentmethodrelationattribute
from ..shared import purposeattribute as shared_purposeattribute
from ..shared import redirectentityview as shared_redirectentityview
from ..shared import relationattribute as shared_relationattribute
from ..shared import repeatableattribute as shared_repeatableattribute
from ..shared import searchmappings as shared_searchmappings
from ..shared import selectattribute as shared_selectattribute
from ..shared import sequenceattribute as shared_sequenceattribute
from ..shared import statusattribute as shared_statusattribute
from ..shared import summaryattribute as shared_summaryattribute
from ..shared import tagsattribute as shared_tagsattribute
from ..shared import textattribute as shared_textattribute
from ..shared import userrelationattribute as shared_userrelationattribute
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import Any, Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class EntitySchemaGroupSettingsInfoTooltipTitle:
    default: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default'), 'exclude': lambda f: f is None }})
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class EntitySchemaGroupSettings:
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    purpose: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_purpose'), 'exclude': lambda f: f is None }})
    expanded: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expanded'), 'exclude': lambda f: f is None }})
    feature_flag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feature_flag'), 'exclude': lambda f: f is None }})
    r"""This group should only be active when the feature flag is enabled"""
    info_tooltip_title: Optional[EntitySchemaGroupSettingsInfoTooltipTitle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info_tooltip_title'), 'exclude': lambda f: f is None }})
    order: Optional[int] = dataclasses.field(default=0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""Render order of the group"""
    render_condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('render_condition'), 'exclude': lambda f: f is None }})
    setting_flag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setting_flag'), 'exclude': lambda f: f is None }})
    r"""This group should only be active when the setting is enabled"""
    




@dataclasses.dataclass
class EntitySchemaUIConfigCreateView:
    pass



@dataclasses.dataclass
class EntitySchemaUIConfigEditView:
    pass



@dataclasses.dataclass
class EntitySchemaUIConfigListItemSummaryAttributes:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class EntitySchemaUIConfigListItem:
    summary_attributes: Optional[list[Union[shared_summaryattribute.SummaryAttribute, str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary_attributes'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class EntitySchemaUIConfigSharing:
    show_sharing_button: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_sharing_button'), 'exclude': lambda f: f is None }})
    r"""Show the sharing button in entity detail view"""
    




@dataclasses.dataclass
class EntitySchemaUIConfigSingleView:
    pass



@dataclasses.dataclass
class EntitySchemaUIConfigTableView:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class EntitySchemaUIConfig:
    create_view: Optional[Union[shared_entitydefaultcreate.EntityDefaultCreate, shared_redirectentityview.RedirectEntityView, shared_entityviewdisabled.EntityViewDisabled]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('create_view'), 'exclude': lambda f: f is None }})
    edit_view: Optional[Union[shared_entitydefaultedit.EntityDefaultEdit, shared_redirectentityview.RedirectEntityView, shared_entityviewdisabled.EntityViewDisabled]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edit_view'), 'exclude': lambda f: f is None }})
    list_item: Optional[EntitySchemaUIConfigListItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list_item'), 'exclude': lambda f: f is None }})
    sharing: Optional[EntitySchemaUIConfigSharing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharing'), 'exclude': lambda f: f is None }})
    single_view: Optional[Union[shared_entitydefaultedit.EntityDefaultEdit, shared_redirectentityview.RedirectEntityView, shared_entityviewdisabled.EntityViewDisabled]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_view'), 'exclude': lambda f: f is None }})
    table_view: Optional[Union[shared_entitydefaulttable.EntityDefaultTable, shared_redirectentityview.RedirectEntityView, shared_entityviewdisabled.EntityViewDisabled]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('table_view'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class EntitySchema:
    r"""The \\"type\\" of an Entity. Describes the shape. Includes Entity Attributes, Relations and Capabilities."""
    attributes: list[Union[shared_textattribute.TextAttribute, shared_linkattribute.LinkAttribute, shared_dateattribute.DateAttribute, shared_countryattribute.CountryAttribute, shared_booleanattribute.BooleanAttribute, shared_selectattribute.SelectAttribute, shared_multiselectattribute.MultiSelectAttribute, shared_statusattribute.StatusAttribute, shared_sequenceattribute.SequenceAttribute, shared_relationattribute.RelationAttribute, shared_userrelationattribute.UserRelationAttribute, shared_addressrelationattribute.AddressRelationAttribute, shared_paymentmethodrelationattribute.PaymentMethodRelationAttribute, shared_currencyattribute.CurrencyAttribute, shared_repeatableattribute.RepeatableAttribute, shared_tagsattribute.TagsAttribute, shared_numberattribute.NumberAttribute, shared_consentattribute.ConsentAttribute, shared_internalattribute.InternalAttribute, shared_orderedlistattribute.OrderedListAttribute, shared_fileattribute.FileAttribute, shared_computedattribute.ComputedAttribute, shared_partnerstatusattribute.PartnerStatusAttribute, shared_invitationemailattribute.InvitationEmailAttribute, shared_automationattribute.AutomationAttribute, shared_internaluserattribute.InternalUserAttribute, shared_purposeattribute.PurposeAttribute, shared_partnerorganisationattribute.PartnerOrganisationAttribute]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})
    r"""An ordered list of attributes the entity contains"""
    capabilities: list[shared_entitycapability.EntityCapability] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities') }})
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""User-friendly identifier for the entity schema"""
    plural: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plural') }})
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})
    r"""URL-friendly identifier for the entity schema"""
    blueprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blueprint'), 'exclude': lambda f: f is None }})
    r"""Reference to blueprint"""
    dialog_config: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dialog_config'), 'exclude': lambda f: f is None }})
    draft: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft'), 'exclude': lambda f: f is None }})
    enable_setting: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable_setting'), 'exclude': lambda f: f is None }})
    r"""This schema should only be active when one of the organization settings is enabled"""
    explicit_search_mappings: Optional[dict[str, shared_searchmappings.SearchMappings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('explicit_search_mappings'), 'exclude': lambda f: f is None }})
    r"""Advanced: explicit Elasticsearch index mapping definitions for entity data"""
    feature_flag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feature_flag'), 'exclude': lambda f: f is None }})
    r"""This schema should only be active when the feature flag is enabled"""
    group_settings: Optional[list[EntitySchemaGroupSettings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_settings'), 'exclude': lambda f: f is None }})
    r"""A dictionary of Group Titles and associated settings if present."""
    icon: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon'), 'exclude': lambda f: f is None }})
    layout_settings: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout_settings'), 'exclude': lambda f: f is None }})
    r"""Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
    - Managed Properties: are interpreted and transformed into layout styles
    - Un-managed Properties: are appended as styles into the attribute mounting node
    """
    published: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published'), 'exclude': lambda f: f is None }})
    title_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title_template'), 'exclude': lambda f: f is None }})
    r"""Template for rendering the title field. Uses handlebars"""
    ui_config: Optional[EntitySchemaUIConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ui_config'), 'exclude': lambda f: f is None }})
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    

