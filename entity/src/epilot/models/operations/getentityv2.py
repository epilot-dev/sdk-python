"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import entityitem as components_entityitem
from ...models.components import httpmetadata as components_httpmetadata
from typing import List, Optional


@dataclasses.dataclass
class GetEntityV2Request:
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Entity id"""
    slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'slug', 'style': 'simple', 'explode': False }})
    r"""Entity Type"""
    fields: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': False }})
    r"""List of entity fields to include in results"""
    hydrate: Optional[bool] = dataclasses.field(default=False, metadata={'query_param': { 'field_name': 'hydrate', 'style': 'form', 'explode': True }})
    r"""When true, enables entity hydration to resolve nested $relation & $relation_ref references in-place."""
    



@dataclasses.dataclass
class GetEntityV2Response:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field()
    entity_item: Optional[components_entityitem.EntityItem] = dataclasses.field(default=None)
    r"""Success"""
    

