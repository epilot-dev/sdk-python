"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from epilot_entity.types import BaseModel
from epilot_entity.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ListSavedViewsRequestTypedDict(TypedDict):
    fields: NotRequired[List[str]]
    from_: NotRequired[int]
    size: NotRequired[int]
    r"""Number of saved views to return"""
    slug: NotRequired[str]
    r"""Return views belonging to this schema"""
    sort: NotRequired[str]
    r"""The sort key to use if present"""
    

class ListSavedViewsRequest(BaseModel):
    fields: Annotated[Optional[List[str]], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    from_: Annotated[Optional[int], pydantic.Field(alias="from"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = 0
    size: Annotated[Optional[int], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = 80
    r"""Number of saved views to return"""
    slug: Annotated[Optional[str], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""Return views belonging to this schema"""
    sort: Annotated[Optional[str], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = "name:asc"
    r"""The sort key to use if present"""
    
