"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .searchfiltervalue import SearchFilterValue, SearchFilterValueTypedDict
from enum import Enum
from epilot_entity.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ExistsTypedDict(TypedDict):
    r"""Returns documents that have a value in the specified field.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html
    """
    
    field: str
    

class Exists(BaseModel):
    r"""Returns documents that have a value in the specified field.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html
    """
    
    field: str
    

class IdsTypedDict(TypedDict):
    r"""Returns documents based on their IDs.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-query.html
    """
    
    values: NotRequired[List[str]]
    

class Ids(BaseModel):
    r"""Returns documents based on their IDs.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-query.html
    """
    
    values: Optional[List[str]] = None
    

class Relation(str, Enum):
    r"""Indicates how the range query matches values for range fields."""
    INTERSECTS = "INTERSECTS"
    CONTAINS = "CONTAINS"
    WITHIN = "WITHIN"

class RangeTypedDict(TypedDict):
    format: NotRequired[str]
    r"""The date format used to parse date values."""
    gt: NotRequired[Nullable[SearchFilterValueTypedDict]]
    r"""A filter field value."""
    gte: NotRequired[Nullable[SearchFilterValueTypedDict]]
    r"""A filter field value."""
    lt: NotRequired[Nullable[SearchFilterValueTypedDict]]
    r"""A filter field value."""
    lte: NotRequired[Nullable[SearchFilterValueTypedDict]]
    r"""A filter field value."""
    relation: NotRequired[Relation]
    r"""Indicates how the range query matches values for range fields."""
    time_zone: NotRequired[str]
    r"""Coordinated Universal Time (UTC) offset or IANA time zone used to convert date values in the query to UTC."""
    

class Range(BaseModel):
    format: Optional[str] = None
    r"""The date format used to parse date values."""
    gt: OptionalNullable[SearchFilterValue] = UNSET
    r"""A filter field value."""
    gte: OptionalNullable[SearchFilterValue] = UNSET
    r"""A filter field value."""
    lt: OptionalNullable[SearchFilterValue] = UNSET
    r"""A filter field value."""
    lte: OptionalNullable[SearchFilterValue] = UNSET
    r"""A filter field value."""
    relation: Optional[Relation] = None
    r"""Indicates how the range query matches values for range fields."""
    time_zone: Optional[str] = None
    r"""Coordinated Universal Time (UTC) offset or IANA time zone used to convert date values in the query to UTC."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["format", "gt", "gte", "lt", "lte", "relation", "time_zone"]
        nullable_fields = ["gt", "gte", "lt", "lte"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class SearchFilterTypedDict(TypedDict):
    dollar_and: NotRequired[List[SearchFilterTypedDict]]
    r"""A subset of simplified Elasticsearch query clauses. The default operator is a logical AND. Use nested $and, $or, $not to combine filters using different logical operators."""
    dollar_not: NotRequired[List[SearchFilterTypedDict]]
    r"""A subset of simplified Elasticsearch query clauses. The default operator is a logical AND. Use nested $and, $or, $not to combine filters using different logical operators."""
    dollar_or: NotRequired[List[SearchFilterTypedDict]]
    r"""A subset of simplified Elasticsearch query clauses. The default operator is a logical AND. Use nested $and, $or, $not to combine filters using different logical operators."""
    exists: NotRequired[ExistsTypedDict]
    r"""Returns documents that have a value in the specified field.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html
    """
    ids: NotRequired[IdsTypedDict]
    r"""Returns documents based on their IDs.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-query.html
    """
    range: NotRequired[Dict[str, RangeTypedDict]]
    r"""Returns documents with fields that have terms within a certain range.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html
    """
    term: NotRequired[Dict[str, SearchFilterValueTypedDict]]
    r"""Returns documents that contain an exact term in a provided field.

    To return a document, the query term must exactly match the queried field's value, including whitespace and capitalization.

    You likely DO NOT want to use this filter on text fields and want to target its .keyword instead.

    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html
    """
    terms: NotRequired[Dict[str, List[SearchFilterValueTypedDict]]]
    r"""Returns documents that contain one of the exact terms in a provided field. See term filter for more info.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html
    """
    

class SearchFilter(BaseModel):
    dollar_and: Annotated[Optional[List[SearchFilter]], pydantic.Field(alias="$and")] = None
    r"""A subset of simplified Elasticsearch query clauses. The default operator is a logical AND. Use nested $and, $or, $not to combine filters using different logical operators."""
    dollar_not: Annotated[Optional[List[SearchFilter]], pydantic.Field(alias="$not")] = None
    r"""A subset of simplified Elasticsearch query clauses. The default operator is a logical AND. Use nested $and, $or, $not to combine filters using different logical operators."""
    dollar_or: Annotated[Optional[List[SearchFilter]], pydantic.Field(alias="$or")] = None
    r"""A subset of simplified Elasticsearch query clauses. The default operator is a logical AND. Use nested $and, $or, $not to combine filters using different logical operators."""
    exists: Optional[Exists] = None
    r"""Returns documents that have a value in the specified field.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html
    """
    ids: Optional[Ids] = None
    r"""Returns documents based on their IDs.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-ids-query.html
    """
    range: Optional[Dict[str, Range]] = None
    r"""Returns documents with fields that have terms within a certain range.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html
    """
    term: Optional[Dict[str, SearchFilterValue]] = None
    r"""Returns documents that contain an exact term in a provided field.

    To return a document, the query term must exactly match the queried field's value, including whitespace and capitalization.

    You likely DO NOT want to use this filter on text fields and want to target its .keyword instead.

    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html
    """
    terms: Optional[Dict[str, List[SearchFilterValue]]] = None
    r"""Returns documents that contain one of the exact terms in a provided field. See term filter for more info.
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html
    """
    
