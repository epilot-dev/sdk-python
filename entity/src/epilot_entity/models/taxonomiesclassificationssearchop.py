"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .taxonomyclassification import TaxonomyClassification, TaxonomyClassificationTypedDict
from epilot_entity.types import BaseModel
from epilot_entity.utils import FieldMetadata, QueryParamMetadata, RequestMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class TaxonomiesClassificationsSearchRequestBodyTypedDict(TypedDict):
    classification_ids: NotRequired[List[str]]
    

class TaxonomiesClassificationsSearchRequestBody(BaseModel):
    classification_ids: Annotated[Optional[List[str]], pydantic.Field(alias="classificationIds")] = None
    

class TaxonomiesClassificationsSearchRequestTypedDict(TypedDict):
    request_body: NotRequired[TaxonomiesClassificationsSearchRequestBodyTypedDict]
    query: NotRequired[str]
    r"""Input to search"""
    taxonomy_slug: NotRequired[str]
    r"""Taxonomy slug"""
    

class TaxonomiesClassificationsSearchRequest(BaseModel):
    request_body: Annotated[Optional[TaxonomiesClassificationsSearchRequestBody], FieldMetadata(request=RequestMetadata(media_type="application/json"))] = None
    query: Annotated[Optional[str], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""Input to search"""
    taxonomy_slug: Annotated[Optional[str], pydantic.Field(alias="taxonomySlug"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""Taxonomy slug"""
    

class TaxonomiesClassificationsSearchResponseBodyTypedDict(TypedDict):
    r"""Returns the classifications for the taxonomy slug provided"""
    
    results: NotRequired[List[TaxonomyClassificationTypedDict]]
    

class TaxonomiesClassificationsSearchResponseBody(BaseModel):
    r"""Returns the classifications for the taxonomy slug provided"""
    
    results: Optional[List[TaxonomyClassification]] = None
    
