"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .entityacl import EntityACL, EntityACLTypedDict
from .entityowner import EntityOwner, EntityOwnerTypedDict
from .settingflag import SettingFlag, SettingFlagTypedDict
from .summaryfield import SummaryField, SummaryFieldTypedDict
from datetime import datetime
from enum import Enum
from epilot_entity.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import ConfigDict, model_serializer
from typing import Any, Dict, List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class RelationAttributeActionType(str, Enum):
    r"""The action type. Currently supported actions:

    | action | description |
    |--------|-------------|
    | add_existing | Enables the user to pick an existing entity to link as relation |
    | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
    | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |

    """
    ADD_EXISTING = "add_existing"
    CREATE_NEW = "create_new"
    CREATE_FROM_EXISTING = "create_from_existing"

class RelationAttributeNewEntityItemTypedDict(TypedDict):
    created_at: Nullable[datetime]
    id: str
    org: str
    r"""Organization Id the entity belongs to"""
    schema_: str
    r"""URL-friendly identifier for the entity schema"""
    title: Nullable[str]
    r"""Title of entity"""
    updated_at: Nullable[datetime]
    acl: NotRequired[EntityACLTypedDict]
    r"""Access control list (ACL) for an entity. Defines sharing access to external orgs or users."""
    owners: NotRequired[List[EntityOwnerTypedDict]]
    tags: NotRequired[Nullable[List[str]]]
    

class RelationAttributeNewEntityItem(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    created_at: Annotated[Nullable[datetime], pydantic.Field(alias="_created_at")]
    id: Annotated[str, pydantic.Field(alias="_id")]
    org: Annotated[str, pydantic.Field(alias="_org")]
    r"""Organization Id the entity belongs to"""
    schema_: Annotated[str, pydantic.Field(alias="_schema")]
    r"""URL-friendly identifier for the entity schema"""
    title: Annotated[Nullable[str], pydantic.Field(alias="_title")]
    r"""Title of entity"""
    updated_at: Annotated[Nullable[datetime], pydantic.Field(alias="_updated_at")]
    acl: Annotated[Optional[EntityACL], pydantic.Field(alias="_acl")] = None
    r"""Access control list (ACL) for an entity. Defines sharing access to external orgs or users."""
    owners: Annotated[Optional[List[EntityOwner]], pydantic.Field(alias="_owners")] = None
    tags: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="_tags")] = UNSET
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["_acl", "_owners", "_tags"]
        nullable_fields = ["_created_at", "_title", "_updated_at", "_tags"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class RelationAttributeActionsTypedDict(TypedDict):
    action_type: NotRequired[RelationAttributeActionType]
    r"""The action type. Currently supported actions:

    | action | description |
    |--------|-------------|
    | add_existing | Enables the user to pick an existing entity to link as relation |
    | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
    | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |

    """
    default: NotRequired[bool]
    r"""Sets the action as the default action, visible as the main action button."""
    feature_flag: NotRequired[str]
    r"""Name of the feature flag that enables this action"""
    label: NotRequired[str]
    r"""The action label or action translation key (i18n)"""
    new_entity_item: NotRequired[RelationAttributeNewEntityItemTypedDict]
    settings_flag: NotRequired[List[SettingFlagTypedDict]]
    r"""This action should only be active when all the settings have the correct value"""
    

class RelationAttributeActions(BaseModel):
    action_type: Optional[RelationAttributeActionType] = None
    r"""The action type. Currently supported actions:

    | action | description |
    |--------|-------------|
    | add_existing | Enables the user to pick an existing entity to link as relation |
    | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
    | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |

    """
    default: Optional[bool] = None
    r"""Sets the action as the default action, visible as the main action button."""
    feature_flag: Optional[str] = None
    r"""Name of the feature flag that enables this action"""
    label: Optional[str] = None
    r"""The action label or action translation key (i18n)"""
    new_entity_item: Optional[RelationAttributeNewEntityItem] = None
    settings_flag: Optional[List[SettingFlag]] = None
    r"""This action should only be active when all the settings have the correct value"""
    

class RelationAttributeConstraintsTypedDict(TypedDict):
    r"""A set of constraints applicable to the attribute.
    These constraints should and will be enforced by the attribute renderer.

    """
    
    

class RelationAttributeConstraints(BaseModel):
    r"""A set of constraints applicable to the attribute.
    These constraints should and will be enforced by the attribute renderer.

    """
    
    

class RelationAttributeDrawerSize(str, Enum):
    SMALL = "small"
    MEDIUM = "medium"
    LARGE = "large"

class RelationAttributeEditMode(str, Enum):
    LIST_VIEW = "list-view"

class RelationAttributeInfoHelpersTypedDict(TypedDict):
    r"""A set of configurations meant to document and assist the user in filling the attribute."""
    
    hint_custom_component: NotRequired[str]
    r"""The name of the custom component to be used as the hint helper.
    The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
    When specified it overrides the `hint_text` or `hint_text_key` configuration.

    """
    hint_text: NotRequired[str]
    r"""The text to be displayed in the attribute hint helper.
    When specified it overrides the `hint_text_key` configuration.

    """
    hint_text_key: NotRequired[str]
    r"""The key of the hint text to be displayed in the attribute hint helper.
    The key should be a valid i18n key.

    """
    hint_tooltip_placement: NotRequired[str]
    r"""The placement of the hint tooltip.
    The value should be a valid `@mui/core` tooltip placement.

    """
    

class RelationAttributeInfoHelpers(BaseModel):
    r"""A set of configurations meant to document and assist the user in filling the attribute."""
    
    hint_custom_component: Optional[str] = None
    r"""The name of the custom component to be used as the hint helper.
    The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
    When specified it overrides the `hint_text` or `hint_text_key` configuration.

    """
    hint_text: Optional[str] = None
    r"""The text to be displayed in the attribute hint helper.
    When specified it overrides the `hint_text_key` configuration.

    """
    hint_text_key: Optional[str] = None
    r"""The key of the hint text to be displayed in the attribute hint helper.
    The key should be a valid i18n key.

    """
    hint_tooltip_placement: Optional[str] = None
    r"""The placement of the hint tooltip.
    The value should be a valid `@mui/core` tooltip placement.

    """
    

class RelationAttributeRelationAffinityMode(str, Enum):
    r"""Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity."""
    WEAK = "weak"
    STRONG = "strong"

class RelationAttributeRelationType(str, Enum):
    HAS_MANY = "has_many"
    HAS_ONE = "has_one"

RelationAttributeSummaryFieldsTypedDict = Union[SummaryFieldTypedDict, str]


RelationAttributeSummaryFields = Union[SummaryField, str]


class RelationAttributeType(str, Enum):
    RELATION = "relation"

class RelationAttributeTypedDict(TypedDict):
    r"""Entity Relationship"""
    
    label: str
    name: str
    purpose: NotRequired[List[str]]
    actions: NotRequired[List[RelationAttributeActionsTypedDict]]
    add_button_label: NotRequired[str]
    r"""Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is."""
    allowed_schemas: NotRequired[List[str]]
    constraints: NotRequired[RelationAttributeConstraintsTypedDict]
    r"""A set of constraints applicable to the attribute.
    These constraints should and will be enforced by the attribute renderer.

    """
    default_value: NotRequired[Any]
    deprecated: NotRequired[bool]
    details_view_mode_enabled: NotRequired[bool]
    r"""Enables the preview, edition, and creation of relation items on a Master-Details view mode."""
    drawer_size: NotRequired[RelationAttributeDrawerSize]
    edit_mode: NotRequired[RelationAttributeEditMode]
    enable_relation_picker: NotRequired[bool]
    r"""When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link."""
    enable_relation_tags: NotRequired[bool]
    r"""When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item."""
    entity_builder_disable_edit: NotRequired[bool]
    r"""Setting to `true` disables editing the attribute on the entity builder UI"""
    feature_flag: NotRequired[str]
    r"""This attribute should only be active when the feature flag is enabled"""
    group: NotRequired[str]
    r"""Which group the attribute should appear in. Accepts group ID or group name"""
    has_primary: NotRequired[bool]
    hidden: NotRequired[bool]
    r"""Do not render attribute in entity views"""
    hide_label: NotRequired[bool]
    r"""When set to true, will hide the label of the field."""
    icon: NotRequired[str]
    id: NotRequired[str]
    r"""ID for the entity attribute"""
    info_helpers: NotRequired[RelationAttributeInfoHelpersTypedDict]
    r"""A set of configurations meant to document and assist the user in filling the attribute."""
    layout: NotRequired[str]
    order: NotRequired[int]
    r"""Attribute sort order (ascending) in group"""
    placeholder: NotRequired[str]
    preview_value_formatter: NotRequired[str]
    protected: NotRequired[bool]
    r"""Setting to `true` prevents the attribute from being modified / deleted"""
    readonly: NotRequired[bool]
    relation_affinity_mode: NotRequired[RelationAttributeRelationAffinityMode]
    r"""Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity."""
    relation_type: NotRequired[RelationAttributeRelationType]
    render_condition: NotRequired[str]
    r"""Defines the conditional rendering expression for showing this field.
    When a valid expression is parsed, their evaluation defines the visibility of this attribute.
    Note: Empty or invalid expression have no effect on the field visibility.

    """
    required: NotRequired[bool]
    reverse_attributes: NotRequired[Dict[str, str]]
    r"""Map of schema slug to target relation attribute"""
    search_placeholder: NotRequired[str]
    r"""Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is."""
    settings_flag: NotRequired[List[SettingFlagTypedDict]]
    r"""This attribute should only be active when all the settings have the correct value"""
    show_in_table: NotRequired[bool]
    r"""Render as a column in table views. When defined, overrides `hidden`"""
    sortable: NotRequired[bool]
    r"""Allow sorting by this attribute in table views if `show_in_table` is true"""
    summary_fields: NotRequired[List[RelationAttributeSummaryFieldsTypedDict]]
    type: NotRequired[RelationAttributeType]
    value_formatter: NotRequired[str]
    

class RelationAttribute(BaseModel):
    r"""Entity Relationship"""
    
    label: str
    name: str
    purpose: Annotated[Optional[List[str]], pydantic.Field(alias="_purpose")] = None
    actions: Optional[List[RelationAttributeActions]] = None
    add_button_label: Optional[str] = None
    r"""Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is."""
    allowed_schemas: Annotated[Optional[List[str]], pydantic.Field(alias="allowedSchemas")] = None
    constraints: Optional[RelationAttributeConstraints] = None
    r"""A set of constraints applicable to the attribute.
    These constraints should and will be enforced by the attribute renderer.

    """
    default_value: Optional[Any] = None
    deprecated: Optional[bool] = False
    details_view_mode_enabled: Optional[bool] = False
    r"""Enables the preview, edition, and creation of relation items on a Master-Details view mode."""
    drawer_size: Optional[RelationAttributeDrawerSize] = None
    edit_mode: Optional[RelationAttributeEditMode] = None
    enable_relation_picker: Optional[bool] = True
    r"""When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link."""
    enable_relation_tags: Optional[bool] = True
    r"""When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item."""
    entity_builder_disable_edit: Optional[bool] = False
    r"""Setting to `true` disables editing the attribute on the entity builder UI"""
    feature_flag: Optional[str] = None
    r"""This attribute should only be active when the feature flag is enabled"""
    group: Optional[str] = None
    r"""Which group the attribute should appear in. Accepts group ID or group name"""
    has_primary: Optional[bool] = None
    hidden: Optional[bool] = False
    r"""Do not render attribute in entity views"""
    hide_label: Optional[bool] = None
    r"""When set to true, will hide the label of the field."""
    icon: Optional[str] = None
    id: Optional[str] = None
    r"""ID for the entity attribute"""
    info_helpers: Optional[RelationAttributeInfoHelpers] = None
    r"""A set of configurations meant to document and assist the user in filling the attribute."""
    layout: Optional[str] = None
    order: Optional[int] = None
    r"""Attribute sort order (ascending) in group"""
    placeholder: Optional[str] = None
    preview_value_formatter: Optional[str] = None
    protected: Optional[bool] = None
    r"""Setting to `true` prevents the attribute from being modified / deleted"""
    readonly: Optional[bool] = False
    relation_affinity_mode: Optional[RelationAttributeRelationAffinityMode] = None
    r"""Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity."""
    relation_type: Optional[RelationAttributeRelationType] = None
    render_condition: Optional[str] = None
    r"""Defines the conditional rendering expression for showing this field.
    When a valid expression is parsed, their evaluation defines the visibility of this attribute.
    Note: Empty or invalid expression have no effect on the field visibility.

    """
    required: Optional[bool] = False
    reverse_attributes: Optional[Dict[str, str]] = None
    r"""Map of schema slug to target relation attribute"""
    search_placeholder: Optional[str] = None
    r"""Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is."""
    settings_flag: Optional[List[SettingFlag]] = None
    r"""This attribute should only be active when all the settings have the correct value"""
    show_in_table: Optional[bool] = None
    r"""Render as a column in table views. When defined, overrides `hidden`"""
    sortable: Optional[bool] = True
    r"""Allow sorting by this attribute in table views if `show_in_table` is true"""
    summary_fields: Optional[List[RelationAttributeSummaryFields]] = None
    type: Optional[RelationAttributeType] = None
    value_formatter: Optional[str] = None
    

class RelationAttributeNewEntityItemInputTypedDict(TypedDict):
    id: str
    schema_: str
    r"""URL-friendly identifier for the entity schema"""
    title: Nullable[str]
    r"""Title of entity"""
    acl: NotRequired[EntityACLTypedDict]
    r"""Access control list (ACL) for an entity. Defines sharing access to external orgs or users."""
    tags: NotRequired[Nullable[List[str]]]
    

class RelationAttributeNewEntityItemInput(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    id: Annotated[str, pydantic.Field(alias="_id")]
    schema_: Annotated[str, pydantic.Field(alias="_schema")]
    r"""URL-friendly identifier for the entity schema"""
    title: Annotated[Nullable[str], pydantic.Field(alias="_title")]
    r"""Title of entity"""
    acl: Annotated[Optional[EntityACL], pydantic.Field(alias="_acl")] = None
    r"""Access control list (ACL) for an entity. Defines sharing access to external orgs or users."""
    tags: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="_tags")] = UNSET
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["_acl", "_tags"]
        nullable_fields = ["_title", "_tags"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class RelationAttributeActionsInputTypedDict(TypedDict):
    action_type: NotRequired[RelationAttributeActionType]
    r"""The action type. Currently supported actions:

    | action | description |
    |--------|-------------|
    | add_existing | Enables the user to pick an existing entity to link as relation |
    | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
    | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |

    """
    default: NotRequired[bool]
    r"""Sets the action as the default action, visible as the main action button."""
    feature_flag: NotRequired[str]
    r"""Name of the feature flag that enables this action"""
    label: NotRequired[str]
    r"""The action label or action translation key (i18n)"""
    new_entity_item: NotRequired[RelationAttributeNewEntityItemInputTypedDict]
    settings_flag: NotRequired[List[SettingFlagTypedDict]]
    r"""This action should only be active when all the settings have the correct value"""
    

class RelationAttributeActionsInput(BaseModel):
    action_type: Optional[RelationAttributeActionType] = None
    r"""The action type. Currently supported actions:

    | action | description |
    |--------|-------------|
    | add_existing | Enables the user to pick an existing entity to link as relation |
    | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
    | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |

    """
    default: Optional[bool] = None
    r"""Sets the action as the default action, visible as the main action button."""
    feature_flag: Optional[str] = None
    r"""Name of the feature flag that enables this action"""
    label: Optional[str] = None
    r"""The action label or action translation key (i18n)"""
    new_entity_item: Optional[RelationAttributeNewEntityItemInput] = None
    settings_flag: Optional[List[SettingFlag]] = None
    r"""This action should only be active when all the settings have the correct value"""
    

class RelationAttributeInputTypedDict(TypedDict):
    r"""Entity Relationship"""
    
    label: str
    name: str
    purpose: NotRequired[List[str]]
    actions: NotRequired[List[RelationAttributeActionsInputTypedDict]]
    add_button_label: NotRequired[str]
    r"""Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is."""
    allowed_schemas: NotRequired[List[str]]
    constraints: NotRequired[RelationAttributeConstraintsTypedDict]
    r"""A set of constraints applicable to the attribute.
    These constraints should and will be enforced by the attribute renderer.

    """
    default_value: NotRequired[Any]
    deprecated: NotRequired[bool]
    details_view_mode_enabled: NotRequired[bool]
    r"""Enables the preview, edition, and creation of relation items on a Master-Details view mode."""
    drawer_size: NotRequired[RelationAttributeDrawerSize]
    edit_mode: NotRequired[RelationAttributeEditMode]
    enable_relation_picker: NotRequired[bool]
    r"""When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link."""
    enable_relation_tags: NotRequired[bool]
    r"""When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item."""
    entity_builder_disable_edit: NotRequired[bool]
    r"""Setting to `true` disables editing the attribute on the entity builder UI"""
    feature_flag: NotRequired[str]
    r"""This attribute should only be active when the feature flag is enabled"""
    group: NotRequired[str]
    r"""Which group the attribute should appear in. Accepts group ID or group name"""
    has_primary: NotRequired[bool]
    hidden: NotRequired[bool]
    r"""Do not render attribute in entity views"""
    hide_label: NotRequired[bool]
    r"""When set to true, will hide the label of the field."""
    icon: NotRequired[str]
    id: NotRequired[str]
    r"""ID for the entity attribute"""
    info_helpers: NotRequired[RelationAttributeInfoHelpersTypedDict]
    r"""A set of configurations meant to document and assist the user in filling the attribute."""
    layout: NotRequired[str]
    order: NotRequired[int]
    r"""Attribute sort order (ascending) in group"""
    placeholder: NotRequired[str]
    preview_value_formatter: NotRequired[str]
    protected: NotRequired[bool]
    r"""Setting to `true` prevents the attribute from being modified / deleted"""
    readonly: NotRequired[bool]
    relation_affinity_mode: NotRequired[RelationAttributeRelationAffinityMode]
    r"""Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity."""
    relation_type: NotRequired[RelationAttributeRelationType]
    render_condition: NotRequired[str]
    r"""Defines the conditional rendering expression for showing this field.
    When a valid expression is parsed, their evaluation defines the visibility of this attribute.
    Note: Empty or invalid expression have no effect on the field visibility.

    """
    required: NotRequired[bool]
    reverse_attributes: NotRequired[Dict[str, str]]
    r"""Map of schema slug to target relation attribute"""
    search_placeholder: NotRequired[str]
    r"""Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is."""
    settings_flag: NotRequired[List[SettingFlagTypedDict]]
    r"""This attribute should only be active when all the settings have the correct value"""
    show_in_table: NotRequired[bool]
    r"""Render as a column in table views. When defined, overrides `hidden`"""
    sortable: NotRequired[bool]
    r"""Allow sorting by this attribute in table views if `show_in_table` is true"""
    summary_fields: NotRequired[List[RelationAttributeSummaryFieldsTypedDict]]
    type: NotRequired[RelationAttributeType]
    value_formatter: NotRequired[str]
    

class RelationAttributeInput(BaseModel):
    r"""Entity Relationship"""
    
    label: str
    name: str
    purpose: Annotated[Optional[List[str]], pydantic.Field(alias="_purpose")] = None
    actions: Optional[List[RelationAttributeActionsInput]] = None
    add_button_label: Optional[str] = None
    r"""Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is."""
    allowed_schemas: Annotated[Optional[List[str]], pydantic.Field(alias="allowedSchemas")] = None
    constraints: Optional[RelationAttributeConstraints] = None
    r"""A set of constraints applicable to the attribute.
    These constraints should and will be enforced by the attribute renderer.

    """
    default_value: Optional[Any] = None
    deprecated: Optional[bool] = False
    details_view_mode_enabled: Optional[bool] = False
    r"""Enables the preview, edition, and creation of relation items on a Master-Details view mode."""
    drawer_size: Optional[RelationAttributeDrawerSize] = None
    edit_mode: Optional[RelationAttributeEditMode] = None
    enable_relation_picker: Optional[bool] = True
    r"""When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link."""
    enable_relation_tags: Optional[bool] = True
    r"""When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item."""
    entity_builder_disable_edit: Optional[bool] = False
    r"""Setting to `true` disables editing the attribute on the entity builder UI"""
    feature_flag: Optional[str] = None
    r"""This attribute should only be active when the feature flag is enabled"""
    group: Optional[str] = None
    r"""Which group the attribute should appear in. Accepts group ID or group name"""
    has_primary: Optional[bool] = None
    hidden: Optional[bool] = False
    r"""Do not render attribute in entity views"""
    hide_label: Optional[bool] = None
    r"""When set to true, will hide the label of the field."""
    icon: Optional[str] = None
    id: Optional[str] = None
    r"""ID for the entity attribute"""
    info_helpers: Optional[RelationAttributeInfoHelpers] = None
    r"""A set of configurations meant to document and assist the user in filling the attribute."""
    layout: Optional[str] = None
    order: Optional[int] = None
    r"""Attribute sort order (ascending) in group"""
    placeholder: Optional[str] = None
    preview_value_formatter: Optional[str] = None
    protected: Optional[bool] = None
    r"""Setting to `true` prevents the attribute from being modified / deleted"""
    readonly: Optional[bool] = False
    relation_affinity_mode: Optional[RelationAttributeRelationAffinityMode] = None
    r"""Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity."""
    relation_type: Optional[RelationAttributeRelationType] = None
    render_condition: Optional[str] = None
    r"""Defines the conditional rendering expression for showing this field.
    When a valid expression is parsed, their evaluation defines the visibility of this attribute.
    Note: Empty or invalid expression have no effect on the field visibility.

    """
    required: Optional[bool] = False
    reverse_attributes: Optional[Dict[str, str]] = None
    r"""Map of schema slug to target relation attribute"""
    search_placeholder: Optional[str] = None
    r"""Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is."""
    settings_flag: Optional[List[SettingFlag]] = None
    r"""This attribute should only be active when all the settings have the correct value"""
    show_in_table: Optional[bool] = None
    r"""Render as a column in table views. When defined, overrides `hidden`"""
    sortable: Optional[bool] = True
    r"""Allow sorting by this attribute in table views if `show_in_table` is true"""
    summary_fields: Optional[List[RelationAttributeSummaryFields]] = None
    type: Optional[RelationAttributeType] = None
    value_formatter: Optional[str] = None
    
