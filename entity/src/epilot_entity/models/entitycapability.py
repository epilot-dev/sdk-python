"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .attribute import Attribute, AttributeTypedDict
from .attribute_input import AttributeInput, AttributeInputTypedDict
from .settingflag import SettingFlag, SettingFlagTypedDict
from epilot_entity.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class RequiredPermissionTypedDict(TypedDict):
    r"""Require a permission to display UI hook"""
    
    action: str
    resource: NotRequired[str]
    

class RequiredPermission(BaseModel):
    r"""Require a permission to display UI hook"""
    
    action: str
    resource: Optional[str] = None
    

class UIHooksTypedDict(TypedDict):
    hook: str
    r"""name of the hook to use"""
    component: NotRequired[str]
    r"""the component to be dynamically loaded"""
    disabled: NotRequired[bool]
    r"""Whether capability should be disabled"""
    group_expanded: NotRequired[bool]
    r"""Sets the group expand/collapse default state"""
    header: NotRequired[bool]
    r"""Specific to Activity pilot"""
    icon: NotRequired[str]
    r"""Preview icon name(As in Base elements) for the capability"""
    import_: NotRequired[str]
    r"""package to be imported"""
    order: NotRequired[int]
    r"""render order (ascending)"""
    render_condition: NotRequired[str]
    required_permission: NotRequired[RequiredPermissionTypedDict]
    r"""Require a permission to display UI hook"""
    route: NotRequired[str]
    r"""route for specified capability"""
    title: NotRequired[str]
    

class UIHooks(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    hook: str
    r"""name of the hook to use"""
    component: Optional[str] = None
    r"""the component to be dynamically loaded"""
    disabled: Optional[bool] = None
    r"""Whether capability should be disabled"""
    group_expanded: Optional[bool] = None
    r"""Sets the group expand/collapse default state"""
    header: Optional[bool] = None
    r"""Specific to Activity pilot"""
    icon: Optional[str] = None
    r"""Preview icon name(As in Base elements) for the capability"""
    import_: Annotated[Optional[str], pydantic.Field(alias="import")] = None
    r"""package to be imported"""
    order: Optional[int] = None
    r"""render order (ascending)"""
    render_condition: Optional[str] = None
    required_permission: Annotated[Optional[RequiredPermission], pydantic.Field(alias="requiredPermission")] = None
    r"""Require a permission to display UI hook"""
    route: Optional[str] = None
    r"""route for specified capability"""
    title: Optional[str] = None
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    

class EntityCapabilityTypedDict(TypedDict):
    r"""Capabilities the Entity has. Turn features on/off for entities."""
    
    name: str
    r"""Unique name for the capability"""
    purpose: NotRequired[List[str]]
    attributes: NotRequired[List[AttributeTypedDict]]
    feature_flag: NotRequired[str]
    r"""This capability should only be active when the feature flag is enabled"""
    id: NotRequired[str]
    r"""ID for the entity capability"""
    settings_flag: NotRequired[List[SettingFlagTypedDict]]
    r"""This capability should only be active when all the settings have the correct value"""
    title: NotRequired[str]
    r"""Human readable title of the capability"""
    ui_hooks: NotRequired[List[UIHooksTypedDict]]
    

class EntityCapability(BaseModel):
    r"""Capabilities the Entity has. Turn features on/off for entities."""
    
    name: str
    r"""Unique name for the capability"""
    purpose: Annotated[Optional[List[str]], pydantic.Field(alias="_purpose")] = None
    attributes: Optional[List[Attribute]] = None
    feature_flag: Optional[str] = None
    r"""This capability should only be active when the feature flag is enabled"""
    id: Optional[str] = None
    r"""ID for the entity capability"""
    settings_flag: Optional[List[SettingFlag]] = None
    r"""This capability should only be active when all the settings have the correct value"""
    title: Optional[str] = None
    r"""Human readable title of the capability"""
    ui_hooks: Optional[List[UIHooks]] = None
    

class EntityCapabilityInputTypedDict(TypedDict):
    r"""Capabilities the Entity has. Turn features on/off for entities."""
    
    name: str
    r"""Unique name for the capability"""
    purpose: NotRequired[List[str]]
    attributes: NotRequired[List[AttributeInputTypedDict]]
    feature_flag: NotRequired[str]
    r"""This capability should only be active when the feature flag is enabled"""
    id: NotRequired[str]
    r"""ID for the entity capability"""
    settings_flag: NotRequired[List[SettingFlagTypedDict]]
    r"""This capability should only be active when all the settings have the correct value"""
    title: NotRequired[str]
    r"""Human readable title of the capability"""
    ui_hooks: NotRequired[List[UIHooksTypedDict]]
    

class EntityCapabilityInput(BaseModel):
    r"""Capabilities the Entity has. Turn features on/off for entities."""
    
    name: str
    r"""Unique name for the capability"""
    purpose: Annotated[Optional[List[str]], pydantic.Field(alias="_purpose")] = None
    attributes: Optional[List[AttributeInput]] = None
    feature_flag: Optional[str] = None
    r"""This capability should only be active when the feature flag is enabled"""
    id: Optional[str] = None
    r"""ID for the entity capability"""
    settings_flag: Optional[List[SettingFlag]] = None
    r"""This capability should only be active when all the settings have the correct value"""
    title: Optional[str] = None
    r"""Human readable title of the capability"""
    ui_hooks: Optional[List[UIHooks]] = None
    
