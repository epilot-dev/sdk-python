"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .attribute_input import AttributeInput, AttributeInputTypedDict
from .entityaction import EntityAction, EntityActionTypedDict
from .entitycapability import EntityCapabilityInput, EntityCapabilityInputTypedDict
from .entitydefaultcreate import EntityDefaultCreate, EntityDefaultCreateTypedDict
from .entitydefaultedit import EntityDefaultEdit, EntityDefaultEditTypedDict
from .entitydefaulttable import EntityDefaultTable, EntityDefaultTableTypedDict
from .entityschemagroup import EntitySchemaGroup, EntitySchemaGroupTypedDict
from .entityviewdisabled import EntityViewDisabled, EntityViewDisabledTypedDict
from .redirectentityview import RedirectEntityView, RedirectEntityViewTypedDict
from .searchmappings import SearchMappings, SearchMappingsTypedDict
from .summaryattribute import SummaryAttribute, SummaryAttributeTypedDict
from epilot_entity.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict, Union
from typing_extensions import NotRequired


class LayoutSettingsTypedDict(TypedDict):
    r"""Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
    - Managed Properties: are interpreted and transformed into layout styles
    - Un-managed Properties: are appended as styles into the attribute mounting node

    """
    
    grid_gap: NotRequired[str]
    r"""Defines the grid gap for the mounting node of the attribute."""
    grid_template_columns: NotRequired[str]
    r"""Defines the grid column template for the mounting node of the attribute."""
    

class LayoutSettings(BaseModel):
    r"""Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
    - Managed Properties: are interpreted and transformed into layout styles
    - Un-managed Properties: are appended as styles into the attribute mounting node

    """
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    grid_gap: Optional[str] = None
    r"""Defines the grid gap for the mounting node of the attribute."""
    grid_template_columns: Optional[str] = None
    r"""Defines the grid column template for the mounting node of the attribute."""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    

CreateViewTypedDict = Union[EntityViewDisabledTypedDict, EntityDefaultCreateTypedDict, RedirectEntityViewTypedDict]


CreateView = Union[EntityViewDisabled, EntityDefaultCreate, RedirectEntityView]


EditViewTypedDict = Union[EntityViewDisabledTypedDict, RedirectEntityViewTypedDict, EntityDefaultEditTypedDict]


EditView = Union[EntityViewDisabled, RedirectEntityView, EntityDefaultEdit]


SummaryAttributesTypedDict = Union[SummaryAttributeTypedDict, str]


SummaryAttributes = Union[SummaryAttribute, str]


class ListItemTypedDict(TypedDict):
    quick_actions: NotRequired[List[EntityActionTypedDict]]
    summary_attributes: NotRequired[List[SummaryAttributesTypedDict]]
    

class ListItem(BaseModel):
    quick_actions: Optional[List[EntityAction]] = None
    summary_attributes: Optional[List[SummaryAttributes]] = None
    

class SharingTypedDict(TypedDict):
    show_sharing_button: NotRequired[bool]
    r"""Show the sharing button in entity detail view"""
    

class Sharing(BaseModel):
    show_sharing_button: Optional[bool] = None
    r"""Show the sharing button in entity detail view"""
    

SingleViewTypedDict = Union[EntityViewDisabledTypedDict, RedirectEntityViewTypedDict, EntityDefaultEditTypedDict]


SingleView = Union[EntityViewDisabled, RedirectEntityView, EntityDefaultEdit]


TableViewTypedDict = Union[EntityViewDisabledTypedDict, RedirectEntityViewTypedDict, EntityDefaultTableTypedDict]


TableView = Union[EntityViewDisabled, RedirectEntityView, EntityDefaultTable]


class UIConfigTypedDict(TypedDict):
    create_view: NotRequired[CreateViewTypedDict]
    edit_view: NotRequired[EditViewTypedDict]
    list_item: NotRequired[ListItemTypedDict]
    sharing: NotRequired[SharingTypedDict]
    single_view: NotRequired[SingleViewTypedDict]
    table_view: NotRequired[TableViewTypedDict]
    

class UIConfig(BaseModel):
    create_view: Optional[CreateView] = None
    edit_view: Optional[EditView] = None
    list_item: Optional[ListItem] = None
    sharing: Optional[Sharing] = None
    single_view: Optional[SingleView] = None
    table_view: Optional[TableView] = None
    

class EntitySchemaTypedDict(TypedDict):
    r"""The \"type\" of an Entity. Describes the shape. Includes Entity Attributes, Relations and Capabilities."""
    
    attributes: List[AttributeInputTypedDict]
    r"""An ordered list of attributes the entity contains"""
    capabilities: List[EntityCapabilityInputTypedDict]
    name: str
    r"""User-friendly identifier for the entity schema"""
    plural: str
    slug: str
    r"""URL-friendly identifier for the entity schema"""
    blueprint: NotRequired[str]
    r"""Reference to blueprint"""
    dialog_config: NotRequired[Dict[str, Any]]
    draft: NotRequired[bool]
    enable_setting: NotRequired[List[str]]
    r"""This schema should only be active when one of the organization settings is enabled"""
    explicit_search_mappings: NotRequired[Dict[str, SearchMappingsTypedDict]]
    r"""Advanced: explicit Elasticsearch index mapping definitions for entity data

    """
    feature_flag: NotRequired[str]
    r"""This schema should only be active when the feature flag is enabled"""
    group_settings: NotRequired[List[EntitySchemaGroupTypedDict]]
    r"""A list of Group Titles and associated settings if present."""
    icon: NotRequired[str]
    layout_settings: NotRequired[LayoutSettingsTypedDict]
    r"""Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
    - Managed Properties: are interpreted and transformed into layout styles
    - Un-managed Properties: are appended as styles into the attribute mounting node

    """
    published: NotRequired[bool]
    title_template: NotRequired[str]
    r"""Template for rendering the title field. Uses handlebars"""
    ui_config: NotRequired[UIConfigTypedDict]
    version: NotRequired[int]
    

class EntitySchema(BaseModel):
    r"""The \"type\" of an Entity. Describes the shape. Includes Entity Attributes, Relations and Capabilities."""
    
    attributes: List[AttributeInput]
    r"""An ordered list of attributes the entity contains"""
    capabilities: List[EntityCapabilityInput]
    name: str
    r"""User-friendly identifier for the entity schema"""
    plural: str
    slug: str
    r"""URL-friendly identifier for the entity schema"""
    blueprint: Optional[str] = None
    r"""Reference to blueprint"""
    dialog_config: Optional[Dict[str, Any]] = None
    draft: Optional[bool] = None
    enable_setting: Optional[List[str]] = None
    r"""This schema should only be active when one of the organization settings is enabled"""
    explicit_search_mappings: Optional[Dict[str, SearchMappings]] = None
    r"""Advanced: explicit Elasticsearch index mapping definitions for entity data

    """
    feature_flag: Optional[str] = None
    r"""This schema should only be active when the feature flag is enabled"""
    group_settings: Optional[List[EntitySchemaGroup]] = None
    r"""A list of Group Titles and associated settings if present."""
    icon: Optional[str] = None
    layout_settings: Optional[LayoutSettings] = None
    r"""Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
    - Managed Properties: are interpreted and transformed into layout styles
    - Un-managed Properties: are appended as styles into the attribute mounting node

    """
    published: Optional[bool] = None
    title_template: Optional[str] = None
    r"""Template for rendering the title field. Uses handlebars"""
    ui_config: Optional[UIConfig] = None
    version: Optional[int] = None
    
