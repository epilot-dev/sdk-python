"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .s3reference import S3Reference, S3ReferenceTypedDict
from enum import Enum
from epilot_submission.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Schema(str, Enum):
    SUBMISSION = "submission"

class FilesTypedDict(TypedDict):
    s3ref: S3ReferenceTypedDict
    r"""S3 Reference from File API"""
    tags: NotRequired[List[str]]
    r"""List of tags for File entities"""
    filename: NotRequired[str]
    r"""Override the file name"""
    relation_tags: NotRequired[List[str]]
    r"""List of relation labels for File attachments"""
    

class Files(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    s3ref: S3Reference
    r"""S3 Reference from File API"""
    tags: Annotated[Optional[List[str]], pydantic.Field(alias="_tags")] = None
    r"""List of tags for File entities"""
    filename: Optional[str] = None
    r"""Override the file name"""
    relation_tags: Optional[List[str]] = None
    r"""List of relation labels for File attachments"""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    

class SubmissionEntityTypedDict(TypedDict):
    r"""The submission entity to create"""
    
    schema_: Schema
    description: NotRequired[str]
    r"""Readable description of the submission. Will be used as the title if passed"""
    files: NotRequired[List[FilesTypedDict]]
    r"""Files to attach to Submission Entity as a relation (s3refs from File API)

    """
    

class SubmissionEntity(BaseModel):
    r"""The submission entity to create"""
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    schema_: Annotated[Schema, pydantic.Field(alias="_schema")]
    description: Optional[str] = None
    r"""Readable description of the submission. Will be used as the title if passed"""
    files: Optional[List[Files]] = None
    r"""Files to attach to Submission Entity as a relation (s3refs from File API)

    """
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
