"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from epilot_user.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import ConfigDict, model_serializer
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ImageURITypedDict(TypedDict):
    original: NotRequired[str]
    thumbnail_32: NotRequired[str]
    

class ImageURI(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    original: Optional[str] = None
    thumbnail_32: Optional[str] = None
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    

class PropertiesTypedDict(TypedDict):
    name: str
    value: str
    

class Properties(BaseModel):
    name: str
    value: str
    

class UserTypedDict(TypedDict):
    email: str
    id: str
    r"""User's unique identifier"""
    name: str
    organization_id: str
    preferred_language: str
    properties: List[PropertiesTypedDict]
    roles: List[str]
    r"""Deprecated! Please use Permissions API instead"""
    display_name: NotRequired[str]
    image_uri: NotRequired[Nullable[ImageURITypedDict]]
    signature: NotRequired[str]
    

class User(BaseModel):
    email: str
    id: str
    r"""User's unique identifier"""
    name: Annotated[str, pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")]
    organization_id: str
    preferred_language: str
    properties: List[Properties]
    roles: Annotated[List[str], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")]
    r"""Deprecated! Please use Permissions API instead"""
    display_name: Annotated[Optional[str], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")] = None
    image_uri: OptionalNullable[ImageURI] = UNSET
    signature: Optional[str] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["display_name", "image_uri", "signature"]
        nullable_fields = ["image_uri"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
