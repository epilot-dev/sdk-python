"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .cognitodetails import CognitoDetails, CognitoDetailsTypedDict
from enum import Enum
from epilot_user.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class AddressTypedDict(TypedDict):
    city: NotRequired[Nullable[str]]
    country: NotRequired[Nullable[str]]
    postal_code: NotRequired[Nullable[str]]
    street: NotRequired[Nullable[str]]
    street_number: NotRequired[Nullable[str]]
    

class Address(BaseModel):
    city: OptionalNullable[str] = UNSET
    country: OptionalNullable[str] = UNSET
    postal_code: OptionalNullable[str] = UNSET
    street: OptionalNullable[str] = UNSET
    street_number: OptionalNullable[str] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["city", "country", "postal_code", "street", "street_number"]
        nullable_fields = ["city", "country", "postal_code", "street", "street_number"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class Type(str, Enum):
    VENDOR = "Vendor"
    PARTNER = "Partner"

class OrganizationTypedDict(TypedDict):
    address: NotRequired[AddressTypedDict]
    cognito_details: NotRequired[CognitoDetailsTypedDict]
    email: NotRequired[Nullable[str]]
    id: NotRequired[str]
    is_unlicensed_org: NotRequired[Nullable[bool]]
    logo_thumbnail_url: NotRequired[Nullable[str]]
    logo_url: NotRequired[Nullable[str]]
    name: NotRequired[Nullable[str]]
    phone: NotRequired[Nullable[str]]
    pricing_tier: NotRequired[Nullable[str]]
    signature: NotRequired[Nullable[str]]
    symbol: NotRequired[Nullable[str]]
    type: NotRequired[Nullable[Type]]
    website: NotRequired[Nullable[str]]
    

class Organization(BaseModel):
    address: Optional[Address] = None
    cognito_details: Optional[CognitoDetails] = None
    email: OptionalNullable[str] = UNSET
    id: Optional[str] = None
    is_unlicensed_org: OptionalNullable[bool] = UNSET
    logo_thumbnail_url: OptionalNullable[str] = UNSET
    logo_url: OptionalNullable[str] = UNSET
    name: OptionalNullable[str] = UNSET
    phone: OptionalNullable[str] = UNSET
    pricing_tier: OptionalNullable[str] = UNSET
    signature: OptionalNullable[str] = UNSET
    symbol: OptionalNullable[str] = UNSET
    type: OptionalNullable[Type] = UNSET
    website: OptionalNullable[str] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["address", "cognito_details", "email", "id", "is_unlicensed_org", "logo_thumbnail_url", "logo_url", "name", "phone", "pricing_tier", "signature", "symbol", "type", "website"]
        nullable_fields = ["email", "is_unlicensed_org", "logo_thumbnail_url", "logo_url", "name", "phone", "pricing_tier", "signature", "symbol", "type", "website"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
