"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from epilot_user.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import ConfigDict, model_serializer
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import NotRequired


class UserV2ImageURITypedDict(TypedDict):
    r"""User's custom profile image"""
    
    original: NotRequired[str]
    thumbnail_32: NotRequired[str]
    

class UserV2ImageURI(BaseModel):
    r"""User's custom profile image"""
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    original: Optional[str] = None
    thumbnail_32: Optional[str] = None
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    

class OverrideReleaseChannel(str, Enum):
    r"""This field is used to override the release channel for the user."""
    CANARY = "canary"
    RC = "rc"
    STABLE = "stable"

class UserV2PropertiesTypedDict(TypedDict):
    name: str
    value: str
    

class UserV2Properties(BaseModel):
    name: str
    value: str
    

class Status(str, Enum):
    ACTIVE = "Active"
    PENDING = "Pending"
    DEACTIVATED = "Deactivated"
    DELETED = "Deleted"

class UserV2TypedDict(TypedDict):
    created_at: NotRequired[str]
    custom_start_page: NotRequired[Nullable[str]]
    r"""User's start page after login"""
    department: NotRequired[Nullable[str]]
    r"""User's department"""
    display_name: NotRequired[str]
    r"""User's display name (default: email address)"""
    draft_email: NotRequired[Nullable[str]]
    r"""User's pending email address"""
    email: NotRequired[str]
    r"""User's email address"""
    favorites: NotRequired[Dict[str, Any]]
    feature_preferences: NotRequired[Nullable[Dict[str, Any]]]
    r"""User's feature preferences"""
    id: NotRequired[str]
    r"""User's unique identifier"""
    image_uri: NotRequired[Nullable[UserV2ImageURITypedDict]]
    r"""User's custom profile image"""
    is_signature_enabled: NotRequired[Nullable[bool]]
    r"""Whether the user's signature is enabled"""
    mfa_enabled: NotRequired[bool]
    r"""User's multi-factor authentication status"""
    organization_id: NotRequired[str]
    override_release_channel: NotRequired[Nullable[OverrideReleaseChannel]]
    r"""This field is used to override the release channel for the user."""
    phone: NotRequired[Nullable[str]]
    r"""User's phone number"""
    phone_verified: NotRequired[bool]
    r"""User's phone number verification status"""
    preferred_language: NotRequired[str]
    r"""User's preferred language"""
    properties: NotRequired[List[UserV2PropertiesTypedDict]]
    secondary_phone: NotRequired[Nullable[str]]
    r"""User's secondary phone number, preferred for communication"""
    signature: NotRequired[Nullable[str]]
    r"""User's email signature"""
    status: NotRequired[Status]
    token: NotRequired[str]
    r"""Token used to invite a user to epilot"""
    

class UserV2(BaseModel):
    created_at: Optional[str] = None
    custom_start_page: OptionalNullable[str] = "/app/dashboard"
    r"""User's start page after login"""
    department: OptionalNullable[str] = UNSET
    r"""User's department"""
    display_name: Optional[str] = None
    r"""User's display name (default: email address)"""
    draft_email: OptionalNullable[str] = UNSET
    r"""User's pending email address"""
    email: Optional[str] = None
    r"""User's email address"""
    favorites: Optional[Dict[str, Any]] = None
    feature_preferences: OptionalNullable[Dict[str, Any]] = UNSET
    r"""User's feature preferences"""
    id: Optional[str] = None
    r"""User's unique identifier"""
    image_uri: OptionalNullable[UserV2ImageURI] = UNSET
    r"""User's custom profile image"""
    is_signature_enabled: OptionalNullable[bool] = UNSET
    r"""Whether the user's signature is enabled"""
    mfa_enabled: Optional[bool] = None
    r"""User's multi-factor authentication status"""
    organization_id: Optional[str] = None
    override_release_channel: OptionalNullable[OverrideReleaseChannel] = UNSET
    r"""This field is used to override the release channel for the user."""
    phone: OptionalNullable[str] = UNSET
    r"""User's phone number"""
    phone_verified: Optional[bool] = None
    r"""User's phone number verification status"""
    preferred_language: Optional[str] = None
    r"""User's preferred language"""
    properties: Optional[List[UserV2Properties]] = None
    secondary_phone: OptionalNullable[str] = UNSET
    r"""User's secondary phone number, preferred for communication"""
    signature: OptionalNullable[str] = UNSET
    r"""User's email signature"""
    status: Optional[Status] = None
    token: Optional[str] = None
    r"""Token used to invite a user to epilot"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["created_at", "custom_start_page", "department", "display_name", "draft_email", "email", "favorites", "feature_preferences", "id", "image_uri", "is_signature_enabled", "mfa_enabled", "organization_id", "override_release_channel", "phone", "phone_verified", "preferred_language", "properties", "secondary_phone", "signature", "status", "token"]
        nullable_fields = ["custom_start_page", "department", "draft_email", "feature_preferences", "image_uri", "is_signature_enabled", "override_release_channel", "phone", "secondary_phone", "signature"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class UserV2InputTypedDict(TypedDict):
    created_at: NotRequired[str]
    custom_start_page: NotRequired[Nullable[str]]
    r"""User's start page after login"""
    department: NotRequired[Nullable[str]]
    r"""User's department"""
    display_name: NotRequired[str]
    r"""User's display name (default: email address)"""
    draft_email: NotRequired[Nullable[str]]
    r"""User's pending email address"""
    email: NotRequired[str]
    r"""User's email address"""
    favorites: NotRequired[Dict[str, Any]]
    feature_preferences: NotRequired[Nullable[Dict[str, Any]]]
    r"""User's feature preferences"""
    image_uri: NotRequired[Nullable[UserV2ImageURITypedDict]]
    r"""User's custom profile image"""
    is_signature_enabled: NotRequired[Nullable[bool]]
    r"""Whether the user's signature is enabled"""
    mfa_enabled: NotRequired[bool]
    r"""User's multi-factor authentication status"""
    organization_id: NotRequired[str]
    override_release_channel: NotRequired[Nullable[OverrideReleaseChannel]]
    r"""This field is used to override the release channel for the user."""
    phone: NotRequired[Nullable[str]]
    r"""User's phone number"""
    phone_verified: NotRequired[bool]
    r"""User's phone number verification status"""
    preferred_language: NotRequired[str]
    r"""User's preferred language"""
    properties: NotRequired[List[UserV2PropertiesTypedDict]]
    secondary_phone: NotRequired[Nullable[str]]
    r"""User's secondary phone number, preferred for communication"""
    signature: NotRequired[Nullable[str]]
    r"""User's email signature"""
    status: NotRequired[Status]
    token: NotRequired[str]
    r"""Token used to invite a user to epilot"""
    

class UserV2Input(BaseModel):
    created_at: Optional[str] = None
    custom_start_page: OptionalNullable[str] = "/app/dashboard"
    r"""User's start page after login"""
    department: OptionalNullable[str] = UNSET
    r"""User's department"""
    display_name: Optional[str] = None
    r"""User's display name (default: email address)"""
    draft_email: OptionalNullable[str] = UNSET
    r"""User's pending email address"""
    email: Optional[str] = None
    r"""User's email address"""
    favorites: Optional[Dict[str, Any]] = None
    feature_preferences: OptionalNullable[Dict[str, Any]] = UNSET
    r"""User's feature preferences"""
    image_uri: OptionalNullable[UserV2ImageURI] = UNSET
    r"""User's custom profile image"""
    is_signature_enabled: OptionalNullable[bool] = UNSET
    r"""Whether the user's signature is enabled"""
    mfa_enabled: Optional[bool] = None
    r"""User's multi-factor authentication status"""
    organization_id: Optional[str] = None
    override_release_channel: OptionalNullable[OverrideReleaseChannel] = UNSET
    r"""This field is used to override the release channel for the user."""
    phone: OptionalNullable[str] = UNSET
    r"""User's phone number"""
    phone_verified: Optional[bool] = None
    r"""User's phone number verification status"""
    preferred_language: Optional[str] = None
    r"""User's preferred language"""
    properties: Optional[List[UserV2Properties]] = None
    secondary_phone: OptionalNullable[str] = UNSET
    r"""User's secondary phone number, preferred for communication"""
    signature: OptionalNullable[str] = UNSET
    r"""User's email signature"""
    status: Optional[Status] = None
    token: Optional[str] = None
    r"""Token used to invite a user to epilot"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["created_at", "custom_start_page", "department", "display_name", "draft_email", "email", "favorites", "feature_preferences", "image_uri", "is_signature_enabled", "mfa_enabled", "organization_id", "override_release_channel", "phone", "phone_verified", "preferred_language", "properties", "secondary_phone", "signature", "status", "token"]
        nullable_fields = ["custom_start_page", "department", "draft_email", "feature_preferences", "image_uri", "is_signature_enabled", "override_release_channel", "phone", "secondary_phone", "signature"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
