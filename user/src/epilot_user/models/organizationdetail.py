"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from epilot_user.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import ConfigDict, model_serializer
from typing import Any, Dict, Optional, TypedDict
from typing_extensions import NotRequired


class OrganizationDetailType(str, Enum):
    VENDOR = "Vendor"
    PARTNER = "Partner"

class OrganizationDetailTypedDict(TypedDict):
    email: str
    name: str
    pricing_tier: str
    type: OrganizationDetailType
    is_privacy_policy_checked: NotRequired[Nullable[bool]]
    is_terms_and_conditions_checked: NotRequired[Nullable[bool]]
    phone: NotRequired[str]
    website: NotRequired[str]
    

class OrganizationDetail(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    email: str
    name: str
    pricing_tier: str
    type: OrganizationDetailType
    is_privacy_policy_checked: OptionalNullable[bool] = UNSET
    is_terms_and_conditions_checked: OptionalNullable[bool] = UNSET
    phone: Optional[str] = None
    website: Optional[str] = None
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["is_privacy_policy_checked", "is_terms_and_conditions_checked", "phone", "website"]
        nullable_fields = ["is_privacy_policy_checked", "is_terms_and_conditions_checked"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
