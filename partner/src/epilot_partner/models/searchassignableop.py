"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .assignable import Assignable, AssignableTypedDict
from enum import Enum
from epilot_partner.types import BaseModel
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Types(str, Enum):
    USER = "user"
    PARTNER_USER = "partner_user"
    PARTNER_ORGANIZATION = "partner_organization"
    ECP = "ecp"

class SearchAssignableRequestBodyTypedDict(TypedDict):
    from_: NotRequired[int]
    r"""start results from an offset for pagination"""
    org_ids: NotRequired[List[str]]
    r"""filter results to specific organizations. defaults to all orgs"""
    portal_users_entity_id_scope: NotRequired[str]
    r"""Optional parameter if 'types' contains 'ecp' type user. Portal Users will only be fetched in the context of an entity, fetching the related ones through relations and not returning placeholders anymore."""
    q: NotRequired[str]
    r"""search query to filter results"""
    size: NotRequired[int]
    r"""limit number of results to return"""
    types: NotRequired[List[Types]]
    r"""filter results to specific types of assignables. defaults to all types"""
    

class SearchAssignableRequestBody(BaseModel):
    from_: Annotated[Optional[int], pydantic.Field(alias="from")] = 0
    r"""start results from an offset for pagination"""
    org_ids: Optional[List[str]] = None
    r"""filter results to specific organizations. defaults to all orgs"""
    portal_users_entity_id_scope: Annotated[Optional[str], pydantic.Field(alias="portalUsersEntityIdScope")] = ""
    r"""Optional parameter if 'types' contains 'ecp' type user. Portal Users will only be fetched in the context of an entity, fetching the related ones through relations and not returning placeholders anymore."""
    q: Optional[str] = ""
    r"""search query to filter results"""
    size: Optional[int] = 25
    r"""limit number of results to return"""
    types: Optional[List[Types]] = None
    r"""filter results to specific types of assignables. defaults to all types"""
    

class SearchAssignableResponseBodyTypedDict(TypedDict):
    r"""List of assignable results"""
    
    hits: NotRequired[int]
    r"""total number of search results"""
    results: NotRequired[List[AssignableTypedDict]]
    

class SearchAssignableResponseBody(BaseModel):
    r"""List of assignable results"""
    
    hits: Optional[int] = None
    r"""total number of search results"""
    results: Optional[List[Assignable]] = None
    
