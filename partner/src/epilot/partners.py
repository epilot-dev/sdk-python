"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from epilot.models import operations, shared
from typing import Optional

class Partners:
    r"""Partners"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def activate_partner(self, request: operations.ActivatePartnerRequest) -> operations.ActivatePartnerResponse:
        r"""activatePartner
        Activate partner using an invite token
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/partner-directory/public/activate'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "activate_partner_payload", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ActivatePartnerRequest, request)
        headers['Accept'] = '*/*'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActivatePartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def approve_partner(self, request: operations.ApprovePartnerRequest) -> operations.ApprovePartnerResponse:
        r"""approvePartner
        Approve partner request
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApprovePartnerRequest, base_url, '/v1/partners/{id}/approve', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApprovePartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out
        elif http_res.status_code == 400:
            pass

        return res

    
    def batch_get_assignable(self, request: list[operations.BatchGetAssignableRequestBody]) -> operations.BatchGetAssignableResponse:
        r"""batchGet
        Search for assignable users from this organization by its ids
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/partners/assignables:batchGet'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BatchGetAssignableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.BatchGetAssignable200ApplicationJSON])
                res.batch_get_assignable_200_application_json_object = out

        return res

    
    def get_partner_by_token(self, request: operations.GetPartnerByTokenRequest) -> operations.GetPartnerByTokenResponse:
        r"""getPartnerByToken
        Get partner by token
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/partner-directory/public/getPartnerByToken'
        headers = {}
        query_params = utils.get_query_params(operations.GetPartnerByTokenRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPartnerByTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out
        elif http_res.status_code == 404:
            pass

        return res

    
    def invite_partner(self, request: operations.InvitePartnerRequest) -> operations.InvitePartnerResponse:
        r"""invitePartner
        Create a new partner in partner directory and send an invite email to accept request
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InvitePartnerRequest, base_url, '/v1/partners/{id}/invite', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "partner_invitation_payload", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvitePartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out
        elif http_res.status_code == 400:
            pass

        return res

    
    def reject_partner(self, request: operations.RejectPartnerRequest) -> operations.RejectPartnerResponse:
        r"""rejectPartner
        Reject partner request
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RejectPartnerRequest, base_url, '/v1/partners/{id}/reject', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RejectPartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out
        elif http_res.status_code == 400:
            pass

        return res

    
    def resend_partner_invitation(self, request: operations.ResendPartnerInvitationRequest) -> operations.ResendPartnerInvitationResponse:
        r"""resendPartnerInvitation
        Resend partner invitation email
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResendPartnerInvitationRequest, base_url, '/v1/partners/{id}/invite:resendEmail', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResendPartnerInvitationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out
        elif http_res.status_code == 400:
            pass

        return res

    
    def search_assignable(self, request: operations.SearchAssignableRequestBody) -> operations.SearchAssignableResponse:
        r"""searchAssignables
        Search for assignable users/organizations from this organization and Partners
        
        Results can include:
         - Users in your organization
         - Users in partner organizations
         - Partner organizations
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/partners/assignables:search'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchAssignableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SearchAssignable200ApplicationJSON])
                res.search_assignable_200_application_json_object = out

        return res

    
    def search_geolocation_for_text(self, request: shared.SearchGeolocation) -> operations.SearchGeolocationForTextResponse:
        r"""searchGeolocationForText
        Converts a given string, in the format of an address, to geo-location latitude and longitude
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/geolocation/text:search'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchGeolocationForTextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Geolocation])
                res.geolocation = out
        elif http_res.status_code in [400, 404]:
            pass

        return res

    