"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .externalcustomvariable import ExternalCustomVariable
from .templatetype import TemplateType
from dataclasses_json import Undefined, dataclass_json
from epilot import utils
from typing import List, Optional


@dataclasses.dataclass
class ContextData:
    r"""If context data is avaialble, this data will be used for variable replace."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VariableParameters:
    UNSET='__SPEAKEASY_UNSET__'
    template_type: TemplateType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_type') }})
    brand_id: Optional[float] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand_id'), 'exclude': lambda f: f is VariableParameters.UNSET }})
    r"""Brand ID"""
    context_data: Optional[ContextData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context_data'), 'exclude': lambda f: f is None }})
    r"""If context data is avaialble, this data will be used for variable replace."""
    custom_variables: Optional[List[ExternalCustomVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_variables'), 'exclude': lambda f: f is None }})
    r"""Custom variables with specified values form other services."""
    language: Optional[str] = dataclasses.field(default='de', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""2-letter language code (ISO 639-1)"""
    main_entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('main_entity_id'), 'exclude': lambda f: f is None }})
    r"""The main entity ID. Use main entity in order to use the variable without schema slug prefix - or just pass directly to other object ID."""
    template_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_name'), 'exclude': lambda f: f is None }})
    r"""The name of email template"""
    template_tags: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_tags'), 'exclude': lambda f: f is None }})
    r"""The tags of email template"""
    user_id: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is VariableParameters.UNSET }})
    r"""User ID"""
    user_org_id: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_org_id'), 'exclude': lambda f: f is VariableParameters.UNSET }})
    r"""Organization ID of the user"""
    variables_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variables_version'), 'exclude': lambda f: f is None }})
    r"""The version of the variables syntax supported. Default is 1.0"""
    

