"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from epilot.models import operations, shared
from typing import Optional

class CustomVariables:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_custom_variable(self, request: shared.CustomVariable) -> operations.CreateCustomVariableResponse:
        r"""Create custom variable
        Create custom variable
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/custom-variables'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_custom_variable(self, request: operations.DeleteCustomVariableRequest) -> operations.DeleteCustomVariableResponse:
        r"""Delete custom variable
        Immediately and permanently deletes a custom variable
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomVariableRequest, base_url, '/v1/custom-variables/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_blue_print_table_config(self) -> operations.GetBluePrintTableConfigResponse:
        r"""Get default table config
        Get default table config
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/custom-variables/order-table-blueprint'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBluePrintTableConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVariable])
                res.custom_variable = out
        elif http_res.status_code == 403:
            pass

        return res

    def get_custom_variable(self, request: operations.GetCustomVariableRequest) -> operations.GetCustomVariableResponse:
        r"""Get custom variable
        Get custom variable
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomVariableRequest, base_url, '/v1/custom-variables/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVariable])
                res.custom_variable = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_custom_variables(self) -> operations.GetCustomVariablesResponse:
        r"""Get custom variables
        Get all custom variables of organization
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/custom-variables'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomVariablesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomVariable]])
                res.custom_variables = out
        elif http_res.status_code == 403:
            pass

        return res

    def update_custom_variable(self, request: operations.UpdateCustomVariableRequest) -> operations.UpdateCustomVariableResponse:
        r"""Update custom variable
        Update custom variable
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomVariableRequest, base_url, '/v1/custom-variables/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_variable", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomVariableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    