"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .externalcustomvariable import ExternalCustomVariable, ExternalCustomVariableTypedDict
from .templatetype import TemplateType
from epilot_template_variables.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


class ContextDataTypedDict(TypedDict):
    r"""If context data is avaialble, this data will be used for variable replace."""
    
    

class ContextData(BaseModel):
    r"""If context data is avaialble, this data will be used for variable replace."""
    
    

class VariableParametersTypedDict(TypedDict):
    template_type: TemplateType
    brand_id: NotRequired[Nullable[float]]
    r"""Brand ID"""
    context_data: NotRequired[ContextDataTypedDict]
    r"""If context data is avaialble, this data will be used for variable replace."""
    custom_variables: NotRequired[List[ExternalCustomVariableTypedDict]]
    r"""Custom variables with specified values form other services."""
    language: NotRequired[str]
    r"""2-letter language code (ISO 639-1)"""
    main_entity_id: NotRequired[str]
    r"""The main entity ID. Use main entity in order to use the variable without schema slug prefix - or just pass directly to other object ID."""
    template_name: NotRequired[str]
    r"""The name of email template"""
    template_tags: NotRequired[List[str]]
    r"""The tags of email template"""
    user_id: NotRequired[Nullable[str]]
    r"""User ID"""
    user_org_id: NotRequired[Nullable[str]]
    r"""Organization ID of the user"""
    variables_version: NotRequired[str]
    r"""The version of the variables syntax supported. Default is 1.0"""
    

class VariableParameters(BaseModel):
    template_type: TemplateType
    brand_id: OptionalNullable[float] = UNSET
    r"""Brand ID"""
    context_data: Optional[ContextData] = None
    r"""If context data is avaialble, this data will be used for variable replace."""
    custom_variables: Optional[List[ExternalCustomVariable]] = None
    r"""Custom variables with specified values form other services."""
    language: Optional[str] = "de"
    r"""2-letter language code (ISO 639-1)"""
    main_entity_id: Optional[str] = None
    r"""The main entity ID. Use main entity in order to use the variable without schema slug prefix - or just pass directly to other object ID."""
    template_name: Optional[str] = None
    r"""The name of email template"""
    template_tags: Optional[List[str]] = None
    r"""The tags of email template"""
    user_id: OptionalNullable[str] = UNSET
    r"""User ID"""
    user_org_id: OptionalNullable[str] = UNSET
    r"""Organization ID of the user"""
    variables_version: Optional[str] = None
    r"""The version of the variables syntax supported. Default is 1.0"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["brand_id", "context_data", "custom_variables", "language", "main_entity_id", "template_name", "template_tags", "user_id", "user_org_id", "variables_version"]
        nullable_fields = ["brand_id", "user_id", "user_org_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
