"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from epilot.models import operations
from typing import Any, Optional

class OrganizationSettings:
    r"""Organisation Settings"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_settings_value(self, request: operations.DeleteSettingsValueRequest) -> operations.DeleteSettingsValueResponse:
        r"""deleteSettingsValue
        Updates an organizatio nsetting
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSettingsValueRequest, base_url, '/v2/organization/{org_id}/settings/{key}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSettingsValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass

        return res

    def get_settings(self, request: operations.GetSettingsRequest) -> operations.GetSettingsResponse:
        r"""getSettings
        Get full organization settings object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSettingsRequest, base_url, '/v2/organization/{org_id}/settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.settings = out

        return res

    def put_settings_value(self, request: operations.PutSettingsValueRequest) -> operations.PutSettingsValueResponse:
        r"""putSettingsValue
        Updates an organization setting
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSettingsValueRequest, base_url, '/v2/organization/{org_id}/settings/{key}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSettingsValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.settings_value = out

        return res

    